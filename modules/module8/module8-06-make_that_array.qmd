---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 2.1. Exercises

## Make that Array

```python
np.ones((4, 3))
```

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'Given the above code, what array would be outputted?',
        {
        '<code>array([[1., 1., 1.], <br>       [1., 1., 1.], <br>       [1., 1., 1.], <br>       [1., 1., 1.]])</code>': '',
        '<code>array([[1., 1., 1., 1.],<br>       [1., 1., 1., 1.],<br>       [1., 1., 1., 1.]])</code>': 'Remember that the number of rows precedes the number of columns.',
        '<code>array([[1., 1.],<br>       [1., 1.],<br>       [1., 1.]])</code>': 'When we make arrays, it’s not like slicing where we exclude the last value.',
        '<code>array([[1., 1., 1.],<br>       [1., 1., 1.]])</code>': 'When we make arrays, it’s not like slicing where we exclude the last value.',
        },
        '<code>array([[1., 1., 1.], <br>       [1., 1., 1.], <br>       [1., 1., 1.], <br>       [1., 1., 1.]])</code>',
    );
</script>

## Shape, Size, and Dimension

```python
array([[ 0,  1,  2,  3,  4,  5,  6,  7],
       [ 8,  9, 10, 11, 12, 13, 14, 15]])

```

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 1',
        'What is the shape of the above array?',
        {
        '<code>(7, 2)</code>': 'Are you getting your columns and rows mixed up?',
        '<code>(2, 7)</code>': 'Are you counting the number of columns correctly?',
        '<code>(8, 2)</code>': 'Remember the number of rows precedes the number of columns.',
        '<code>(2, 8)</code>': '',
        },
        '<code>(2, 8)</code>',
    );
</script>

```python
array([[[ 0,  1,  2,  3,  4],
        [ 5,  6,  7,  8,  9]],

       [[10, 11, 12, 13, 14],
        [15, 16, 17, 18, 19]],

       [[20, 21, 22, 23, 24],
        [25, 26, 27, 28, 29]]])
```

<div id='mcq3'></div>
<script>
    generateQuiz(
        'mcq3',
        'Question 2',
        'Given the above array, which code would output <code>30</code>?',
        {
        '<code>.size</code>': '',
        '<code>.ndim</code>': 'This gives the dimension of the array, which would be 3, not 30.',
        '<code>.prod</code>': 'This would result in an error.',
        '<code>.size()': 'Since these are attributes, there is no need for the parentheses.',
        },
        '<code>.size</code>',
    );
</script>

<div id='mcq4'></div>
<script>
    generateQuiz(
        'mcq4',
        'Question 3',
        'Give an array with <code>shape</code> of <code>(2,3,4,2)</code>, What is it’s <code>.ndim</code>?',
        {
        '2': 'The values in the tuple do not answer this question.',
        '3': 'The values in the tuple do not answer this question.',
        '4': 'Bingo! You count the length of the tuple to find the dimension.',
        '5': 'What is the length of the tuple?',
        },
        '4',
    );
</script>

## More Arrays Questions

Use the following array named `hurray` to answer the next set of questions.

```python
array([[ 0,  1,  2],
       [ 3,  4,  5],
       [ 6,  7,  8],
       [ 9, 10, 11],
       [12, 13, 14],
       [15, 16, 17]])
```

```python
# Question 1
array([[0, 1, 2],
       [3, 4, 5],
       [6, 7, 8]])
```

<div id='mcq5'></div>
<script>
    generateQuiz(
        'mcq5',
        'Question 1',
        'Which code would I use to obtain the above output?',
        {
        '<code>hurray[:3]</code>': '',
        '<code>hurray[,:3])</code>': 'You are slicing columns when you should be slicing rows.',
        '<code>hurray[,:2])</code>': 'You are slicing columns when you should be slicing rows.',
        '<code>hurray[:2])</code>': 'Remember the last index is excluded.',
        },
        '<code>hurray[:3]</code>',
    );
</script>

```python
# Question 2
array([[10, 11],
       [13, 14]])
```

<div id='mcq6'></div>
<script>
    generateQuiz(
        'mcq6',
        'Question 2',
        'Which code would result in the above output?',
        {
        '<code>hurray[3:4, 1:]</code>': 'Remember that the last element is excluded from the selection.',
        '<code>hurray[2:4, 1:]</code>': 'Remember the first index value is included and the last value is excluded.',
        '<code>hurray[1:, 3:5]</code>': 'Remember the number of rows precedes the number of columns.',
        '<code>hurray[3:5, 1:]</code>': '',
        },
        '<code>hurray[3:5, 1:]</code>',
    );
</script>

```python
# Question 3
array([[ 0,  3,  6,  9, 12, 15],
       [ 1,  4,  7, 10, 13, 16],
       [ 2,  5,  8, 11, 14, 17]])
```

<div id='mcq7'></div>
<script>
    generateQuiz(
        'mcq7',
        'Question 3',
        'Which code would I use to obtain the above output?',
        {
        '<code>hurray.t</code>': 'Uppercase and lowercase characters are not considered equal in Python.',
        '<code>hurray.T</code>': '',
        '<code>np.T(hurray)</code>': '<code>np.T</code> is not a valid function.',
        '<code>hurray.T()</code>': 'Transposing does not require any parentheses.',
        },
        '<code>hurray.T</code>',
    );
</script>


## Coding questions

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_


### Making an Array

Let's make an array and find its size and dimension. 

**Tasks:**

- Create an array named `arr1` that contains only elements with values 1 and a shape of (3,5).
- Save the dimension and size of `arr1` in objects named `arr1_dim` and `arr1_size` respectively. 

```{pyodide}
#| setup: true
#| exercise: making_an_array
import pandas as pd
```

```{pyodide}
#| exercise: making_an_array
import numpy as np

# Create an array that contains only elements with values 1 with a shape of (3,5)
# Save it as an object named arr1
____ = ____

____

# Save the dimension and size of `arr1` in objects 
# named `arr1_dim` and `arr1_size` respectively
# ____ = ____
# ____ = ____

# result = {
#     "arr1_dim": arr1_dim,
#     "arr1_size": arr1_size
# }
# result
```

```{pyodide}
#| exercise: making_an_array
#| check: true
from src.utils import print_correct_msg

assert isinstance(result, dict), "result should be a dict."
assert result["arr1_dim"] == 2, "The dimensions of your array are incorrect. Make sure you are creating a 2D array."
assert result["arr1_size"] == 15, "The size of your array is incorrect. Make sure you are creating a 3 by 5 array."
print_correct_msg()
```

:::: { .hint exercise="making_an_array"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you using `.ones((3,5))`?
- Are you using `.ndim` and `.size`?
- Are you saving your objects as the correct names?

:::
::::

:::: { .solution exercise="making_an_array" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import numpy as np

# Create an array that contains only elements with values 1 with a shape of (3,5)
# Save it as an object named arr1
arr1 = np.ones((3,5))

arr1

# Save the dimension and size of `arr1` in objects 
# named `arr1_dim` and `arr1_size` respectively 
arr1_dim = arr1.ndim
arr1_size = arr1.size

result = {
    "arr1_dim": arr1_dim,
    "arr1_size": arr1_size
}
result
```

:::
::::

<br>

### Array Practice

Let's make a new array and transform it by slicing and transposing.

**Tasks:**

- Create an array named `arr2` using `np.linspace()` with 6 equally spaced values from 1 to 16 and a shape of (2,3) (You'll need `.reshape()` for this!).
- Transpose the array and name it `arr2t`.
- Finally, slice the new object `arr2t` so it only includes the values 7 and 16. Save this as an object named `sliced_arr2t`.

```{pyodide}
#| exercise: array_practice
import numpy as np

# Create an array named arr2 using np.linspace() with 6 equally 
# spaced values from 1 to 16 and a shape of (2,3)
____ = ____
____

# Transpose the array and name it arr2t
# ____ = ____
# ____

# Finally slice the new object `arr2t` so it only includes the values 10, 13 and 16. 
# Save this as an object named sliced_arr2t
# ____ = ____
# ____

# result = {
#     "arr2": arr2,
#     "arr2t": arr2t,
#     "sliced_arr2t": sliced_arr2t
# }
# result
```

```{pyodide}
#| exercise: array_practice
#| check: true
from src.utils import print_correct_msg

assert isinstance(result, dict), "result should be a dict."
assert result["arr2"].shape == (2, 3), "The dimensions of your array are incorrect. Make sure you are creating a 2D array using the 'reshape()' function."
assert result["arr2t"].shape == (3, 2), "The dimensions of the transposed array are incorrect. Make sure you are transposing the array properly."
assert result["sliced_arr2t"].shape == (3,), "The dimensions of the sliced array are incorrect. Make sure you are only slicing the required values."
assert sum(result["sliced_arr2t"]) == 39.0, "The the values in the sliced array are incorrect. Are you slicing properly?"
print_correct_msg()
```

:::: { .hint exercise="array_practice"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you using `.reshape()` to change the dimension of np.linspace()?
- Are you using `.T`?
- Are you slicing with `[:,1]`?

:::
::::

:::: { .solution exercise="array_practice" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import numpy as np

# Create an array named arr2 using np.linspace() with 6 equally 
# spaced values from 1 to 16 and a shape of (2,3)
arr2 = np.linspace(1,16,6).reshape(2,3)

# Transpose the array and name it arr2t
arr2t = arr2.T

# Finally slice the new object `arr2t` so it only includes the values 10, 13 and 16
# Save this as an object named sliced_arr2t
sliced_arr2t = arr2t[:,1]

result = {
    "arr2": arr2,
    "arr2t": arr2t,
    "sliced_arr2t": sliced_arr2t
}
result
```

:::
::::