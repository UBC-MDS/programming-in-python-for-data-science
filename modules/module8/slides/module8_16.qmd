---
format: revealjs
title: Working with Dates and Time
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```



![](../../../static/module4/full.png){width="100%" fig-align="center" fig-alt="404 image"}


:::{.notes}
It wasn't too long ago in Module 4, where we briefly mentioned another column dtype called `datetime64` and `timedelta[ns]`.

Dates and times can be a bit tricky and require a specific data type so that analysis can be done correctly.
:::

---

```{python}
# | include: false
cycling = pd.read_csv('data/cycling_data.csv')
```

```{python}
cycling.head()
```

<br>

```{python}
cycling.dtypes
```


:::{.notes} 
Let's take our cycling dataset as an example.

Our date column in our cycling dataframe currently has a dtype value of `object`.
:::

---

```{python}
cycling.sort_values('Date').head(15)
```


:::{.notes} 
When we try to sort these values, it doesn't recognize the day or month values and will sort them in some ascending order that is not temporal. 

We can see that this sorted starts with October 1st, 2019, followed by September 10th, 2019, and then September 11th, 2019. 

Python is purely sorting the rows by month and not taking the day into consideration.
:::

---

```{python}
cycling.head()
```

<br>

```{python}
dates = (cycling['Date'].str.split(' ', expand=True)
                           .rename(columns = {0:'Date',
                                              1:'Time'}))
dates.head()
```


:::{.notes} 
We can try parsing dates ourselves, but that can be difficult and time-consuming. 

To demonstrate this, let's make an attempt at parsing the `Date` column in our `cycling` dataframe, which currently has an `object` dtype.

First, we would need to split the column separating the date and the time and rename the labels 0 and 1 to `Date` and `Time` respectively.
:::

---

```{python}
dates = (dates['Date'].str.split('-', expand=True).rename(columns = {0:'Month',
                                                                     1:'Day',
                                                                     2:'Year'}))
dates.head()
```


:::{.notes}
Once again, we need to split the date column using `str.split(),` which we learned in Module 4, and separate it into columns for the year, month and day.
:::

---

```{python}
dates.iloc[0,1]
```

<br>

```{python}
type(dates.iloc[0,1])
```


:::{.notes} 
Currently, the values in `dates` are of type `str`, so we would not be able to sort them in a temporal manner.
:::

---

```{python}
cycling_dates = (cycling.assign(Year = dates['Year'].astype(int),
                                Month =  dates['Month'],
                                Day = dates['Day'].astype(int))
                                )
cycling_dates.head(3)
```

<br>

```{python}
cycling_dates = cycling_dates.loc[:, ['Year', 'Month', 'Day', 'Name',
                                      'Type', 'Time', 'Distance', 'Comments']]
cycling_dates.head(3)
```


:::{.notes} 
We must convert the columns to integers values and add them to the `cycling_dates` dataframe. 

We are then going to select and reorder the columns in the dataframe, so the new date columns are on the left side.
:::

---

```{python}
cycling_dates.sort_values(['Year', 'Month', 'Day'])
```


:::{.notes} 
Now we try to sort them, but how do we sort the `month` column?

It now incorrectly sorts the rows by listing the October rows before September. 

It must be quite evident that we really don't want to do it this way, right?

There are a lot of limitations, and we haven't yet separated the time. 

Calculating the time between dates now can also be extremely difficult. 

(The differing number of days in months is a contributing factor.)

Thankfully we don't have to do it this way. 

Pandas have some built-in functions that will make our lives much easier. 

By the end of this slide deck, we will be able to answer the question of *what was Tom's longest time between rides*.

This is a question that without pandas, would have taken hours, instead of minutes.
:::

---

## Pandas parse_dates

```{python}
cycling = pd.read_csv('data/cycling_data.csv')
cycling.head(3)
```

<br>

```{python}
cycling.dtypes
```


:::{.notes} 
Remember How Pandas is built using the NumPy library? 

Well in a similar way, Pandas datetime verbs are built using the built-in Python library; <a href="https://docs.python.org/3/library/datetime.html" target="_blank">`datetime` </a>. 

We can parse our data at the same time as we read in our dataframe using the argument `parse_dates`.    

Originally the `Date` column adopts a dtype of `object` when the data is read in.
:::

---

```{python}
cycling_dates = pd.read_csv('data/cycling_data.csv', parse_dates = ['Date'])
cycling_dates.head()
```

<br>

```{python }
cycling_dates.dtypes
```


:::{.notes} 
Using the `parse_dates`argument with `pd.read_csv()`, transforms the column so that so that it now adopts a `datetime64` dtype.
:::

---

```{python}
cycling_dates.sort_values('Date')
```


:::{.notes} 
Now that we have a datetime column which expresses when Tom began his journey, we can sort our dataframe in a temporal manner, properly now:
:::

---

```{python}
pd.read_csv('data/cycling_data_split_time.csv').head()
```

<br>

```{python}
(pd.read_csv('data/cycling_data_split_time.csv',
              parse_dates={'Date': ['Year', 'Month', 'Day', 'Clock']})
              .head())
```


:::{.notes} 
As another example, our date data may be split between multiple columns.

We can combine the `Year`, `Month `, and `Day` columns to a single datetime column by using a dictionary within the `parse_dates` argument. 

The dictionary key indicates the new column name, and the dictionary value is a list with the multiple date columns to combine.
:::

---

```{python}
cycling = pd.read_csv('data/cycling_data.csv')
cycling.head()
```

<br>

```{python}
cycling.dtypes
```


:::{.notes} 
What if we need to convert a column into dtype `datetime` after reading in our data? 

That's not a problem! We have `pd.to_datetime()` to transform columns of an already existing dataframe. 

Let's use our original `cycling` dataframe where `Date` is still of dtype `object`.
:::

---


```{python}
new_cycling = cycling.assign(Date = pd.to_datetime(cycling['Date']))
new_cycling.head()
```

<br>

```{python}
new_cycling.dtypes
```


:::{.notes} 
To convert `Date` to a datetime dtype, we use `pd.to_datetime()` and `assign()`.

Now in the `new_cycling` dataframe, we see that the column `Date` is now of type `datetime64[ns]`

Ok, but what if I don't want the full datetime value, and I want a column with only a portion of it, like the month or year?
:::

---

<a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components" target="_blank"> Pandas datetime tools</a>

- `.dt.day_name()` for the day of the week:

```{python}
new_cycling['Date'].dt.day_name().head(3)
```

<br>

```{python}
new_cycling.assign(weekday = new_cycling['Date'].dt.day_name()).head(3)
```


:::{.notes} 
No worries, we can add a new column to our dataframe in a similar as we did before, but now we can extract a portion of the `datetime` column by using <a href="https://pandas.pydata.org/pandas-docs/stable/user_guide/timeseries.html#time-date-components" target="_blank">one of the many pandas datetime tools</a>.

Here are a couple of examples: 

- `.dt.day_name()` for the day of the week, which we can pair this with `.assign()` to add this as a column in the dataframe.
:::

---

```{python}
new_cycling['Date'].dt.day.head()
```

<br>

```{python}
new_cycling.assign(day = new_cycling['Date'].dt.day).head()
```

:::{.notes} 
- `.dt.day` for the day which we can again use with `.assign()` to add it to our dataframe.
:::

---

Here are some of the most common useful datetime tools: 

- `.dt.year`
- `.dt.month`
- `.dt.month_name()`
- `.dt.day`
- `.dt.day_name()`
- `.dt.hour`
- `.dt.minute`

For a full list, refer to <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.Timestamp.html#:~:text=Timestamp%20is%20the%20pandas%20equivalent,oriented%20data%20structures%20in%20pandas.&text=Value%20to%20be%20converted%20to%20Timestamp.&text=Offset%20which%20Timestamp%20will%20have." target="_blank">the attributes and methods section of the Timestamp documentation</a>.


:::{.notes} 
There is some inconsistency with these verbs. You can see that some use parentheses `()` and some do not. 

Using the `.dt` portion of these can only be used on a pandas Series. We can extract the day, month, year, hour, or minute from a single datetime value, using the same nouns but omitting the `.dt`.

Let's see how that's possible.
:::

---

```{python}
new_cycling.head()
```

<br>

If I select the first example in row 1 of our `new_cycling` dataset, you'll notice that it outputs something called a `Timestamp`. 

```{python}
timestamp_ex = new_cycling.loc[1,'Date']
timestamp_ex
```


:::{.notes} 
If I select the first example in row 1 of our `new_cycling` dataset, you'll notice that it outputs something called a `Timestamp`. 

This is a pandas data type.
:::

---

```{python}
timestamp_ex
```

<br>

```{python}
timestamp_ex.month_name()
```

<br>

```{python}
timestamp_ex.day
```

<br>

```{python}
timestamp_ex.hour
```


:::{.notes} 
Timestamps show a snapshot of when an event has occurred. Timestamps are complete with both dates and times. If the date and time are not available in your original data, Python will fill in any temporal unknowns with default values (often with `00:00:00` for time, if only the date was provided). 

To obtain the month name, day, or hour from the Timestamp, we can use the same nouns in the previous slide without `.dt`.

Here we get the `.mount_name()`, the `.day` and the `.hour` of a single value by using the same verbs as before but omitting the `.dt`.
:::

---

## .diff()

```{python}
cycling_intervals = new_cycling['Date'].sort_values().diff()
cycling_intervals
```


:::{.notes} 
In our analysis, it might be important to know how frequent events occur and the time between them.   

`.diff()` is a useful function for that. 

This outputs a pandas Series with the time that occurs between rows. As you can see, there was a 10 hour and 22minute gap between Tom's third and forth bike rides. Wow - that's a long workday!"

Here, you'll now notice a new dtype at the bottom of our new pandas Series named  <a href="https://docs.python.org/2/library/datetime.html" target="_blank">`timedelta64`</a>.
:::

---

## timedelta

```{python}
cycling_intervals[1]
```

<br>

```{python}
cycling_intervals[1].seconds
```

<br>

```{python}
sec_per_hour = 60 * 60
cycling_intervals[1].seconds / sec_per_hour
```


:::{.notes} 
Unlike a `Timestamp` that represents a snapshot in time, `timedelta` represents a duration or an interval of time. 

Here we can obtain the time between 2 trips.

Measurement can only be extracted from the timedelta object using either `days`, `seconds`, and  `microseconds` verbs. 

Here we obtain the number of seconds.

We can convert them into other units by using simple operations.

In this case, we convert it to hours by dividing it by the number of seconds in an hour.
:::

---

```{python}
cycling_intervals.max()
```

<br>

```{python}
cycling_intervals.min()
```

<br>

```{python}
interval_range = cycling_intervals.max() - cycling_intervals.min()
interval_range
```


:::{.notes} 
Timedelta objects have a lot of functionality.

We can use a summary statistic verbs with them. 

For example, we can calculate the maximum amount of time between rides.

As well as the minimum.

We can also do a simple operation with them, like finding the range. 
:::


# Let’s apply what we learned!