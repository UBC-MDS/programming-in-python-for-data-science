---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 3.1. Exercises

## Slicing and Dicing Practice

My dataframe object name is `fruit_salad`.

```out
           name    colour    location    seed   shape  sweetness   water-content  weight
0         apple       red     canada    True   round     True          84         100
1        banana    yellow     mexico   False    long     True          75         120
2    cantaloupe    orange      spain    True   round     True          90        1360
3  dragon-fruit   magenta      china    True   round    False          96         600
4    elderberry    purple    austria   False   round     True          80           5
5           fig    purple     turkey   False    oval    False          78          40
6         guava     green     mexico    True    oval     True          83         450
7   huckleberry      blue     canada    True   round     True          73           5
8          kiwi     brown      china    True   round     True          80          76
9         lemon    yellow     mexico   False    oval    False          83          65
```

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'If you wanted only the rows from <code>cantaloupe</code> to  <code>kiwi</code>, what would your code look like using index labels?',
        {
        '<code>fruit_salad.loc[2, 8]</code>': 'This is not the right syntax or number of rows.',
        '<code>fruit_salad[2, 8]</code>': 'This is not using the right syntax.',
        '<code>fruit_salad[2:8]</code>': 'This is missing something rather important.',
        '<code>fruit_salad.loc[2:8]</code>': 'Good job!',
        },
        '<code>fruit_salad.loc[2:8]</code>',
    );
</script>

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'If you wanted all the rows between <code>cantaloupe</code> and <code>fig</code> and only columns <code>name</code> to <code>seed</code>, what would your code look like using index labels?',
        {
        '<code>fruit_salad.loc[2:5, "colour":"seed"]</code>': 'I think you are missing the <code>name</code> column.',
        '<code>fruit_salad.loc[2:5, "name":"seed"]</code>': '',
        '<code>fruit_salad.loc["name":"seed", 2:5]</code>': 'This seems to be backward.',
        '<code>fruit_salad[2:8, "name":"seed"]</code>': 'I think you are missing something important.',
        },
        '<code>fruit_salad.loc[2:5, "name":"seed"]</code>',
    );
</script>

## Coding Questions

**Instructions:**    
Running a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.   

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.**

### Practicing Rows Slicing

This following code chunk will be used to give you an output of the data `hockey_players`. This will help answer and code in the exercises following it.

```{pyodide}
import pandas as pd

# The data
hockey_players = pd.read_csv('data/canucks.csv')
hockey_players
```

Using our `hockey_players` data from the last few questions, let's try slicing it.

**Tasks:**

- Select the players `Guillaume Brisebois` to `Quinn Hughes`.
- Save the new sliced dataframe as object `benched_players`.
- Display it.

```{pyodide}
#| setup: true
#| exercise: [practicing_rows_slicing, practicing_column_slicing]
import pandas as pd
from src.utils import print_correct_msg

hockey_players = pd.read_csv('data/canucks.csv')
```

```{pyodide}
#| exercise: practicing_rows_slicing
# Slice the rows and columns 
# Save the new dataframe as benched_players
benched_players = ____.____[____: ____]

# Display it
____
```

```{pyodide}
#| exercise: practicing_rows_slicing
#| check: true
solution = hockey_players.loc[3:9]
assert isinstance(result, pd.DataFrame), "The result should be a dataframe."
assert solution.shape == result.shape, "You may not have sliced correctly."
assert list(solution.index) == list(result.index), "Your rows do not seem to be correct."
print_correct_msg()
```

:::: { .hint exercise="practicing_rows_slicing" }
::: { .callout-note collapse="false" }

## Hint 1

- Are you using `.loc[]`?
- Are you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.

:::
::::

:::: { .solution exercise="practicing_rows_slicing" }
::: { .callout-tip collapse="false" }

## Fully worked solution:

```{pyodide}
# Slice the rows and columns 
# Save the new dataframe as benched_players
benched_players = hockey_players.loc[3:9]

# Display it
benched_players
```

:::
::::

### Practicing Column Slicing

Use the output of the following code chunk to help answer the next question.

```{pyodide}
import pandas as pd

# The data
hockey_players = pd.read_csv('data/canucks.csv')
hockey_players
```

Using our `hockey_players` data from the last few questions, let's try slicing it.

**Tasks:**

- Select the players `Adam Gaudette` to `Brandon Sutter` and the columns `Player`, `No.`, `Age`, `Height`, `Weight` and `Country`.
- Save the new sliced dataframe as object `star_players`.
- Display it.

```{pyodide}
#| exercise: practicing_column_slicing
# Slice the rows and columns 
# Save the new dataframe as star_players
star_players = ____.____[____: ____, ____: ____]

# Display it
____
```

```{pyodide}
#| exercise: practicing_column_slicing
#| check: true
solution = hockey_players.loc[7:19, 'Player':'Country']
assert isinstance(result, pd.DataFrame), "The result should be a dataframe."
assert solution.shape == result.shape, "You may not have sliced correctly."
assert list(solution.index) == list(result.index), "Your rows do not seem to be correct."
print_correct_msg()
```

:::: { .hint exercise="practicing_column_slicing" }
::: { .callout-note collapse="false" }

## Hint 1

- Are you using `.loc[]`?
- Are you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.
- Did you slice both columns and rows?
- Are you using "quotations"?

:::
::::

:::: { .solution exercise="practicing_column_slicing" }
::: { .callout-tip collapse="false" }

## Fully worked solution:

```{pyodide}
# Slice the rows and columns 
# Save the new dataframe as star_players
star_players = hockey_players.loc[7:19, 'Player':'Country']

# Display it
star_players
```

:::
::::