---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 12.1. Exercises

**Instructions:**    
Running a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question. We have commented them so that the line won't execute and you can test your code after each step.**_ 


## Practicing Bar Charts

You are going to load the `canucks.csv` from the questions that we exported as a `csv` in the last section and create a `bar` plot of the `Positions` column.

**Tasks:**

- Load in the csv named `canucks.csv` and save it as `hockey_players`. 
- Use `alt.Chart()` to create a chart object.
- Use  `.mark_bar()` to create a bar plot.
- Use  `.encode()` to specify the `Position` column for plotting.
- Assign a color as Teal and set opacity to 0.5.
- Don't forget to add a title as "Canuck Player Positions"..

```{pyodide}
#| exercise: practicing_bar_charts
import pandas as pd
import altair as alt

# Load in the csv named "canucks.csv" the same way you did earlier
# Save it as hockey_players
hockey_players = pd.____('data/____', index_col=0)

____

# Use alt.Chart() to create a chart object
# Use the .mark_bar() to create a bar plot
# Use the .encode() to specify the column to plot
# Assign a color as Teal and set opacity to 0.5
# Don't forget to add a title as "Canuck Player Positions"

# position_bar = alt.Chart(
#    ____, width=500, height=300).____(
#        ____='____', ____=____).encode(
#            x='____',
#            y='____').properties(____='____')

#____
```

```{pyodide}
#| exercise: practicing_bar_charts
#| check: true
from src.utils import assert_chart_equal

hockey_players = pd.read_csv('data/canucks.csv', index_col=0)
solution = alt.Chart(
    hockey_players, width=500, height=300).mark_bar(
        color='Teal', opacity=0.5).encode(
            x='Position',
            y='count()').properties(title='Canuck player positions')

assert_chart_equal(solution, result)
```

:::: { .hint exercise="practicing_bar_charts" }
::: { .callout-note collapse="false" }

## Hint 1

- Are you sure you are using `opacity` to set the opacity?
- Are you using the correct Dataframe?
- Did you assign the correct values to `color` and `opacity`?
- Are you using the `.properties(title=...)` to assign the title?
- Are you spelling color in the American manner?

:::
::::

:::: { .solution exercise="practicing_bar_charts" }
::: { .callout-tip collapse="false" }

## Fully worked solution:

```{pyodide}
import pandas as pd
import altair as alt

# Load in the csv named "canucks.csv" the same way you did earlier
# Save it as hockey_players
hockey_players = pd.read_csv('data/canucks.csv', index_col=0)

hockey_players

# Use alt.Chart() to create a chart object
# Use the .mark_bar() to create a bar plot
# Use the .encode() to specify the column to plot
# Assign a color as Teal and set opacity to 0.5
# Don't forget to add a title as "Canuck Player Positions"

position_bar = alt.Chart(
    hockey_players, width=500, height=300).mark_bar(
        color='Teal', opacity=0.5).encode(
            x='Position',
            y='count()').properties(title='Canuck player positions')

position_bar
```

:::
::::

## Practicing Scatterplots

```{pyodide}
import pandas as pd
import altair as alt

hockey_players = pd.read_csv('data/canucks.csv', index_col=0)
hockey_players
```

Ok, let's try our luck with a scatterplot. We want to explore the relationship between `Age` and `Salary`.

**Tasks:**

- Plots x as `Age` and y as `Salary` using a scatterplot and save the plot in an object named `age_salary_scatter`.
- Use the `mark_circle(...)` to specify a scatter plot. 
- Set color to `Darkblue` and opacity to 0.4.
- Don't forget to assign a title as "Canuck players Age vs. Salary".


```{pyodide}
#| setup: true
#| exercise: practicing_scatterplots
import pandas as pd
import altair as alt
from src.utils import assert_chart_equal

hockey_players = pd.read_csv('data/canucks.csv', index_col=0)
```

```{pyodide}
#| exercise: practicing_scatterplots
# Plots x as Age and y as Salary using a scatterplot
# Set color to Darkblue and opacity to 0.4
# Don't forget to assign a title as "Canuck players Age vs. Salary"

____ = alt.____(
   ____, width=500, height=300).____(
       ____='____', ____=____).____(
           x='____',
           y='____').properties(____='____')

____
```

```{pyodide}
#| exercise: practicing_scatterplots
#| check: true
solution = alt.Chart(
    hockey_players, width=500, height=300).mark_circle(
        color='Darkblue', opacity=0.4).encode(
            x='Age',
            y='Salary').properties(title='Canuck players Age vs. Salary')
assert_chart_equal(solution, result)
```

:::: { .hint exercise="practicing_scatterplots" }
::: { .callout-note collapse="false" }

## Hint 1

- Are you using `.mark_circle()`
- Are you sure you using `opacity` to set the opacity?
- Are you using the correct Dataframe?
- Are you assigning variables x and y to the correct columns
- Did you assign the correct values to color, title and opacity?
- Are you spelling color in the American manner?

:::
::::

:::: { .solution exercise="practicing_scatterplots" }
::: { .callout-tip collapse="false" }

## Fully worked solution:

```{pyodide}
# Plots x as Age and y as Salary using a scatterplot
# Set color to Darkblue and opacity to 0.4
# Don't forget to assign a title as "Canuck players Age vs. Salary"

age_salary_scatter = alt.Chart(
    hockey_players, width=500, height=300).mark_circle(
        color='Darkblue', opacity=0.4).encode(
            x='Age',
            y='Salary').properties(title='Canuck players Age vs. Salary')

age_salary_scatter
```

:::
::::
