---
format: revealjs
title: Slicing with Pandas Using .loc[]
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

## Cereal Data

```{python}
import pandas as pd
  
cereal = pd.read_csv('data/cereal.csv')
cereal.head()
```

<br>

Attribution:     
*“[80 Cereals](https://www.kaggle.com/crawford/80-cereals/)” (c) by [Chris Crawford](https://www.linkedin.com/in/crawforc3/) is licensed under [Creative Commons Attribution-ShareAlike 3.0 Unported](http://creativecommons.org/licenses/by-sa/3.0/)*
  
:::{.notes}
Congratulations on writing your first code! 

We have read in our data, and we know the dimensions. Well, now what? 

Let's go over how we would **index**, **slice**, and  **select** certain columns or rows of our data.

Let's start by importing pandas and loading in a dataset named `cereal.csv,` and we will save it as `cereal.`

We can see all the columns and the first 5 rows of the dataframe using `.head()`

Let's say we only want certain rows, however, of the dataframe or certain columns.

We talked about how `.head()` will generate the first few rows of a dataframe (5 as default), but what if we wanted the rows from 5-10?

The first column of this dataframe is called the `index.` 

Each row has a label (the index) as well as a position. In this case, the index label of an observation is the same as it's position. 

This doesn't always have to be the case. We can assign another column as the index; however, we will wait to discuss this in the next module.
:::

---

```{python}
# | include: false
pd.set_option('display.max_rows', 16)
```

```{python}
cereal.head(15)
```

  
:::{.notes} 
Here are the first 15 rows of the dataframe. 

Let's talk about observation 4 which is named `Almond Delight`.  Its index label is `4` as well as it's index position.    

If you just went and counted those again and started screaming "5! It's the fifth position", that's OK. In the Python language, we start counting at position 0 (then 1, 2, 3, and 4 for Almond Delight).
:::

---

```{python}
# | echo: false
cereal.head(15)
```

:::{.notes} 
Now let's say we want all 5 rows past `Almond Delight`. That means we want the rows from `Apple Cinnamon Cheerios` to `Cap'n'Crunch`.    
:::

---

```{python}
cereal.loc[5:10]
```

:::{.notes} 
We will use `.loc[]` with square brackets to cut the dataframe from "Apple Cinnamon Cheerios" to "Cap'n'Crunch," keeping the columns and everything between.

This code is written as `cereal.loc[5:10]`, and it can be interpreted as _"Obtain the rows in the dataframe located from `5` to `10`."_
:::

---

```{python}
# | echo: false
cereal.loc[5:10]
```


```{python}
cereal.loc[5:10, 'calories':'fiber']
```

<br>

The general format to slice both rows and columns together looks like this:

```python
cereal.loc['row name start':'row name end', 'column name start':'column name end']
```


:::{.notes} 
What if we only wanted certain columns now?

Perhaps we were only interested in the `calories` to `fiber` columns of the "Apple Cinnamon Cheerios" to "Cap'n'Crunch" rows?

We put in the interval of our desired rows first, and then the columns, and we separate these values with a comma.

`.loc[]` is used to slice columns and rows by **label**, and within an interval.

The general format to slice both rows and columns together looks like this:

`cereal.loc['row name start':'row name end', 'column name start':'column name end']`

:::

---

```{python}
cereal.loc[:6]
```

<br>

```{python}
cereal.loc[:6, 'sugars':]
```


:::{.notes}
There is a handy shortcut for slices that include the beginning of a dataframe to a specified row or column label or a specified row or column label to the end of a dataframe. 

For example if we want all the rows up to "Apple Jacks" which has a label equal to 6, we could omit the first label in the code all together. So we can write `cereal.loc[:6]`.

Or we can do something similar for the end of a dataframe. Let's say now we want all the rows up to `Apple Jacks` and only the columns from `sugars` onward to the end of the dataframe. What we would write in this case is `cereal.loc[:6, 'sugars':]`.

We would omit the ending label this time after the `:` (colon) .
:::


# Let’s try it out!
