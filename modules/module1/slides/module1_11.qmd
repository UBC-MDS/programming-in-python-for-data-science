---
format: revealjs
title: Slicing Only Columns Using .loc[]
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

```{python}
# | include: false
cereal = pd.read_csv('data/cereal.csv')
```

```{python}
cereal.loc[:, 'calories':'fiber']
```


:::{.notes} 
What happens now if we wanted all the rows of the dataframe but only the columns `calories` to `fiber`?

We can use `:` in the row postion of the `.loc[]` call to indicate we want all the rows. So here we write `cereal.loc[:, 'calories':'fiber']`.
:::

---

## So Far
    
- `.loc[]` is used to slice columns and rows by **label** and within an interval.

- We always specify **row** indexing first, then **columns**.
  
 ```python
cereal.loc['row name start':'row name end', 'column name start':'column name end']
```
  
- If we aren’t slicing any columns, but we are slicing rows  we can shorten that to
```python
df.loc['row name start':'row name end']
```

- However, the reverse is not true. If we want all the rows with only specific columns, we specify we want all the row first with just a colon `:` followed by interval of the columns:

```python
df.loc[:, 'column name start':'column name end']
```
- We can read `:` as **"to"**.

- If the indices are labeled with numbers, we do not need "quotations" when calling them. This is only when the labels are using letters.
  
:::{.notes}
Let's talk about what we have covered so far.

- `.loc[]` is used to slice columns and rows by **label** and within an interval.

- We always specify **row** indexing first, then **columns**.

- If we are not slicing any columns, but we are slicing rows we only need to specify the row labels.

- However, the reverse is not true. If we want all the rows with only specific columns, we specify rows first and therefore we would need to make it clear with a colon first that we are slicing all the rows followed by the column labels. 

- We can read `:` as **"to"**.

- And finally, if the row index is labeled with numbers, we do not need "quotations" when slicing. 
:::
    
    
# Let’s apply what we learned!
