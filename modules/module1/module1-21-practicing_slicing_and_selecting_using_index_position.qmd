---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 8.1. Exercises

## Practicing Slicing and Selecting Using Index Position


Here is our `fruit_salad` data again:

```out
           name    colour    location    seed   shape  sweetness   water-content  weight
0         apple       red     canada    True   round     True          84         100
1        banana    yellow     mexico   False    long     True          75         120
2    cantaloupe    orange      spain    True   round     True          90        1360
3  dragon-fruit   magenta      china    True   round    False          96         600
4    elderberry    purple    austria   False   round     True          80           5
5           fig    purple     turkey   False    oval    False          78          40
6         guava     green     mexico    True    oval     True          83         450
7   huckleberry      blue     canada    True   round     True          73           5
8          kiwi     brown      china    True   round     True          80          76
9         lemon    yellow     mexico   False    oval    False          83          65
```

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'If I wanted the rows <code>elderberry</code>  to <code>kiwi</code> and only columns <code>seed</code>, <code>shape</code>, <code>sweetness</code> and  <code>water-content</code>, what would my code look like if I was using index positions?',
        {
        '<code>fruit_salad.iloc[4:9, 3:]</code>': 'Not quite, but you are halfway there.',
        '<code>fruit_salad.iloc[4:8, 3:7]</code>': 'Not quite, but you are halfway there.',
        '<code>fruit_salad.iloc[4:9, 3:7]</code>': 'This is correct!',
        '<code>fruit_salad.iloc[5:10, 4:8]</code>': 'Are you forgetting that in the Python language we start counting at 0?',
        },
        '<code>fruit_salad.iloc[4:9, 3:7]</code>',
    );
</script>

## Practicing Slicing Using Index Position

**Instructions:**    
Running a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.**

Use the output of the following code chunk to help complete the next tasks.

```{pyodide}
import pandas as pd
pd.set_option('display.max_columns', 10)
pd.set_option('display.max_rows', 25)

# The data
hockey_players = pd.read_csv('data/canucks.csv')
hockey_players
```

In previous questions, we tried slicing using index labels on our Canack dataset. Let's try something similar but using the index positions.

**Tasks:**

- Slice the players `Jacob Markstrom` to `Tim Schaller` and the columns `Player` to `Height`.
- Save the new sliced dataframe as object `skilled_players`.
- Display it.

```{pyodide}
#| setup: true
#| exercise: [practicing_slicing_using_index_position, practicing_slicing_using_index_position_b]
import pandas as pd
from src.utils import print_correct_msg

hockey_players = pd.read_csv('data/canucks.csv')
```

```{pyodide}
#| exercise: practicing_slicing_using_index_position
# Slice the rows and columns
# Save the new dataframe as skilled_players
# ____ = ____.____[____ : ____ , ____ : ____]

# Display it
____ 
```

```{pyodide}
#| exercise: practicing_slicing_using_index_position
#| check: true
solution = hockey_players.iloc[11:18, 0:4]
assert isinstance(result, pd.DataFrame), "The result should be a DataFrame."
assert solution.shape == result.shape, "You may not have selected correctly."
assert list(solution.columns) == list(result.columns), "Your columns do not seem to be correct."
assert list(solution.index) == list(result.index), "Your rows do not seem to be correct."
print_correct_msg()
```

:::: { .hint exercise="practicing_slicing_using_index_position" }
::: { .callout-note collapse="false" }

## Hint 1

- Are you using `.iloc[]`?
- Are you using the correct dataframe positions? Are you counting starting from 0?
- Are you going 1 index past the bound you want?

:::
::::

:::: { .solution exercise="practicing_slicing_using_index_position" }
::: { .callout-tip collapse="false" }

## Fully worked solution:

```{pyodide}
# Slice the rows and columns 
# Save the new dataframe as skilled_players
skilled_players = hockey_players.iloc[11:18, 0:4]

# Display it
skilled_players 
```

:::
::::

<br>

These unfortunate Canuck players have various forms of injuries, so let's make a dataframe of players who have injuries by selecting them using their index position.

**Tasks:**

- Select `Antoine Roussel`, `Thatcher Demko`, `Jake Virtanen` and `Jay Beagle` with only columns `Player`, `Birth Date`, `Experience` and `Salary` in the specified order.
- Save this dataframe as object `injured_players`.
- Don't forget to display it.

```{pyodide}
#| exercise: practicing_slicing_using_index_position_b
# Slice the rows and columns 
# Save the new dataframe as injured_players
____ = ____.____[____ : ____ , ____ : ____]

# Display it
____ 
```

```{pyodide}
#| exercise: practicing_slicing_using_index_position_b
#| check: true
solution = hockey_players.iloc[[16, 4, 21, 1], [0, 8, 7, 9]]
assert isinstance(result, pd.DataFrame), "The result should be a DataFrame."
assert solution.shape == result.shape, "You may not have selected correctly."
assert list(solution.columns) == list(result.columns), "Your columns do not seem to be correct."
assert list(solution.index) == list(result.index), "Your rows do not seem to be correct."
print_correct_msg()
```

:::: { .hint exercise="practicing_slicing_using_index_position_b" }
::: { .callout-note collapse="false" }

## Hint 1

- Are you using `.iloc[]`?
- Are you using the correct dataframe positions? Are you counting starting from 0?
- Are you using two sets of `[]` square brackets within your `iloc` brackets?

:::
::::

:::: { .solution exercise="practicing_slicing_using_index_position_b" }
::: { .callout-tip collapse="false" }

## Fully worked solution:

```{pyodide}
# Slice the rows and columns 
# Save the new dataframe as injured_players
injured_players = hockey_players.iloc[[16, 4, 21, 1], [0, 8, 7, 9]]

# Display it
injured_players 
```

:::
::::