---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 4.1. Exercises

## Flake8 and Black

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'Which of the following tools will modify your code?',
        {
        '<code>PEP8</code>': 'This is a style guide, not a library to modify your code.',
        '<code>flake8</code>': 'This tool will suggest changes but will not change your code.',
        '<code>blue</code>': 'This is not a style guide nor is it a formatter, in fact, we are not sure what this is either!',
        '<code>black</code>': 'Great work.',
        },
        '<code>black</code>',
    );
</script>

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'Which of the following formatting would Black <b>NOT</b> fix?',
        {
        'Trailing white space': 'Black will remove unnecessary white space!',
        'Adding white space where necessary': 'Black will add white space where appropriate.',
        'Fixing grammar in comments': '',
        'Indentations': 'Black fixes indentations thankfully!',
        },
        'Fixing grammar in comments',
    );
</script>


## Formatting your Code

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_

Let's take the function named `cleanup()` which drops duplicate rows and columns. Rewrite the function code (not the docstring) so that it's written with necessary spaces and indentations.

**Tasks:**

- Amend the function `cleanup()` so that it adopts an approach that has spaces where necessary and blank space is removed. Make sure that you have indentations and empty lines where necessary.

```{pyodide}
#| exercise: formatting_your_code
import pandas as pd

def cleanup(data, columns):
    '''
    This removes any duplicate column names or any duplicate
    rows in the dataframe.

    Parameters
    ----------
    data : pandas.core.frame.DataFrame
        The dataframe to clean
    param2 : list
        A list of columns to determine which are duplicated rows

    Returns
    -------
    pandas.core.frame.DataFrame
        A dataframe with unique columns and rows

    Examples
    --------
    >>> cleanup(bakery,['bread'])
    bread	    quantity
	white	       4
    rye	           6
    wholegrain     2
    '''

    # Drops duplicate columns
            data=data.          loc[      :, ~data.columns.duplicated()  ]  
    
    # Drops duplicate rows
    data = data[  ~  data. duplicated(subset =columns  , keep=False )
    ]



    return data
```

```{pyodide}
#| exercise: formatting_your_code
#| check: true

assert False, "No tests available. Please check the solution."
```

:::: { .hint exercise="formatting_your_code"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you adding spaces between operators? 
- Are you removing spaces where appropriate?
- Did you fix the indentation error?
- How about removing the blank lines before the return statement?

:::
::::

:::: { .solution exercise="formatting_your_code" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import pandas as pd

def cleanup(data, columns):
    '''
    This removes any duplicate column names or any duplicate
    rows in the dataframe.

    Parameters
    ----------
    data : pandas.core.frame.DataFrame
        The dataframe to clean
    param2 : list
        A list of columns to determine which are duplicated rows

    Returns
    -------
    pandas.core.frame.DataFrame
        A dataframe with unique columns and rows

    Examples
    --------
    >>> cleanup(bakery,['bread'])
    bread	    quantity
	white	       4
    rye	           6
    wholegrain     2
    '''

    # Drops duplicate columns
    data = data.loc[:, ~data.columns.duplicated()]  
    
    # Drops duplicate rows
    data = data[~data.duplicated(subset=columns, keep=False)]

    return data
```

:::
::::