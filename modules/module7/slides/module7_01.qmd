---
format: revealjs
title: Importing Python Libraries
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```


```{python}
import pandas
```

<br>

```{python}
pandas.read_csv('data/cereal.csv')
```


:::{.notes} 
All the way back in Module 1, we learned how to import the `pandas` library for dataframe wrangling and `altair` to visualize our data with plots. 

We imported these libraries because basic Python does not have all the built-in tools that we need to accomplish what we want; therefore, we import other tools into our environment. 

To import a library, we saw that we can use the keyword `import` followed by the desired package name.

In this case, we are importing `pandas`.

This now lets us use verbs that reside in the `pandas` library, such as `read_csv()`.

We need to specify the library name -`pandas` and then the verb - `read_csv()`.
:::

---

```{python}
import pandas as pd 
import altair as alt
```

<br>

```{python}
pd.read_csv('data/cereal.csv')
```


:::{.notes} 
For efficiency, in the majority of this course, we have been importing our libraries by assigning them a shorter condensed name or alias.

For example, in the assignments and practice exercises, we have been importing `pandas` and `altair` with names such as `pd` and `alt`, respectively. 

Now when we call functions from either of these libraries, we only type the short form alias we assigned to the library name.

Now instead of writing `pandas.read_csv('data/cereal.csv')`, we can shorten it to `pd.read_csv('data/cereal.csv')`.
:::

---


```{python}
from pandas import read_csv
```

<br>

```{python}
read_csv('data/cereal.csv')
```


:::{.notes} 
We can also import a single function from a library using the keyword `from`.

If we only want the `read_csv()` function from the `pandas` package, we could first specify the library the function belongs to, followed by the function name: 

Here it's `from pandas import read_csv`. 

Now when we call `read_csv()`, we don't need to specify the package name or alias before it. 

This mostly helps if we have only a single function we wish to use, instead of importing the entire library.  

This works for Python libraries, but how do we import functions we've made that are located in another file? 

If we want to reuse code to adhere to the DRY principle, what is our next step? 

This question will be answered in the next section of this module. 
:::



# Letâ€™s apply what we learned!