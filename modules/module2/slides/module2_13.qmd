---
format: revealjs
title: Column Arithmetic and Creation
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

```{python}
cereal = pd.read_csv('data/cereal.csv')
cereal.head()
```

**Attribution:**     
_“[80 Cereals](https://www.kaggle.com/crawford/80-cereals/)” (c) by [Chris Crawford](https://www.linkedin.com/in/crawforc3/) is licensed under [Creative Commons Attribution-ShareAlike 3.0 Unported](http://creativecommons.org/licenses/by-sa/3.0/)_


:::{.notes} 
Doing some sort of transformation on the columns of a dataframe will most likely come up in your analysis somewhere and it's not always straightforward.

Let's welcome back the `cereal.csv` data we have been working with.
:::

---

```{python}
cereal= cereal.iloc[:5]
cereal
```

:::{.notes} 
To make things especially clear, for the next few scenarios let's only use the first 5 rows of the dataset.
:::

---

![](../../../static/module2/times1000.png){fig-align="center" fig-alt="404 image"}


:::{.notes}
Take this next scenario. 

Perhaps we recently read the cereal data's documentation explaining that the `fat` column is being expressed as grams and we are interested in milligrams.   

How can we rectify this?

We need to multiply each of the row's fat values by 1000.
:::

---

```{python}
cereal['fat']
```

<br>

Is transformed to this: 

```{python}
cereal['fat'] * 1000
```


:::{.notes} 
Here is where some magic happens. 

Python doesn't require us to make a whole column filled with 1000s to get the result we want. 

It simply multiplies each value by 1000. 
(In Python we use `*` for multiplication.)

So our original fat column in the cereal dataframe is transformed! 

See how each value has changed?

Note that when we do any type of operations on columns, we use single square brackets.
:::

---

```{python}
cereal['rating'] 
```

<br>

```{python}
cereal['rating'] / 10
```


:::{.notes} 
We can do the same thing with most operations.
Let's divide the rating of each cereal by 10 so that it lies on a 10 point scale.   

The ratings column gets transformed to single digits instead of double digits now.
:::

---

![](../../../static/module2/divide10.png){fig-align="center" fig-alt="404 image"}


:::{.notes} 
Every row's value is changed by the operation.
:::

---

![](../../../static/module2/sugarcups.png){width="60%" fig-alt="404 image" fig-align="center"}

<br>

```{python}
cereal['sugars'] / cereal['cups']
```


:::{.notes}
We are not limited to simply taking a column and transforming it by a single number, say by multiplying or dividing.

We can do operations involving multiple columns as well. Perhaps we wanted to know the amount of sugar (`sugar`) per cup of cereal (`cups`).  

The expected result would look something like this diagram. 

Remember that with any column operation we use only single square brackets on our columns.  

To get our desired output of sugar content per cup our code looks like this.

Each sugar row value is divided by its corresponding cups value.
:::

---

```{python}
cereal[['sugars']] / cereal[['cups']]
```


:::{.notes} 
Just to stress the point of why we use single square brackets for our operations, here is what happens when we use double square brackets.

This doesn't appear very useful.
:::

---

```{python}
cereal = pd.read_csv('data/cereal.csv', usecols=['name', 'mfr','type', 'fat', 'sugars', 'weight', 'cups','rating'])
cereal
```


:::{.notes} 
Up until now, all of these operations have been done without being added to our cereal dataframe. 

Let's explore how we can add new columns to a less detailed version of our cereal dataframe. 

We'll be working with a smaller dataframe containing only a few columns columns so that it's easier to follow the examples.
:::

---

## Column Creation

```{python}
oz_to_g = 28.3495
cereal['weight'] * oz_to_g
```

<br>

```{python}
cereal = cereal.assign(weight_g=cereal['weight'] * oz_to_g)
cereal.head()
```

:::{.notes} 
In the next scenario, we have decided that our `weight` column should show the weight of each cereal in grams instead of ounces.
   
We are going to save the conversion factor of grams to ounces in an object named `oz_to_g`.   
  
Let's start with just the operation for this.

Next, we combine our operation with the implementation of adding it as a new column to the dataframe. 
The verb `.assign()` allows us to specify a column name to our result using an equal sign `=`.    

We are going to name our new column `weight_g` (for grams). 

Just like we did earlier in the module, we need to save the dataframe to an object when making changes involving columns. This will permanently save the column `weight_g` to the dataframe `cereal`.
:::

---

```{python}
cereal['sugars'] / cereal['cups']
```

<br>

```{python}
cereal = cereal.assign(sugar_per_cup=cereal['sugars'] / cereal['cups'])
cereal.head()
```


:::{.notes} 
Let's try another example. 

This time we want to save our sugar content per cereal cup as a column in our existing dataframe.

At the top you can see the operation by itself, just for teaching purposes. Then, below, we combine our calculation with `assign()`, naming the column `sugar_per_cup`.
:::


# Let’s apply what we learned!