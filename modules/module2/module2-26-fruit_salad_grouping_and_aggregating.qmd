---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 8.1. Exercises

## Fruit Salad Grouping and Aggregating

Remember the fruit salad dataframe named `fruit_salad`?  Refer to it for the next two questions.

```out
           name    colour    location    seed   shape  sweetness   water-content  weight
0         apple       red     canada    True   round     True          84         100
1        banana    yellow     mexico   False    long     True          75         120
2    cantaloupe    orange      spain    True   round     True          90        1360
3  dragon-fruit   magenta      china    True   round    False          96         600
4    elderberry    purple    austria   False   round     True          80           5
5           fig    purple     turkey   False    oval    False          78          40
6         guava     green     mexico    True    oval     True          83         450
7   huckleberry      blue     canada    True   round     True          73           5
8          kiwi     brown      china    True   round     True          80          76
9    
```

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'Which code would create a grouby object for the column <code>shape</code>?',
        {
        '<code>fruit_salad.get_groups(by=\'shape\')</code>': 'Not quite but you are on the right track.',
        '<code>fruit_salad.groupby(by=\'shape\')</code>': 'Great work!',
        '<code>fruit_salad.group(by=\'shape\')</code>': 'Not quite but you are on the right track.',
        },
        '<code>fruit_salad.groupby(by=\'shape\')</code>',
    );
</script>


Consider this output made from the `fruit_salad` dataframe:

![](../../static/module2/Q26_2.png){fig-align="center" fig-alt="404 image"}

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'Which of the following code returns the dataframe above. ',
        {
        '<code>fruit_salad.groupby(by=\'shape\').get_group(\'oval\')</code>': 'Good job!',
        '<code>fruit_salad.groupby(by=\'shape\').get_group[\'oval\']</code>': 'Take care of which type of brackets are needed.',
        '<code>fruit_salad.get_group(by=\'shape\').group[\'oval\']</code>': 'Are you using the correct verbs?',
        },
        '<code>fruit_salad.groupby(by=\'shape\').get_group(\'oval\')</code>',
    );
</script>


## Coding questions

**Instructions:**    
Running a coding exercise for the first time, could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_ 

### Practice Grouping

Find the mean speed of each column for every Pokemon types using `.mean()` and `.groupby()`.

**Tasks:**

- Make a groupby object on the column `type`.
- Find the mean value of each column for each pokemon `type` using `.mean()` and save the resulting dataframe as `type_means`.
- Obtain the mean speed of each pokemon type from the dataframe `type_means` by using `.loc[]`.
- Save it in an object named mean_speed.
- Display it.

```{pyodide}
#| exercise: practice_grouping
import pandas as pd

pokemon = pd.read_csv('data/pokemon.csv')
pokemon = pokemon.loc[ : , 'attack': 'type']

# Make a groupby object on the column type 
# Find the mean value of each column for each pokemon type using .mean() 
# Save the resulting dataframe as type_means
____ = ____.____(____).____()
____

# Obtain the mean speed of each pokemon type from the dataframe 
# type_means by using .loc[]
# Save it in an object named mean_speed
# ____ = ____.____[____]

# Display it
# ____
```

```{pyodide}
#| exercise: practice_grouping
#| check: true
from src.utils import print_correct_msg

pokemon = pd.read_csv('data/pokemon.csv')
pokemon = pokemon.loc[ : , 'attack': 'type']
solution = pokemon.groupby(by='type').mean().loc[:, 'speed']

assert isinstance(result, type(solution)), "Are you displaying mean_speed?"
assert round(solution.values.mean()) == round(result.values.mean()), "The average speed values are incorrect. Are you taking the mean after grouping by type?"
assert round(max(solution.values)) == round(max(result.values)), "The maximum average speed is incorrect. Are you taking the mean after grouping by type?"
print_correct_msg()
```

:::: { .hint exercise="practice_grouping"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you grouping by the column named `type`? 
- Are you using `.mean()` on the `pokemon_type` dataframe?
- Are you naming the mean speed objects correctly?
- Are you obtaining the mean values using `.loc[]`?

:::
::::

:::: { .solution exercise="practice_grouping" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import pandas as pd

pokemon = pd.read_csv('data/pokemon.csv')
pokemon = pokemon.loc[ : , 'attack': 'type']

# Make a groupby object on the column type 
# Find the mean value of each column for each pokemon type using .mean() 
# Save the resulting dataframe as type_means
type_means = pokemon.groupby(by='type').mean() 
type_means

# Obtain the mean speed of each pokemon type from the dataframe 
# type_means by using .loc[]
# Save it in an object named mean_speed
mean_speed = type_means.loc[:, 'speed']

# Display it
mean_speed
```

:::
::::

<br>

### Practice Aggregating

Let's practice using `.agg()`  

**Tasks:**

- Make a groupby object on the column `legendary`.
- Find the maximum and minimum value of each column for each legendary groups using `.agg()` and save the resulting dataframe as `legendary_stats`.
- Display it.


```{pyodide}
#| exercise: practice_aggregating
import pandas as pd

pokemon = pd.read_csv('data/pokemon.csv')
pokemon = pokemon.loc[ : , ['attack',  'defense', 'capture_rt', 'total_bs', 'legendary']]

# Make a groupby object on the column legendary 
# Find the maximum and minimum value of each column for each legendary groups using 
# .agg() and save the resulting dataframe as legendary_stats
____ = ____.____[____].____(____) 

# Display it
____
```

```{pyodide}
#| exercise: practice_aggregating
#| check: true
from src.utils import print_correct_msg

pokemon = pd.read_csv('data/pokemon.csv')
pokemon = pokemon.loc[ : , ['attack',  'defense', 'capture_rt', 'total_bs', 'legendary']]
solution = pokemon.groupby(by='legendary').agg(['max', 'min']) 

assert isinstance(result, type(solution)), "Are you using groupby?"
assert sum(max(solution.values.tolist())) == sum(max(result.values.tolist())), "Your maximum values are incorrect. Are you aggregating by 'min' and 'max'?"
assert sum(min(solution.values.tolist())) == sum(min(result.values.tolist())), "Your minimum values are incorrect. Are you aggregating by 'min' and 'max'?"
print_correct_msg()
```

:::: { .hint exercise="practice_aggregating"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you grouping by the column named `legendary`? 
- Are you using `.agg()` on the `legendary_stats` dataframe?
- Are you naming the objects correctly?

:::
::::

:::: { .solution exercise="practice_aggregating" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import pandas as pd

pokemon = pd.read_csv('data/pokemon.csv')
pokemon = pokemon.loc[ : , ['attack',  'defense', 'capture_rt', 'total_bs', 'legendary']]

# Make a groupby object on the column legendary 
# Find the maximum and minimum value of each column for each legendary groups using 
# .agg() and save the resulting dataframe as legendary_stats
legendary_stats = pokemon.groupby(by='legendary').agg(['max', 'min']) 

# Display it
legendary_stats
```

:::
::::