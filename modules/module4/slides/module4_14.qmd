---
format: revealjs
title: Dataframes, Series and Column dtypes
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

## What is a Dataframe ... again

```{python}
# | include: false
cereal = pd.read_csv('data/cereal.csv')
cereal = cereal.loc[:,['name', 'mfr', 'type', 'calories', 'protein','fiber', 'fat',  'carbo',  'rating' ]].assign(hot=cereal['type'] == 'Hot').drop(columns='type')
```

```{python}
cereal
```

:::{.notes} 
Since the beginning of this module, we have explored basic Python Data types and structures. We've covered how they can be transformed into a dataframe, but that didn't answer the lingering question:

***"What is and makes up a Pandas dataframe?"***

Let's greet our cereal data back with a warm welcome.
:::

---

```{python}
type(cereal)
```


:::{.notes} 
Our first instinct is to see what `type()` returns. 

It appears that dataframes have their own data type called a `pandas.core.frame.DataFrame` or let's just call it a `pd.DataFrame` type for short. 

Looking into this further, the documentation states a dataframe as a:

*"Two-dimensional tabular data structure with columns and axis labels."*

More directly, we can describe a dataframe as a collection of columns, but that brings us to the new question:

**"What is a dataframe column?"**
:::

---

```{python}
cereal[['mfr']]
```

<br>

```{python}
type(cereal[['mfr']])
```


:::{.notes} 
Let's think back to Module 1 when we were selecting a single column from a dataframe.  

There are two ways of doing so; with single square brackets and with double square brackets.  

When indexing with double square brackets, we get back another object of type `pd.DataFrame`. 

What about single brackets?
:::

---

```{python}
cereal['mfr']
```

<br>

```{python}
type(cereal['mfr'])
```


:::{.notes} 
`pandas.core.series.Series` Well, that's something new.

What are panda series?
:::

---

## Pandas Series

```{python}
cereal['mfr']
```


:::{.notes} 
A pandas Series is a one-dimensional array of values with an axis label, sort of like a list with a name attached to it.

This is the base data type that makes up a pandas dataframe.

In fact, the <a href="https://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html#dataframe" target="_blank">Pandas documentation"</a> explains a dataframe as "a dict of Series objects". 
 
Let's look back at the series output again.

We can see additional information at the bottom. 

The series contains the name of the column series, which is  `mfr` , the length of the series, which is equal to 77, and a `dtype` equal to object. 

Ok, we know what `type` is, but what is a `dtype`?
:::

---

## What is a dtype? 

<br>

![](../../../static/module4/branch2.png){width="100%" fig-alt="404 image" fig-align="center"}


:::{.notes} 
So far, we know a dataframe is made up of a collection of series, and a series contains values, a label as well as some additional information regarding a **dtype**. 

Just like how objects have data types ( `str`, `int`, `float`, etc.), columns in a Pandas dataframe have types called **dtypes**. 

In this course we are going to concentrate on the following dtypes.
:::

---

![](../../../static/module4/branch3num.png){width="100%" fig-alt="404 image" fig-align="center"}


### Numeric dtypes

- `float64`: contains `float` type values
- `int64`: contains `int` type values. 


:::{.notes} 
Just like with Python data types, Pandas has numeric and non-numeric data types. 

Let's look at the numeric ones first. 

- `float64` dtype is a column that contains only `float` type values in the cells of the dataframe, whereas, 
- `int64` columns only contains integers.
:::

---

```{python}
cereal.head()
```

<br>

```{python}
cereal['calories'].dtypes
```

<br>

```{python}
all_bran_fiber =  cereal.loc[2, 'calories']
type(all_bran_fiber)
```


:::{.notes} 
We can use the noun `.dtypes` to find the dtype of a column.

Let's see what the dtype is of the `calories` column.

What is the data type of one of the values in this column? 

We are going to ignore the `numpy` portion for now (You'll see this in Module 8), but for now, we can clearly see it says `int`.
:::

---

```{python}
cereal.head()
```

<br>

```{python}
cereal['fiber'].dtypes
```

<br>

```{python}
all_bran_fiber =  cereal.loc[2, 'fiber']
type(all_bran_fiber)
```


:::{.notes} 
Let's check out the `fiber` column dtype now. 

Ah yes, `float64` as expected.

What about the data type of one of the values in the column now? 

It's of type `float`, just what we suspected! (Again, let's not worry about the `numpy` portion of this)
:::

---

## Non-Numeric dtypes 

<br>

![](../../../static/module4/full.png){width="100%" fig-alt="404 image" fig-align="center"}


:::{.notes} 
Non-numeric types can be a bit more complicated but let's concentrate on the dtypes `object` and `bool`. We will be exploring `datetime64` and `timedelta[ns]` in Module 8. 

- `object` is a dtype that contains `str` type values in the cells of the dataframe or that had a mixture of different types, to begin with. 
This is the "default" dtype when pandas is not quite sure what is the cell type values are or when there is a mixture of numeric and non-numeric value types. 

- `bool` dtypes, just like its dtype name, contains Boolean values.
:::

---

```{python}
cereal.head()
```

<br>

```{python}
cereal['name'].dtypes
```

<br>

```{python}
type(cereal.loc[2, 'name'])
```


:::{.notes} 
Let's take a look at the `name` column.

Here, "O" stands for object. 

What about a value within the column series?

The "All-Bran" is a  `str` value type that resides in a column of dtype `object`.
:::

---

```{python}
cereal.head()
```

<br>

```{python}
cereal['hot'].dtypes
```

<br>

```{python}
type(cereal.loc[2, 'hot'])
```


:::{.notes} 
Let's look at the `hot` column now.

This outputs a dtype of `bool`.

What are column value types within the series?

Also a `bool`. We can ignore the numpy part as we did before since we will discuss this later on.
:::

---

```{python}
cereal.dtypes
```
 


:::{.notes} 
An easy way to check all dtypes of the columns in our dataframe is to use `.dtypes` on the dataframe object. 

Knowing what dtype the values are, helps us understand how we can transform them and how they respond to different operations and operators.
:::



# Letâ€™s apply what we learned!