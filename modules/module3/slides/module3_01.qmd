---
format: revealjs
title: Tidy Data
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

```{python}
# | include: false
cereal = pd.read_csv('data/cereal.csv')
cereal = cereal[cereal['name'].isin(['Special K', 'Apple Jacks', 'Raisin Bran', 'Cheerios', 'Wheaties', 'Bran Flakes', 'Honey-comb'])]
```


## What is the concept of tidy data?

Tidy data satisfies the following three criteria:

- Each row is a single observation,
- Each variable is a single column, and
- Each value is a single cell (i.e., its row, column position in the dataframe is not shared with another value)

![](https://d33wubrfki0l68.cloudfront.net/6f1ddb544fc5c69a2478e444ab8112fb0eea23f8/91adc/images/tidy-1.png){width="70%" fig-alt="404 image" fig-align="center"}

*Image Source: [R for Data Science](https://r4ds.had.co.nz/) by Garrett Grolemund & Hadley Wickham*

<br>

What a variable and an observation is may depend on your immediate goal.


:::{.notes}
When we first hear "tidy data", you likely think of clean, organized, and orderly data.  The same applies here, however, the concept of ***tidy data*** stems from <a href="https://vita.had.co.nz/papers/tidy-data.pdf" target="_blank">a paper</a> written by renowned data scientist Hadley Wickham in 2014.

We tidy our data in such a way so that we can create a standard across multiple analysis tools. It changes the focus from figuring out the logistics of how the data is structured, to answering the actual analysis question being asked.  

This approach allows us to standardize input arguments of certain analysis verbs like `.describe()` and other predictive methods.
:::

---

***Are protein and calories content associated with different cereal manufacturers?***

![](../../../static/module3/tidy-table.png){width="80%" fig-alt="404 image" fig-align="center"}


:::{.notes}
Let's explore some different versions of our cereal dataset and determine if they fit the _tidy_ criteria given the statistical question below:

***Are protein and calories content associated with different cereal manufacturers?***

Here are a few rows from our unaltered cereal dataset. 

Does it fit all three criteria?
:::

---

## Criterion #1: Each row is a single observation

![](../../../static/module3/tidy-crit1.png){width="80%" fig-alt="404 image" fig-align="center"}

:::{.notes}
From the dataframe we can see that each cereal has its own row.  Criterion #1 is met!
:::

---

## Criterion #2: Each variable is a single column

![](../../../static/module3/tidy-crit2.png){width="80%" fig-alt="404 image" fig-align="center"}


:::{.notes}
From the dataframe we can see that each of the variables `name`, `mfr`, `calories` and `protein` have their own column.  We can validate that criterion #2 is also met. 
:::

---

## Criterion #3: Each value is a single cell

![](../../../static/module3/tidy-crit3.png){width="80%" fig-alt="404 image" fig-align="center"}


:::{.notes}
The variable value for each cereal has it's own cell, confirming that criterion #3 is met! 
:::

---

![](../../../static/module3/tidy2-table.png){width="70%" fig-alt="404 image" fig-align="center"}


:::{.notes}
As expected, the cereal data we have been working with is _tidy data_ for our statistical question.

Let's look at a longer dataframe with the same information where this is not the case.
:::

---

## Criterion #1 Each row is a single observation

![](../../../static/module3/tidy2-crit1.png){width="70%" fig-alt="404 image" fig-align="center"}


:::{.notes}
From the dataframe we can see that each observation has its own row.  There are 2 rows per cereal but each row is unique.

We can confirm that criterion 1 is met.
:::

---

## Criterion #2: Each variable is a single column

![](../../../static/module3/tidy2-crit2.png){width="70%" fig-alt="404 image" fig-align="center"}


:::{.notes}
It looks like we have a problem here.  In this dataframe, two of our variables we are measuring for our statistical question are contained in a single column.  This is making the data untidy and potentially a problem to work with.

For example, what if I wanted to know the average calorie content of the cereals?
:::

---

```{python}
# | include: false
cereal2 = (cereal.reset_index()
               .melt(id_vars=['name','mfr'], 
                     value_vars=['protein', 'calories'], 
                     var_name="nutrition", 
                     value_name="value")
               .sort_index()
                     )
```


```{python}
cereal2
```

<br>

```{python}
cereal2[cereal2['nutrition'] == 'calories']['value'].mean()
```

<br>

If we had tidy data we could have simply done: 

```{python}
cereal['calories'].mean()
```

:::{.notes}
The dataframe `cereal2` shows our untidy data from the previous slide. We could either groupby nutrition value or filter on `calories` first before getting our results to calculate the mean, but if we had tidy data, we could have calculated the mean directly from the `calories` column.
:::



# Letâ€™s practice what we know about tidy data first!