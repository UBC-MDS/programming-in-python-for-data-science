---
format: revealjs
title: Reshaping with Pivot Table
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

```{python}
# | include: false
cereal = pd.read_csv('data/cereal.csv', index_col=0).loc[['Special K', 'Apple Jacks', 'Raisin Bran', 'Cheerios', 'Wheaties' ]].reset_index()
sample = (cereal.melt(id_vars=['name','mfr'], 
                     value_vars=['protein', 'calories'], 
                     var_name="nutrition", 
                     value_name="value").sort_values('name')
                     )

cereal_long = sample.loc[[5, 0, 6, 1, 7, 2, 8, 3, 9, 4 ]].reset_index().drop(columns='index')
```

## Pivot Table

<br>

![](../../../static/module3/piv_cereal3.png){width="100%" fig-align="center" fig-alt="404 image"}


:::{.notes} 
We discussed that one of the effects of using `.pivot()` on our `cereal_long` dataframe was that the new dataframe was missing the column `mfr`. 

That's because `.pivot()` discards any columns that are not being directly affected by the pivot.  Only the column that is specified in the index argument and the columns that need to be transformed are present in the new dataframe. 

That's where `pivot_table` steps in!
:::

---

<br><br>

![](../../../static/module3/piv_table_cereal.png){width="100%" fig-align="center" fig-alt="404 image"}


:::{.notes} 
`.pivot_table()` has the same arguments as `.pivot()` but the biggest difference is that it allows us to include multiple columns under the `index` argument.  That just means we can keep any of the columns that are not directly affected by the pivot. 

Let's try to convert our dataframe again but this time keeping the `mfr` column with `.pivot_table()`.
:::

---

```{python}
cereal_long
```

<br>

```{python}
cereal_wider = cereal_long.pivot_table(index=['name', 'mfr'], columns='nutrition', values='value')
cereal_wider
```


:::{.notes} 
Here is our long dataframe. 

We include any columns that we wish to keep under the `index` argument contained in square brackets. 

We can see here, that our transformed dataframe now has the `mfr` column as well as the new `calories` and `protein` column.
 
We still don't have our index of containing integers though so we will have to do something about that.
:::

---

```{python}
cereal_wider = cereal_long.pivot_table(index=['name','mfr'], columns='nutrition', values='value')
cereal_wider
```

<br>

```{python}
cereal_wider.reset_index().rename_axis('', axis='columns')
```


:::{.notes} 
And just like before, if we want to return to our original dataframe with a column of numbers for our index, we use `.reset_index()` and `rename_axis()` to clean up the index label.
:::

---

<br><br>

![](../../../static/module3/piv_table_cereal.png){width="100%" fig-align="center" fig-alt="404 image"}


:::{.notes}
Here we can see the same thing happened as before with `.pivot()` but now we've kept the `mfr` column.
:::

---

## Why use pivot at all then? 

<br>

![](../../../static/module3/problem_table.png){width="80%" fig-align="center" fig-alt="404 image"}


:::{.notes} 
When we use `.pivot_table()`, we have to proceed with caution. 

We talked about how `.pivot()` and `.pivot_table()` take the arguments `index` and `columns`. 
What happens if we have multiple rows with the same `index` and `column` values? 

Take the following example where we see that Special K has 2 rows with differing values for `calories`. 

What happens when we try to pivot this?
:::

---

```{python}
# | include: false
df1 = cereal_long.loc[:3]
df1.loc[((df1['name'] == 'Special K') & (df1['nutrition'] == 'calories')), 'value' ] = 100
line = pd.DataFrame({'name': 'Special K', 'mfr':'K', 'nutrition':'calories', 'value':130}, index=[1])
cereal_problem = pd.concat([df1.iloc[:1], line, df1.iloc[1:]]).reset_index(drop=True)
```

```{python}
cereal_problem
```

```{python}
# | eval: false
cereal_problem.pivot(index='name', columns='nutrition', values='value')
```

```out
ValueError: Index contains duplicate entries, cannot reshape

Detailed traceback: 
  File "<string>", line 1, in <module>
  File "/usr/local/lib/python3.7/site-packages/pandas/core/frame.py", line 5923, in pivot
    return pivot(self, index=index, columns=columns, values=values)
  File "/usr/local/lib/python3.7/site-packages/pandas/core/reshape/pivot.py", line 450, in pivot
    return indexed.unstack(columns)
  File "/usr/local/lib/python3.7/site-packages/pandas/core/series.py", line 3550, in unstack
    return unstack(self, level, fill_value)
  File "/usr/local/lib/python3.7/site-packages/pandas/core/reshape/reshape.py", line 179, in _make_selectors
    raise ValueError("Index contains duplicate entries, cannot reshape")
```

:::{.notes} 
Here is our dataframe, and here is what happens when we use the same arguments as before. 

`.pivot()` throws an error message.
:::

---

<br><br>

![](../../../static/module3/problem_pivot.png){width="100%" fig-align="center" fig-alt="404 image"}

<br>

*Attribution: Nikolay Grozev, <a href=" https://nikgrozev.com/2015/07/01/reshaping-in-pandas-pivot-pivot-table-stack-and-unstack-explained-with-pictures/" target="_blank">Reshaping in Pandas - Pivot, Pivot-Table, Stack, and Unstack explained with Pictures</a>*

:::{.notes}
This is a useful error message, letting us know that there are "duplicate entries, cannot reshape" which means there are non-unique rows.  We will need to do something before going any further.
:::

---

```{python}
cereal_problem.pivot_table(index=['name', 'mfr'], columns='nutrition', values='value')
```

<br><br>

![](../../../static/module3/problem_pivot_table.png){width="100%" fig-align="center" fig-alt="404 image"}


:::{.notes}
Let's see what happens when we use `.pivot_table()`. 

Ok, that's odd.  We don't get an error this time but instead get a `calories` value of 115 which is neither of the original values of 130 or 100. 

`.pivot_table()` instead by default takes the average of the duplicated columns and continues to execute.
:::

---

```{python}
cereal_problem.duplicated(subset=['name', 'nutrition'], keep=False)
```

<br>

```{python}
cereal_problem.duplicated(subset=['name', 'nutrition'])
```


:::{.notes}
When we use `.pivot_table()`, we recommend checking if there are duplicate values in columns we use in the `index` and `columns` arguments before we proceed.  

We can do this with the `.duplicated()` verb. We put the columns we specified in the `index` and `columns` arguments in a `subset` argument, in this case, the columns `name` and `nutrition`.  We set the argument `keep` to `False` to make sure all the rows are identified and not just the repeated ones. 

Here we can see now that index 0 and 1 are both duplicates by the `True` values.

Without the `keep` argument, only the index labeled `1` will be identified as a duplicate.
:::

---

```{python }
cereal_problem.duplicated(subset=['name', 'nutrition'], keep=False)
```

<br>

```{python}
duplicate_info =cereal_problem.duplicated(subset=['name', 'nutrition'], keep=False)
cereal_problem[duplicate_info]
```


:::{.notes} 
We can obtain the duplicated rows by filtering them from the original dataframe `cereal_problem`.

How we see our 2 rows with calorie values of 100 and 130.
:::

---

```{python}
cereal_problem
```

<br>

```{python}
cereal_no_problem = cereal_problem.drop(axis=0, index=1)
cereal_no_problem
```


:::{.notes} 
Once we have decided which row we want to keep, we can use `.drop()` that we learned in the previous Module to remove it from our original dataframe. 

For this example, we are going to drop the row at index 1, which has a calorie value of 130.

We use the argument `axis=0,` which refers to the rows in the dataframe and `index,` which specifies the row index that we want to drop. 

This just means we are *"dropping a row with index 1"*. 
:::


# Letâ€™s apply what we learned!