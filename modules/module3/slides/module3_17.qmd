---
format: revealjs
title: Concatenation
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```


There are 2 different verbs we will use for joining dataframes together: 

- <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html" target="_blank">`pd.concat()`</a>

- <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html" target="_blank">`.merge()`</a> 


:::{.notes} 
Up until this moment, we have been working with a single dataframe.  

Many organizations split their data into multiple tables and join them together, depending on what columns they need for their analysis.  

There are 2 different verbs we will use for joining dataframes together: 

- <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html" target="_blank">`pd.concat()`</a>; A forceful way of joining dataframes across rows or columns.  A useful analogy is the gluing or taping of 2 pieces of paper together so the shapes match up. 

- <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.merge.html" target="_blank">`.merge()`</a> A more precision based approach for combining data on common columns or indices.  This can be compared to stitching fabric together so that the pattern/print lines up.
:::

---

## Concatenation 

![](../../../static/module3/concatx.gif){width="80%" fig-alt="404 image" fig-align="center"}


:::{.notes} 
Concatenation works extremely well when you have similar dataframes, which both share identical column or row index labels. 

`pd.concat()` can glue the 2 dataframes together either horizontally or vertically. 

In this animation, you can see that the pieces are joined in the order that was presented, and the pattern does not necessarily match up.
:::

---

```{python}
candy = pd.read_csv('data/candybars.csv').loc[:4, 'name': 'peanuts']
candy
```


:::{.notes} 
For the next couple of examples, we are going to look at concatenating a subset of our original candy bars dataframe.

This dataframe has 5 rows and 4 columns.
:::

---

## Horizontal Concatenation

```{python}
candy
```

<br>

```{python}
candy2 = pd.read_csv('data/candy_bars2.csv')
candy2
```


:::{.notes} 
`candy_bars2.csv` is a new dataframe that has additional nutritional information about each candy bar like the columns `calories` `fat` and `sugar`.  You'll notice that this dataframe has the same number and order of candy bars.

We want to combine `candy2` with `candy` horizontally.
:::

---

```{python}
candy_nutrition = pd.concat([candy, candy2], axis=1)
candy_nutrition
```

<br>

This results in the same 4 rows but now we have 8 columns. 


:::{.notes} 
We can combine these two dataframes using `pd.concat()`, but we need to clarify on which axis to combine. 
  
We use square brackets around the dataframes we wish to glue together.  In the context of dataframes, it's normal to refer to `axis=1` as the columns of the dataframe and `axis=0` as the rows.  

Since we are performing a horizontal concatenation, we need to use the argument `axis=1` to glue them along the column axis.
:::

---

```{python}
candy_nutrition
```

<br>

```{python}
candy_nutrition.loc[:,~candy_nutrition.columns.duplicated()]
```


:::{.notes} 
After inspection, we can see that there are 2 `name` columns, which isn't necessary. 

Is there a convenient way to remove duplicated columns? Fortunately there is!

We can remove any duplicate columns by using both `.duplicated()`, `.loc[]` and the _Tilde_ operator we discussed in Module 2.

This removed one of the `name` columns. But let's inspect this code a bit more carefully.
:::

---

```{python}
candy_nutrition.columns.duplicated()
```

<br>

```{python}
~candy_nutrition.columns.duplicated()
```


:::{.notes} 
`.columns.duplicated()` shows us whether a column is duplicated by assigning the column position with either a `True` or `False` value. 

Since we need to instead keep all `False` columns and not the `True` values, we can easily use the  _Tilde_ operator to convert all the `False` values to `True` and vice-versa.
:::

---

```{python}
candy_nutrition_cleaned = candy_nutrition.loc[:,~candy_nutrition.columns.duplicated()]
candy_nutrition_cleaned
```


:::{.notes}
When we combine this with `.loc[]` to select which columns to display, Python will only select columns that were not identified as duplicates.
:::

---

## Vertical Concatenation

```{python}
candy
```

<br>

```{python}
candy_more = pd.read_csv('data/candybars_more.csv', usecols=range(4))
candy_more
```


:::{.notes} 
The new dataset `candybars_more.csv` has 3 additional candy bars that we wish to add to the original `candy` dataframe.  The columns in this dataframe have the same order as in the `candy` dataframe.
:::

---

```{python}
large_candybars = pd.concat([candy, candy_more], axis=0)
large_candybars
```


:::{.notes}
When we want to vertically combine dataframes (add rows), we use the argument `axis=0` with `pd.concat()`. 

After combining them, there are now 8 rows and the same 4 columns.  But wait! 
The index column has non-unique values.
:::

---

```{python}
large_candybars
```

<br>

```{python}
large_candybars_cleaned = large_candybars.reset_index(drop=True)
large_candybars_cleaned
```


:::{.notes} 
We can reset the index with `reset_index()` and the argument `drop=True` to remove the original index:
:::

---

## Be careful of order!

```{python}
candy
```

<br>

```{python}
snacksize_candybars = pd.read_csv('data/snacksize_candybars.csv')
snacksize_candybars
```


:::{.notes} 
`pd.concat()` is great when our dataframes have the same order for each observation.  What happens if our dataframes have different orders for the candy bars? 
 
Let's use a horizontal concatenation example with the dataframe`snacksize_candybars.csv`.  This data contains the candy bars from `candy` in a shuffled order.
:::

---

```{python}
pd.concat([candy, snacksize_candybars], axis=1)
```


:::{.notes} 
What happens when we concatenate `candy` and `snacksize_candybars` now that it has shuffled mix-matched rows? 

Oh no.  This does not look good.  You can see that the 2 `name` columns have different values in each row, which means this concatenation would produce incorrect results!
:::

---

### Remember...

![](../../../static/module3/concatx.gif){width="80%" fig-alt="404 image" fig-align="center"}

:::{.notes}
The biggest takeaway remark with concatenation is that it works well when we are trying to glue two dataframes together horizontally or vertically where the rows and columns are in the same order.

If your dataframes don't have the same row values, your data will be displayed incorrectly, and therefore, your results will also have no meaning. 
:::



# Letâ€™s apply what we learned!