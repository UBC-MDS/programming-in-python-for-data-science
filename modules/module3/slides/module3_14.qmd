---
format: revealjs
title: Reshaping with Melt
title-slide-attributes:
  data-notes: |
---

```{python}
#  | echo: false
%run src/utils.py
```

```{python}
# | include: false
cereal = pd.read_csv('data/cereal.csv', index_col=0).loc[['Special K', 'Apple Jacks', 'Raisin Bran', 'Cheerios', 'Wheaties' ], [ 'mfr', 'calories', 'protein']].reset_index()
```


![](../../../static/module3/melt_piv.png){width="90%" fig-alt="404 image" fig-align="center"}


:::{.notes}
In the previous slide decks, we discussed how `pandas` provides 2 functions for reshaping data; <a href="https://pandas.pydata.org/docs/reference/api/pandas.melt.html" target="_blank">`.melt()`</a> and <a href="https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.pivot.html" target="_blank">`.pivot()`</a> . 

We are going to spend this next section discussing `.melt()`, which is simply the reverse transformation of `.pivot()`. 

Instead of converting a long dataframe to a wider one as we do in `.pivot()`, we do the opposite and convert a wide dataframe into a longer one.
:::

---

```{python}
cereal
```


:::{.notes} 
Let's take a look at a subset of our the cereal data we've been working with. 

We can see there are 5 rows and 2 numerical columns; `calories` and `protein`.  

Perhaps we would prefer if this was transformed into a long dataframe.

How would we do it?
:::

---

<br><br>

![](../../../static/module3/melt_right.png){width="90%" fig-alt="404 image" fig-align="center"}


:::{.notes}
We can use melt!
:::

---

## Melt

```{python }
melted_cereal  = (cereal.melt(id_vars=['name', 'mfr'] , 
                              value_vars=['calories', 'protein'], 
                              var_name='nutrition', 
                              value_name='value')
                  )
melted_cereal
```


:::{.notes} 
Let's attempt to melt the `calories` and `protein` columns into a single one named `nutrition` with the values expressed in a column named `value`.

This is the dataframe exactly like we started with when we used `.pivot()` in the last section.

After melting, we can see that the rows are not quite in the same order as before, but we can agree that its what we want.
:::

---

![](../../../static/module3/melt_right.png){width="75%" fig-alt="404 image" fig-align="center"}

<br>

```python
melted_cereal  = (cereal.melt(id_vars=['name', 'mfr'], 
                              value_vars=['calories', 'protein'], 
                              var_name='nutrition', 
                              value_name='value')
                  )
```

:::{.notes} 
Let's try to understand what happened. 

- The identifying column and the columns we wanted to keep are specified in the `id_vars` argument.

- the columns `calories` and `protein` are called in `value_vars` and melted down into a single column named `nutrition`. 

- We named the new column using the argument `var_name`.

- The calorie and protein measurements are housed in the new column named `value` that we name using the `value_name` argument. 
  
Although this verb takes 4 arguments and pivot only takes 3, we do not need to reset our index after melting. 
:::


# Letâ€™s apply what we learned!