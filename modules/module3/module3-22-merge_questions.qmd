---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 7.1. Exercises

## Merge Questions

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'Which of the following are <b>not</b> ways in which you can join dataframes using <code>.merge()</code>?',
        {
        'Vertically': 'Great work!  We cannot join dataframes vertically with <code>.merge()</code>.',
        'Outer': '"Outer" joins are possible with the <code>how</code> argument in <code>merge()</code>.',
        'Inner': '"Inner" joins are possible with the <code>how</code> argument in <code>merge()</code>.',
        'Left': '"Left" joins are possible with the <code>how</code> argument in <code>merge()</code>.',
        'Right': '"Right" joins are possible with the <code>how</code> argument in <code>merge()</code>.',
        },
        'Vertically',
    );
</script>

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'Which join is the default when using <code>.merge()</code>?',
        {
        'Outer': 'Are you confusing the default join for <code>.pd.concat()</code>?',
        'Inner': 'Good job!  Unlike <code>.pd.concat()</code>, "inner" is the default join for <code>.merge()</code>.',
        'Left': 'This is an option for the argument <code>how</code> but not the default.',
        'Vertical': 'Are you confusing <code>.merge()</code> with <code>.pd.concat()</code>?',
        },
        'Inner',
    );
</script>

<div id='mcq3'></div>
<script>
    generateQuiz(
        'mcq3',
        'Question 3',
        'What is the similarity between all 4 types of joins?',
        {
        'They all need at least 1 of the dataframe’s identifying key column to be an index': 'It may be a good idea to look over the last section again.',
        'They all will produce a dataframe with columns from both of the initial dataframes': '',
        'They all produce rows with <code>NaN</code> values': 'What about inner joins that only result in the rows present in both dataframes?',
        'They all must have the same dimensions': 'It’s still possible to have dataframes that have completely different dimensions joined together.',
        },
        'They all will produce a dataframe with columns from both of the initial dataframes',
    );
</script>


## Coding questions

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_


### Merging I

In this exercise, you are going to join two dataframes `lego_inventory_parts.csv` and `lego-colors.csv` and answer a few multiple-choice questions.  The multiple-choice questions are being asked with the intention of using the code cell to write your own code in any way that helps to answer the question. 

**Tasks:**

- Combine the two dataframes to make 1 large complete dataframe by using an outer join.
- Make sure to set the argument `indicator` to `True`. 
- Name the new dataframe `lego_tower`.

```{pyodide}
#| exercise: merging_I
import pandas as pd

# We are going to read in 2 new dataframes: lego_inventory_parts.csv and lego-colors.csv. 
lego_inventory = pd.read_csv('data/lego_inventory_parts.csv')
lego_colors = pd.read_csv('data/lego-colors.csv')

# Combine the two dataframes and name the new dataframe lego_tower
# ____ = ____.____(____)

# ____
```

```{pyodide}
#| exercise: merging_I
#| check: true
from src.utils import print_correct_msg

lego_inventory = pd.read_csv('data/lego_inventory_parts.csv')
lego_colors = pd.read_csv('data/lego-colors.csv')
solution = (lego_inventory.merge(lego_colors, 
                                  left_on='color_id', 
                                  right_on='id', 
                                  how='outer', 
                                  indicator=True)
             )

assert isinstance(result, pd.DataFrame), "You should display the DataFrame."
assert solution.shape == result.shape, "The dataframe dimensions are incorrect. Are you merging correctly?"
assert sorted(list(solution.columns)) == sorted(list(result.columns)), "The dataframe contains incorrect columns."
print_correct_msg()
```

:::: { .hint exercise="merging_I"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you naming your new dataframe `lego_tower`? 
- Are you using the arguments  `left_on='color_id'`, `right_on=id`,  `how='outer'` and `indicator=True`?

:::
::::

:::: { .solution exercise="merging_I" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import pandas as pd

# We are going to read in 2 new dataframes: lego_inventory_parts.csv and lego-colors.csv.
lego_inventory = pd.read_csv('data/lego_inventory_parts.csv')
lego_colors = pd.read_csv('data/lego-colors.csv')

# Combine the two dataframes and name the new dataframe lego_tower
lego_tower = (lego_inventory.merge(lego_colors, 
                                  left_on='color_id', 
                                  right_on='id', 
                                  how='outer', 
                                  indicator=True)
             )

lego_tower
```

:::
::::

<br>

<div id='mcq4'></div>
<script>
    generateQuiz(
        'mcq4',
        'Question 1',
        'Which of the following colours doesn’t have any pieces in inventory? <i>(Hint: You can filter using the <code>_merge</code> column.)</i>',
        {
        'Chrome Blue': 'You may want to try filtering using the <code>_merge</code> column',
        'Rust': 'You may want to try filtering using the <code>_merge</code> column',
        'Reddish Lilac': 'Good job!  You must have used <code>lego_tower[lego_tower[\'_merge\'] == "right_only"]</code>',
        'Metallic Silver': 'You may want to try filtering using the <code>_merge</code> column',
        },
        'Reddish Lilac',
    );
</script>

<div id='mcq5'></div>
<script>
    generateQuiz(
        'mcq5',
        'Question 2',
        'Which colour has the largest number of pieces in the inventory? <i>(Hint: You can use <code>.groupby()</code> and <code>.agg()</code> to find the total amount of pieces for each set. Also<code>.sort_values()</code> may come in handy.)</i>',
        {
        'White': 'You can use <code>lego_tower.groupby(\'name\').agg({\'quantity\':\'sum\'}).sort_values(\'quantity\', ascending=False)</code> to help answer this.',
        'Blue': 'You can use <code>lego_tower.groupby(\'name\').agg({\'quantity\':\'sum\'}).sort_values(\'quantity\', ascending=False)</code> to help answer this.',
        'Black': 'Wonderful!  Did you use <code>lego_tower.groupby(\'name\').agg({\'quantity\':\'sum\'}).sort_values(\'quantity\', ascending=False)</code>?',
        'Metallic Silver': 'You can use <code>lego_tower.groupby(\'name\').agg({\'quantity\':\'sum\'}).sort_values(\'quantity\', ascending=False)</code> to help answer this.',
        },
        'Black',
    );
</script>

<div id='mcq6'></div>
<script>
    generateQuiz(
        'mcq6',
        'Question 3',
        'How many Lego pieces from the <code>lego_inventory</code> dataframe do not have any matching rows in the <code>lego_colors</code> dataframe? <i>(Hint: Filtering on the <code>_merge</code> column and using <code>.shape</code> can be useful here.)</i>',
        {
        '0': 'You got it!  All the pieces have matching rows from the <code>lego_colors</code> dataframe.  This code <code>lego_tower[lego_tower[’_merge’] == "left_only"].shape</code> explains that there are 0 rows.',
        '1': 'Maybe explore the <code>_merge</code> column by filtering or grouping and see if there are any <code>left_only</code> values.',
        '2': 'Maybe explore the <code>_merge</code> column by filtering or grouping and see if there are any <code>left_only</code> values.',
        '3': 'Maybe explore the <code>_merge</code> column by filtering or grouping and see if there are any <code>left_only</code> values.',
        },
        '0',
    );
</script>

<br>

### Merging II

This question may be a bit more challenging.  We are wondering about the inventory of a store.  We want to see which Lego sets are in stock and if so how many?  After all, the store needs to make sure there are enough sets in stock to meet demand. 

**Tasks:**

- Combine the two dataframes to make one large complete dataframe by using an inner join.
- Name the new dataframe `lego_stock`.
- Group the new dataframe by `set_num` and find how many groups there are using `.ngroups`

This question is in two parts and we are going to walk you through how to tackle it.

```{pyodide}
#| exercise: merging_II_a
import pandas as pd

lego_sets = pd.read_csv('data/lego-sets.csv')
lego_inventory = pd.read_csv('data/inventory_sets.csv')

# Combine the two dataframes to make 1 large complete dataframe by using an inner join
# Name the new dataframe lego_stock
# ____ = ____.____(____)
# ____

# At first glance it appears that we have 2846 different sets but 
# let's check if thats right by grouping by set_num and seeing 
# how many groups are produced. 
# ____.____(____).____
```

```{pyodide}
#| exercise: merging_II_a
#| check: true
from src.utils import print_correct_msg

lego_sets = pd.read_csv('data/lego-sets.csv')
lego_inventory = pd.read_csv('data/inventory_sets.csv')
lego_stock = lego_inventory.merge(lego_sets,
                                  left_on='set_num', 
                                  right_on='set_num', 
                                  how='inner')
solution = lego_stock.groupby('set_num').ngroups

assert isinstance(result, int), "You should display ngroups."
assert solution == result, "Are you grouping by 'set_num' and counting the number of groups using the 'ngroups' functon?"
print_correct_msg()
```

:::: { .hint exercise="merging_II_a"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you naming your new dataframe `lego_stock`? 
- Are you using the arguments  `left_on='set_num'`, `right_on='set_num'` and `how='inner'`?
- Are you grouping my using `groupby('set_num')`? 

:::
::::

:::: { .solution exercise="merging_II_a" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import pandas as pd

lego_sets = pd.read_csv('data/lego-sets.csv')
lego_inventory = pd.read_csv('data/inventory_sets.csv')

# Combine the two dataframes to make 1 large complete dataframe by using an inner join
# Name the new dataframe lego_stock
lego_stock = lego_inventory.merge(lego_sets,
                                  left_on='set_num', 
                                  right_on='set_num', 
                                  how='inner')
lego_stock

# At first glance it appears that we have 2846 different sets but
# let's check if thats right by grouping by set_num and seeing 
# how many groups are produced.
lego_stock.groupby('set_num').ngroups
```

:::
::::

<br>

Ah, it appears we have multiple rows for some of the same sets.   
     
Although it shows initially the we have 2846 different sets due to the number of rows in `lego_stock`, when we group them by `set_num` we actually only get 2306 different sets. This means that we have some rows with the same `set_num` but with different inventory quantities.       
       
How are we going to get the stock quantity of each set now?

We are going to have to sum up the quantity of each set using `.groupby()` and`.agg()`. 

**Tasks:**

- Use `.groupby()` and `.agg()` to sum up the quantity of each set and save this as `store_inventory`. 
- Inner join `store_inventory` with `lego_sets` and use chaining to sort the dataframe in descending order based on in-stock quantity
- Save this new dataframe as  `store_inventory_details`.
- Display the new dataframe.

```{pyodide}
#| exercise: merging_II_b
import pandas as pd

# We are loading in  lego_stock from the last cell and the
# lego_sets dataframe
lego_stock = pd.read_csv('data/lego_stock.csv')
lego_sets = pd.read_csv('data/lego-sets.csv')

# Use groupby and agg to sum up the quantity of each set
# Save this as store_inventory 
# ____ = (____.____(____)
#            .____({____})
#        )

# We still want to know the set name, year, theme_id and number of parts that are
# accessible from the lego_sets dataframe.
# We can get this back by inner joining store_inventory with lego_sets. 

# Use chaining to sort the dataframe in descending order based on in stock quantity
# Save this new dataframe as store_inventory_details 
# ____ = (____.____(____)
#             .____(____)
#        )

# ____
```

```{pyodide}
#| exercise: merging_II_b
#| check: true
from src.utils import print_correct_msg

lego_stock = pd.read_csv('data/lego_stock.csv')
lego_sets = pd.read_csv('data/lego-sets.csv')
store_inventory = (lego_stock.groupby('set_num')
                             .agg({'quantity':'sum'})
                  )
solution = (store_inventory.merge(lego_sets,
                                                 left_on ='set_num',
                                                 right_on='set_num', 
                                                 how='inner')
                                          .sort_values('quantity', ascending=False)
                          )


assert isinstance(result, pd.DataFrame), "You should display a dataframe."
assert solution.shape == result.shape, "The dataframe dimensions are incorrect."
assert round(solution.num_parts.mean()) == round(result.num_parts.mean()), "The average of the num_parts column for the store_inventory_details dataframe is incorrect. Are you doing an inner merge on set_num?"
assert list(solution.quantity)[1:5] == list(result.quantity)[1:5], "Are you sorting the quantity column in descending order?"
print_correct_msg()
```

:::: { .hint exercise="merging_II_b"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you naming your new dataframe `store_inventory`? 
- Are you aggregating using `.agg({\'quantity\':\'sum\'})`?
- Are you using the arguments `left_index=True, right_index=True, how='inner'`?
- Are you sorting in descending order of `quantity`?

:::
::::

:::: { .solution exercise="merging_II_b" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
import pandas as pd

# We are loading in  lego_stock from the last cell and the
# lego_sets dataframe
lego_stock = pd.read_csv('data/lego_stock.csv')
lego_sets = pd.read_csv('data/lego-sets.csv')

# Use groupby and agg to sum up the quantity of each set
# Save this as store_inventory 
store_inventory = (lego_stock.groupby('set_num')
                             .agg({'quantity':'sum'})
                  )

# We still want to know the set name, year, theme_id and number of parts that are 
# accessible from the lego_sets dataframe.
# We can get this back by inner joining store_inventory with lego_sets. 

# Use chaining to sort the dataframe in descending order based on in stock quantity
# Save this new dataframe as store_inventory_details 
store_inventory_details = (store_inventory.merge(lego_sets,
                                                 left_on ='set_num',
                                                 right_on='set_num', 
                                                 how='inner')
                                          .sort_values('quantity', ascending=False)
                          )

store_inventory_details
```

:::
::::

<br>

Now we can return to our initial problem of identifying how many Lego sets are in stock.

<div id='mcq7'></div>
<script>
    generateQuiz(
        'mcq7',
        'Question 1',
        'How many different Lego sets are in stock?',
        {
        '11673': 'Did you look at the wrong dataframe?',
        '2846': 'Did you look at the wrong dataframe?',
        '3654': 'Did you look at the wrong dataframe?',
        '2306': 'You got it!',
        },
        '2306',
    );
</script>

<div id='mcq8'></div>
<script>
    generateQuiz(
        'mcq8',
        'Question 2',
        'What’s the largest quantity of stock available by any particular Lego set?',
        {
        '12': 'Did you look at the wrong dataframe?',
        '1': 'Did you look at the wrong dataframe?',
        '60': 'Great!  You saw the top quantity of <code>lego_stock</code>.',
        '65': 'Did you look at the wrong dataframe?',
        },
        '60',
    );
</script>
