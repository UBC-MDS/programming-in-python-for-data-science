---
format: live-html
---

<script src='../../src/quiz.js'></script>

# 2.1. Exercises

## Repeated Iterations Questions

<div id='mcq1'></div>
<script>
    generateQuiz(
        'mcq1',
        'Question 1',
        'The <b>DRY</b> principle aims to avoid what?',
        {
        'Multiple elements that are the same value': 'Sometimes we may need to have objects that contain the same values.',
        'Repeated code': '',
        'Object of type <code>None</code>': '<code>NoneType</code> can be very useful.  Why would we want to avoid them?',
        },
        'Repeated code',
    );
</script>


A.

```python
sentence = ['Once', 'upon', 'a', 'time']
word_length = list()
for name in sentence: 
word_length.append(len(name))
```


B.

```python
sentence = ['Once', 'upon', 'a', 'time']
word_length = list()
name in sentence: 
  word_length.append(len(name))
```


C.

```python
sentence = ['Once', 'upon', 'a', 'time']
word_length = list()
for name in sentence: 
    word_length.append(len(name))
```

D.

```python
sentence = ['Once', 'upon', 'a', 'time']
word_length = list()
for name in sentence
    word_length.append(len(name))
```

<div id='mcq2'></div>
<script>
    generateQuiz(
        'mcq2',
        'Question 2',
        'Which of the above code result in an output?',
        {
        'A': 'This code seems to be missing the loop body indentation',
        'B': 'This is missing the important keywork <code>for</code>!',
        'C': 'Great work.',
        'D': 'This is missing the colon in the first line of the loop.',
        },
        'C',
    );
</script>


## Practice Iterating Over a Collection

**Instructions:**    
Running a coding exercise for the first time could take a bit of time for everything to load.  Be patient, it could take a few minutes. 

**When you see `____` in a coding exercise, replace it with what you assume to be the correct code.  Run it and see if you obtain the desired output.  Submit your code to validate if you were correct.**

_**Make sure you remove the hash (`#`) symbol in the coding portions of this question.  We have commented them so that the line won't execute and you can test your code after each step.**_

We've learned about iterating , now it's time to apply this! 
We have a list that contains all elements of type `float`.  We want to create a new list that casts each element to type `int`. 

**Tasks:**

- Create a new empty list named `integer_list`.
- Iterate over all the items in `float_list`. Cast the element to data type `int` and append it to `integer_list`. 
- Display the value of `integer_list`.

```{pyodide}
#| setup: true
#| exercise: practice_iterating_over_a_collection
import pandas as pd
```

```{pyodide}
#| exercise: practice_iterating_over_a_collection
# Given list
float_list = [7.4, 13.0, 5.7, 55.9, 32.3, 48.0]

# Create a new empty list named integer_list
____ = ____

# Iterate over all the items in float_list
# Cast the element to data type int and append it to integer_list
____:
    ____

# Display integer_list
____
```

```{pyodide}
#| exercise: practice_iterating_over_a_collection
#| check: true
from src.utils import print_correct_msg

float_list = [7.4, 13.0, 5.7, 55.9, 32.3, 48.0]
solution = [int(x) for x in float_list]
assert solution == result, "The values in 'integer_list' are incorrect. Are you converting to 'int' and appending after?"
print_correct_msg()
```

:::: { .hint exercise="practice_iterating_over_a_collection"}
::: { .callout-note collapse="false"}

## Hint 1

- Are you starting your loop with `for` and using a `colon` for the first line?
- Are you indenting each line of code in the loop?
- Are you appending the int value to the new list with `integer_list.append(int('variable-name-chose'))`

:::
::::

:::: { .solution exercise="practice_iterating_over_a_collection" }
::: { .callout-tip collapse="false"}

## Fully worked solution:

```{pyodide}
# Given list
float_list = [7.4, 13.0, 5.7, 55.9, 32.3, 48.0]

# Create a new empty list named integer_list
integer_list = list()

# Iterate over all the items in float_list
# Cast the element to data type int and append it to integer_list
for i in float_list:
    integer_list.append(int(i))

# Display integer_list
integer_list
```

:::
::::