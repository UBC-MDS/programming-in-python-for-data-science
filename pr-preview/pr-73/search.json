[
  {
    "objectID": "modules/module2/slides/module2_31.html#summary",
    "href": "modules/module2/slides/module2_31.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 2",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDemonstrate how to rename columns of a dataframe using .rename().\nCreate new or columns in a dataframe using .assign() notation.\nDrop columns in a dataframe using .drop()\nUse df[] notation to filter rows of a dataframe.\nCalculate summary statistics on grouped objects using .groupby() and .agg().\nExplain when chaining is appropriate.\nDemonstrate chaining over multiple lines and verbs.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module2/slides/module2_31.html#attribution",
    "href": "modules/module2/slides/module2_31.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 2",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#using-groupby",
    "href": "modules/module2/slides/module2_25.html#using-groupby",
    "title": "Grouping and Aggregating",
    "section": "Using groupby",
    "text": "Using groupby\n\nmfr_group = cereal.groupby(by='mfr')\nmfr_group\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f66a4a6e910&gt;\n\n\n\nPandas has a solution for this.\nIt’s not uncommon to be interested in examining specific groups in our data. Hence there is a verb that is helpful in grouping like-rows together.\n.groupby() allows us to group our data based on a specified column.\nLet’s group our cereal dataframe on the mfr column and save it as object mfr_group.\nThis returns a DataFrame GroupBy object."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#summary-statistics-with-groups",
    "href": "modules/module2/slides/module2_25.html#summary-statistics-with-groups",
    "title": "Grouping and Aggregating",
    "section": "Summary Statistics with Groups",
    "text": "Summary Statistics with Groups\n\npd.set_option('display.max_rows', 4)\n\n\nmfr_group.mean()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\nmfr\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n100.000000\n4.000000\n1.000000\n0.000000\n...\n2.000000\n1.000000\n1.00000\n54.850917\n\n\nG\n111.363636\n2.318182\n1.363636\n200.454545\n...\n2.136364\n1.049091\n0.87500\n34.485852\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ\n95.000000\n2.625000\n1.750000\n92.500000\n...\n2.375000\n0.875000\n0.82375\n42.915990\n\n\nR\n115.000000\n2.500000\n1.250000\n198.125000\n...\n2.000000\n1.000000\n0.87125\n41.542997\n\n\n\n\n7 rows × 13 columns\n\n\n\n\nmfr_group.max()\n\n\n\n\n\n\n\n\nname\ntype\ncalories\nprotein\n...\nshelf\nweight\ncups\nrating\n\n\nmfr\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\nMaypo\nHot\n100\n4\n...\n2\n1.0\n1.00\n54.850917\n\n\nG\nWheaties Honey Gold\nCold\n140\n6\n...\n3\n1.5\n1.50\n51.592193\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ\nQuaker Oatmeal\nHot\n120\n5\n...\n3\n1.0\n1.00\n63.005645\n\n\nR\nWheat Chex\nCold\n150\n4\n...\n3\n1.0\n1.13\n49.787445\n\n\n\n\n7 rows × 15 columns\n\n\n\n\nWhat now?\nGrouping doesn’t answer our initial question of Which manufacturer has the highest mean sugar content?\nWhere do we go from here?\nWe need to calculate the mean sugar content in each manufacturing group! With a groupby object, this is super simple, as shown here.\nUsing .mean() on our groupby object answers the initial question and confirms that manufacturer “P” has the highest mean sugar content across cereals.\nSee how convenient this was to do in comparison to our initial method? Not only does this give us the result quicker, but it also gives us the mean of each column of the dataframe.\nThink of how many filtering and mean calculations would have to be done if we were to do this using our initial approach.\nOf course, using groups is not limited to finding only the mean. We can do the same thing for other statistics too like .min() and .max(), or many other operations."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#aggregating-dataframes",
    "href": "modules/module2/slides/module2_25.html#aggregating-dataframes",
    "title": "Grouping and Aggregating",
    "section": "Aggregating dataframes",
    "text": "Aggregating dataframes\n\npd.set_option('display.max_rows', 6)\n\n\ncereal.agg('mean')\n\ncalories    106.883117\nprotein       2.545455\nfat           1.012987\n               ...    \nweight        1.029610\ncups          0.821039\nrating       42.665705\nLength: 13, dtype: float64\n\n\n\n\ncereal.mean()\n\ncalories    106.883117\nprotein       2.545455\nfat           1.012987\n               ...    \nweight        1.029610\ncups          0.821039\nrating       42.665705\nLength: 13, dtype: float64\n\n\n\nIn situations where we want to collect multiple statistics together, we can aggregate them in one step using a verb called .agg().\n.agg() can be used on its own using a single measurement, without .groupby().\nUsing .agg() with only a mean input is essentially the same thing as calling the statistic mean() on the dataframe."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#aggregating-groupby-objects",
    "href": "modules/module2/slides/module2_25.html#aggregating-groupby-objects",
    "title": "Grouping and Aggregating",
    "section": "Aggregating groupby objects",
    "text": "Aggregating groupby objects\n\nmfr_group.agg(['max', 'min', 'median'])\n\n\n\n\n\n\n\n\ncalories\nprotein\n...\ncups\nrating\n\n\n\nmax\nmin\nmedian\nmax\n...\nmedian\nmax\nmin\nmedian\n\n\nmfr\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n100\n100\n100.0\n4\n...\n1.000\n54.850917\n54.850917\n54.850917\n\n\nG\n140\n100\n110.0\n6\n...\n0.875\n51.592193\n19.823573\n36.181877\n\n\nK\n160\n50\n110.0\n6\n...\n0.750\n93.704912\n29.924285\n40.560159\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nP\n120\n90\n110.0\n3\n...\n0.670\n53.371007\n28.025765\n40.917047\n\n\nQ\n120\n50\n100.0\n5\n...\n0.875\n63.005645\n18.042851\n47.419974\n\n\nR\n150\n90\n110.0\n4\n...\n0.875\n49.787445\n34.139765\n41.721976\n\n\n\n\n7 rows × 39 columns\n\n\n\n\n.agg() is particularly useful with groupby objects.\nLet’s try it on our manufacturer groupby object named mfr_group.\nThis gives us a value for each group and for each statistic we specified.\nFor example:\nLook at the ‘150’ in the bottom row on the far left under calories. The interpretation is that, for cases where the manufacturer is ‘R’, the max number of calories is 150.\nIn a similar manner if the manufacturer is ‘P’ the minumum amount of sodium is 45."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#extra-fancy-aggregation",
    "href": "modules/module2/slides/module2_25.html#extra-fancy-aggregation",
    "title": "Grouping and Aggregating",
    "section": "Extra Fancy Aggregation",
    "text": "Extra Fancy Aggregation\n\nmfr_group.agg({\"calories\":['max', 'min'],\n               \"rating\":['sum'],  \n               \"sugars\":['mean', 'median']})\n\n\n\n\n\n\n\n\ncalories\nrating\nsugars\n\n\n\nmax\nmin\nsum\nmean\nmedian\n\n\nmfr\n\n\n\n\n\n\n\n\n\nA\n100\n100\n54.850917\n3.000000\n3.0\n\n\nG\n140\n100\n758.688737\n7.954545\n8.5\n\n\nK\n160\n50\n1012.884634\n7.565217\n7.0\n\n\n...\n...\n...\n...\n...\n...\n\n\nP\n120\n90\n375.351697\n8.777778\n10.0\n\n\nQ\n120\n50\n343.327919\n5.500000\n6.0\n\n\nR\n150\n90\n332.343977\n6.125000\n5.5\n\n\n\n\n7 rows × 5 columns\n\n\n\n\nYou might have noticed that when we used .agg(), we calculated the same 3 statistics for every column in the dataframe. But we can also calculate different statistics for different columns.\nLet’s say we are concerned about the max and min calorie values, the total sum of the ratings and the mean and median sugar content for each manufacturing group.\nWe can achieve this by wrapping everything in curly brackets and using a colon to separate the column name from the statistics values. We need to put the statistics within square brackets.\nThe code is a bit more complicated, but the result is a bit easier to read."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#building-on-things-we-know",
    "href": "modules/module2/slides/module2_20.html#building-on-things-we-know",
    "title": "Conditional value replacement and assignment",
    "section": "Building on things we know",
    "text": "Building on things we know\n\ncereal = pd.read_csv('data/cereal.csv',\n                  usecols=['name', 'mfr', 'type', 'calories', 'protein', 'weight', 'rating'])\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nweight\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n4\n1.0\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n3\n1.0\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n4\n1.0\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n4\n1.0\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n2\n1.0\n34.384843\n\n\n\n\n\n\n\n\nSo far, we have accumulated many different skills to wrangle our data.\nOne type of transformation that you may use often is replacing values within a column depending on a certain condition.\nLet’s bring in a smaller version of our cereal dataset.\nIn the dataframe, the manufacturer value “Q” isn’t that informative and it might be easier to understand our data if we change all these values to something more clear like “Quaker”.\nThis leads us to our task:\nReplace the Q manufacturer values with a new value of Quaker."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#building-on-more-things-we-know",
    "href": "modules/module2/slides/module2_20.html#building-on-more-things-we-know",
    "title": "Conditional value replacement and assignment",
    "section": "Building on more things we know",
    "text": "Building on more things we know\n\ncereal.loc[73] \n\nname            Trix\nmfr                G\ntype            Cold\n             ...    \nprotein            1\nweight           1.0\nrating     27.753301\nName: 73, Length: 7, dtype: object\n\n\n\n\ncereal.loc[cereal['mfr'] == 'Q']\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nweight\nrating\n\n\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n3\n1.0\n33.983679\n\n\n10\nCap'n'Crunch\nQ\nCold\n120\n1\n1.0\n18.042851\n\n\n35\nHoney Graham Ohs\nQ\nCold\n120\n1\n1.0\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n55\nPuffed Wheat\nQ\nCold\n50\n2\n0.5\n63.005645\n\n\n56\nQuaker Oat Squares\nQ\nCold\n100\n4\n1.0\n49.511874\n\n\n57\nQuaker Oatmeal\nQ\nHot\n100\n5\n1.0\n50.828392\n\n\n\n\n8 rows × 7 columns\n\n\n\n\nRemember our friend .loc[]? We are going to get reacquainted with it.\nSimilarly, to how .loc[] can select and return specified columns and rows of the dataframe, it can filter on conditions too.\nWe are used to seeing code involving .loc[] like this.\nBut now we’ll get introduced to a new side of it when we use it to filter as well.\nWe can use the same syntax, cereal['mfr'] == 'Q', we normally would when filtering. However, this time we wrap the whole thing within .loc[]."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#replacing-with-inequalities",
    "href": "modules/module2/slides/module2_20.html#replacing-with-inequalities",
    "title": "Conditional value replacement and assignment",
    "section": "Replacing with inequalities",
    "text": "Replacing with inequalities\n\ncereal.loc[cereal['protein'] &gt;= 3, 'protein_level']  = 'high' \n\n\n\ncereal.loc[cereal['protein'] &lt; 3, 'protein_level']  = 'low' \n\n\nThis syntax using .loc[] also works for inequality conditions.\nIf we are replacing numerical values with characters or words (or vice versa) we need to assign our desired values to a new column and not the existing one, because the column type will be different.\nPerhaps we want just two categories for protein levels - “high” and “low”.\nAny cereal above 3 grams of protein will be considered a “high” protein level and anything less, as a “low” protein level.\nLet’s assign the “high” protein values first.\nThe only difference here from earlier is we now use an inequality for our condition and we designate a new column name instead of an existing one.\nLet’s save the values in a column named protein_level.\nNext by the “low” values."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#creating-new-columns",
    "href": "modules/module2/slides/module2_20.html#creating-new-columns",
    "title": "Conditional value replacement and assignment",
    "section": "Creating new columns",
    "text": "Creating new columns\n\noz_to_g = 28.3495\ncereal['weight_g'] = cereal['weight'] * oz_to_g\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nweight\nrating\nprotein_level\nweight_g\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n1.0\n68.402973\nhigh\n28.3495\n\n\n1\n100% Natural Bran\nQuaker\nCold\n120\n...\n1.0\n33.983679\nhigh\n28.3495\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n1.0\n59.425505\nhigh\n28.3495\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1.0\n49.787445\nhigh\n28.3495\n\n\n75\nWheaties\nG\nCold\n100\n...\n1.0\n51.592193\nhigh\n28.3495\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1.0\n36.187559\nlow\n28.3495\n\n\n\n\n77 rows × 9 columns\n\n\n\n\nYou may have noticed we did not use .assign() to create our new column.\nThat’s because as we mentioned earlier, when we use .assign() it creates a brand new dataframe.\nWhen we are replacing values, we don’t want a new dataframe and instead, we just want to alter the current values in the existing dataframe.\nWhen we are not doing conditional value replacement, we could create new columns with a similar syntax. Take the example of converting the weight from ounces into grams and making a new column named weight_g.\nThis code edits the existing dataframe cereal instead of creating a new one.\nWe prefer to use .assign() where possible as it can help avoid unexpected errors and performance issues."
  },
  {
    "objectID": "modules/module2/slides/module2_13.html#column-creation",
    "href": "modules/module2/slides/module2_13.html#column-creation",
    "title": "Column Arithmetic and Creation",
    "section": "Column Creation",
    "text": "Column Creation\n\noz_to_g = 28.3495\ncereal['weight'] * oz_to_g\n\n0     28.3495\n1     28.3495\n2     28.3495\n       ...   \n74    28.3495\n75    28.3495\n76    28.3495\nName: weight, Length: 77, dtype: float64\n\n\n\n\ncereal = cereal.assign(weight_g=cereal['weight'] * oz_to_g)\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\nfat\n...\nweight\ncups\nrating\nweight_g\n\n\n\n\n0\n100% Bran\nN\nCold\n1\n...\n1.0\n0.33\n68.402973\n28.3495\n\n\n1\n100% Natural Bran\nQ\nCold\n5\n...\n1.0\n1.00\n33.983679\n28.3495\n\n\n2\nAll-Bran\nK\nCold\n1\n...\n1.0\n0.33\n59.425505\n28.3495\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n0\n...\n1.0\n0.50\n93.704912\n28.3495\n\n\n4\nAlmond Delight\nR\nCold\n2\n...\n1.0\n0.75\n34.384843\n28.3495\n\n\n\n\n5 rows × 9 columns\n\n\n\n\nIn the next scenario, we have decided that our weight column should show the weight of each cereal in grams instead of ounces.\nWe are going to save the conversion factor of grams to ounces in an object named oz_to_g.\nLet’s start with just the operation for this.\nNext, we combine our operation with the implementation of adding it as a new column to the dataframe. The verb .assign() allows us to specify a column name to our result using an equal sign =.\nWe are going to name our new column weight_g (for grams).\nJust like we did earlier in the module, we need to save the dataframe to an object when making changes involving columns. This will permanently save the column weight_g to the dataframe cereal."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#arguments",
    "href": "modules/module2/slides/module2_06.html#arguments",
    "title": "Reading arguments",
    "section": "Arguments",
    "text": "Arguments\nHere, we are going to introduce different arguments for pd.read_csv() and pd.read_excel():\n\nindex_col\nheader\nnrows\nusecols\n\nIf you wish to know more, you can find the documentation at the following links:\n\npd.read_csv()\npd.read_excel()\n\n\nWhen we load in our data we use different arguments to make sure it’s organized how we want it.\ndelimiter is an argument we have already discussed that instructs on how to separate each value in the data.\nThis is only the tip of the iceberg.\nThere are many others that are helpful when reading in our data, such as index_col, header, nrows, and usecols."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#index_col",
    "href": "modules/module2/slides/module2_06.html#index_col",
    "title": "Reading arguments",
    "section": "index_col",
    "text": "index_col\n\ndf = pd.read_csv('data/cereal.csv', index_col=\"name\")\ndf.head(3)\n\n\n\n\n\n\n\n\nmfr\ntype\ncalories\nprotein\n...\nshelf\nweight\ncups\nrating\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n100% Bran\nN\nCold\n70\n4\n...\n3\n1.0\n0.33\n68.402973\n\n\n100% Natural Bran\nQ\nCold\n120\n3\n...\n3\n1.0\n1.00\n33.983679\n\n\nAll-Bran\nK\nCold\n70\n4\n...\n3\n1.0\n0.33\n59.425505\n\n\n\n\n3 rows × 15 columns\n\n\n\n\n\ndf = pd.read_csv('data/cereal.csv', index_col=0)\ndf.head(3)\n\n\n\n\n\n\n\n\nmfr\ntype\ncalories\nprotein\n...\nshelf\nweight\ncups\nrating\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n100% Bran\nN\nCold\n70\n4\n...\n3\n1.0\n0.33\n68.402973\n\n\n100% Natural Bran\nQ\nCold\n120\n3\n...\n3\n1.0\n1.00\n33.983679\n\n\nAll-Bran\nK\nCold\n70\n4\n...\n3\n1.0\n0.33\n59.425505\n\n\n\n\n3 rows × 15 columns\n\n\n\n\nindex_col is an argument that indicates which column will be acting as the index label.\nIn most of the cases we have encountered, we did not use this argument and instead relied on the pandas default, which is to use ascending integers for the index.\nWe can, however, specify a column in the data to become the index.\nIt’s in our best interest that the column we choose have unique values.\nFor our cereal.csv let’s specify the name column as our index.\nThe index_col argument also take in positions.\nThe name column in our data is in the 0th position so we can also specify the index like we show here with index_col=0."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#header",
    "href": "modules/module2/slides/module2_06.html#header",
    "title": "Reading arguments",
    "section": "header",
    "text": "header\n\n\nWe have been lucky up until now that all the data we have loaded in has been particularly straightforward.\nSometimes with data, there are a few lines of text explaining important points about the file.\nWe do not want to include this in our dataframe and therefore we need to specify exactly when our dataframe begins.\nThis is where header comes in.\nTake a look at candybars-h.csv as an example.\nIf we look at the data with a regular text editor, the data doesn’t start until the 3rd line which would be the equivalent of position 2 (since we begin counting from 0)."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#nrows",
    "href": "modules/module2/slides/module2_06.html#nrows",
    "title": "Reading arguments",
    "section": "nrows",
    "text": "nrows\n\ncandybars = pd.read_csv('data/candybars.csv', nrows=7)\ncandybars\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4\nTwix\n58\n1\n0\n...\n0\n0\n1\nBoth\n\n\n5\nReeses Peanutbutter Cups\n43\n1\n1\n...\n0\n0\n1\nBoth\n\n\n6\n3 Musketeers\n54\n1\n0\n...\n0\n0\n0\nAmerica\n\n\n\n\n7 rows × 11 columns\n\n\n\n\nnrows is an argument in pd.read_csv() that is useful when you only want to load in part of the dataframe.\nPerhaps the file you have is large and you only want a sample of it.\nnrows will limit the number of rows that you read in.\nThis code loads in only the first 7 rows of our candybar dataset."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#usecols",
    "href": "modules/module2/slides/module2_06.html#usecols",
    "title": "Reading arguments",
    "section": "usecols",
    "text": "usecols\n\ncandybars = pd.read_csv('data/candybars.csv', usecols=[0, 1, 10])\ncandybars\n\n\n\n\n\n\n\n\nname\nweight\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\nCanada\n\n\n1\nButterfinger\n184\nAmerica\n\n\n2\nSkor\n39\nBoth\n\n\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\nAmerica\n\n\n23\nOh Henry\n51\nBoth\n\n\n24\nCookies and Cream\n43\nBoth\n\n\n\n\n25 rows × 3 columns\n\n\n\n\nSimilarly to how nrows specifies how many rows to read in, usecols selects which columns to load from the data.\nPerhaps the only columns relevant to our analysis are the columns name, weight and available_canada_america.\nWe can forgo the other columns when reading the data in.\nIn a similar way to selecting columns using .iloc[], we specify the desired column indices in square brackets."
  },
  {
    "objectID": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "href": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDemonstrate how to rename columns of a dataframe using .rename().\nCreate new or columns in a dataframe using .assign() notation.\nDrop columns in a dataframe using .drop()\nUse df[] notation to filter rows of a dataframe.\nCalculate summary statistics on grouped objects using .groupby() and .agg().\nExplain when chaining is appropriate.\nDemonstrate chaining over multiple lines and verbs."
  },
  {
    "objectID": "modules/module2/module2-30-plotting_a_groupby_object.html",
    "href": "modules/module2/module2-30-plotting_a_groupby_object.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s attempt to answer the question “Which pokemon type has the highest mean attack score?” by making a bar chart from a groupby object.\nTasks:\nCreate a plot by chaining the following actions.\n\nMake a groupby object on the column type and name it pokemon_type.\nUse .mean() on the new groupby object.\nreset the index so it no longer has type as index column.\nUse reset_index() to make type a column again.\nSort the pokemon mean attack values in descending order using sort argument.\nName the y-axis “Mean attack scores”.\nName the object attack_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .loc[:, 'attack']?\nWhile sorting, are you using the argument ascending=False?\nAre you resetting the index?\nAre you giving your plot a title??\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-30-plotting_a_groupby_object.html#plotting-a-groupby-object",
    "href": "modules/module2/module2-30-plotting_a_groupby_object.html#plotting-a-groupby-object",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s attempt to answer the question “Which pokemon type has the highest mean attack score?” by making a bar chart from a groupby object.\nTasks:\nCreate a plot by chaining the following actions.\n\nMake a groupby object on the column type and name it pokemon_type.\nUse .mean() on the new groupby object.\nreset the index so it no longer has type as index column.\nUse reset_index() to make type a column again.\nSort the pokemon mean attack values in descending order using sort argument.\nName the y-axis “Mean attack scores”.\nName the object attack_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .loc[:, 'attack']?\nWhile sorting, are you using the argument ascending=False?\nAre you resetting the index?\nAre you giving your plot a title??\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html",
    "href": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Remember the fruit salad dataframe named fruit_salad? Refer to it for the next two questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9    \n\n\n\n\nConsider this output made from the fruit_salad dataframe:\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nFind the mean speed of each column for every Pokemon types using .mean() and .groupby().\nTasks:\n\nMake a groupby object on the column type.\nFind the mean value of each column for each pokemon type using .mean() and save the resulting dataframe as type_means.\nObtain the mean speed of each pokemon type from the dataframe type_means by using .loc[].\nSave it in an object named mean_speed.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .mean() on the pokemon_type dataframe?\nAre you naming the mean speed objects correctly?\nAre you obtaining the mean values using .loc[]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice using .agg()\nTasks:\n\nMake a groupby object on the column legendary.\nFind the maximum and minimum value of each column for each legendary groups using .agg() and save the resulting dataframe as legendary_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named legendary?\nAre you using .agg() on the legendary_stats dataframe?\nAre you naming the objects correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#fruit-salad-grouping-and-aggregating",
    "href": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#fruit-salad-grouping-and-aggregating",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Remember the fruit salad dataframe named fruit_salad? Refer to it for the next two questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9    \n\n\n\n\nConsider this output made from the fruit_salad dataframe:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#coding-questions",
    "href": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#coding-questions",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nFind the mean speed of each column for every Pokemon types using .mean() and .groupby().\nTasks:\n\nMake a groupby object on the column type.\nFind the mean value of each column for each pokemon type using .mean() and save the resulting dataframe as type_means.\nObtain the mean speed of each pokemon type from the dataframe type_means by using .loc[].\nSave it in an object named mean_speed.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .mean() on the pokemon_type dataframe?\nAre you naming the mean speed objects correctly?\nAre you obtaining the mean values using .loc[]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice using .agg()\nTasks:\n\nMake a groupby object on the column legendary.\nFind the maximum and minimum value of each column for each legendary groups using .agg() and save the resulting dataframe as legendary_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named legendary?\nAre you using .agg() on the legendary_stats dataframe?\nAre you naming the objects correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-23-chaining_true_false.html",
    "href": "modules/module2/module2-23-chaining_true_false.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake a plot using our Pokemon dataset by chaining actions sequentially.\nTasks:\n\nChain the following methods in the order specified.\nFirst, rename the column capture_rt to capture_rate.\nThen, create a new column named AD_total by adding the attack and defense columns from the pokemon dataset.\nSave this in a dataframe object called plot_df.\nFinally use .mark_circle() to plot AD_total on the x-axis and capture_rate on the y-axis.\nName this plot pokemon_plot.\nUse a new line for each method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using the chaning commands in the correct order?\nAre you using the .mark_circle() function?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-23-chaining_true_false.html#practice-chaining",
    "href": "modules/module2/module2-23-chaining_true_false.html#practice-chaining",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake a plot using our Pokemon dataset by chaining actions sequentially.\nTasks:\n\nChain the following methods in the order specified.\nFirst, rename the column capture_rt to capture_rate.\nThen, create a new column named AD_total by adding the attack and defense columns from the pokemon dataset.\nSave this in a dataframe object called plot_df.\nFinally use .mark_circle() to plot AD_total on the x-axis and capture_rate on the y-axis.\nName this plot pokemon_plot.\nUse a new line for each method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using the chaning commands in the correct order?\nAre you using the .mark_circle() function?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-21-practice_replacing_values.html",
    "href": "modules/module2/module2-21-practice_replacing_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s make a new column by assigning each pokemon base score as either “strong” or “weak”.\nTasks:\n\nCreate a new column in the dataframe named base_score by assigning values 500 or greater from the column total_bs as ‘strong’ pokemon and values less than 500 as ‘weak’ pokemon.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming the new column named base_score?\nAre you using .loc[df['total_bs'] &gt;= 500, 'base_score'] and assigning it to the correct value?\nAre you using single equality signs for the assignment?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the new column base_score we made above, make a bar graph showing the frequency of the strong and weak pokemon.\nTasks:\n\nCreate an object using single brackets to obtain the column base_score and name it bs_column.\nPlot the object bs_column using .mark_bar() and save this graph as score_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using single square brackets or obtain the column base_score?\nAre you using count() to count the occurences of the base scores?\nAre you saving the objects with the correct names?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-21-practice_replacing_values.html#practice-replacing-values",
    "href": "modules/module2/module2-21-practice_replacing_values.html#practice-replacing-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s make a new column by assigning each pokemon base score as either “strong” or “weak”.\nTasks:\n\nCreate a new column in the dataframe named base_score by assigning values 500 or greater from the column total_bs as ‘strong’ pokemon and values less than 500 as ‘weak’ pokemon.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming the new column named base_score?\nAre you using .loc[df['total_bs'] &gt;= 500, 'base_score'] and assigning it to the correct value?\nAre you using single equality signs for the assignment?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the new column base_score we made above, make a bar graph showing the frequency of the strong and weak pokemon.\nTasks:\n\nCreate an object using single brackets to obtain the column base_score and name it bs_column.\nPlot the object bs_column using .mark_bar() and save this graph as score_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using single square brackets or obtain the column base_score?\nAre you using count() to count the occurences of the base scores?\nAre you saving the objects with the correct names?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-17-filtering_question.html",
    "href": "modules/module2/module2-17-filtering_question.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Question 1\nIf the output of\ndf['location'] == 'Canada'\nis\n[ True, False, False, True]\n\nWhat would be the output of\n~(df['location'] == 'Canada')\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nTry to filter the dataframe to obtain only a certain Pokemon type using single condition filtering.\nTasks:\n\nCreate a new dataframe named fire_pokemon containing only the rows of type “fire”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pokemon['type'] == 'fire' as your condition?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s find all the pokemon that meet multiple conditions.\nTasks:\n\nFilter the dataframe for the pokemon that have attack and defense values both greater than 100.\nSave this dataframe as an object named mighty_pokemon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you separating your conditions with brackets?\nAre you using the symbol& to get the intersect?\nAre you using pokemon['defense'] &gt; 100 and pokemon['attack'] &gt; 100 as your conditions?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-17-filtering_question.html#filtering-question",
    "href": "modules/module2/module2-17-filtering_question.html#filtering-question",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Question 1\nIf the output of\ndf['location'] == 'Canada'\nis\n[ True, False, False, True]\n\nWhat would be the output of\n~(df['location'] == 'Canada')",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-17-filtering_question.html#coding-questiongs",
    "href": "modules/module2/module2-17-filtering_question.html#coding-questiongs",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nTry to filter the dataframe to obtain only a certain Pokemon type using single condition filtering.\nTasks:\n\nCreate a new dataframe named fire_pokemon containing only the rows of type “fire”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pokemon['type'] == 'fire' as your condition?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s find all the pokemon that meet multiple conditions.\nTasks:\n\nFilter the dataframe for the pokemon that have attack and defense values both greater than 100.\nSave this dataframe as an object named mighty_pokemon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you separating your conditions with brackets?\nAre you using the symbol& to get the intersect?\nAre you using pokemon['defense'] &gt; 100 and pokemon['attack'] &gt; 100 as your conditions?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-14-column_arithmetic_questions.html",
    "href": "modules/module2/module2-14-column_arithmetic_questions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Question 1\nWhat is the result if we multiply 2 columns together using the syntax\ndf[['Column_A']] * df[['Column_B']]\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nFor this exercise, we are going to create and drop some columns from our dataframe.\nTasks:\n\nCreate a new column named total_special that is the sum of column sp_attack and sp_defense.\nSave it, overwriting the dataframe named pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.assign()?\nAre you saving the new dataframes as the correct names?\nFor the new column does total_special  = pokemon['sp_attack'] + pokemon['sp_defense']?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-14-column_arithmetic_questions.html#column-arithmetic-questions",
    "href": "modules/module2/module2-14-column_arithmetic_questions.html#column-arithmetic-questions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Question 1\nWhat is the result if we multiply 2 columns together using the syntax\ndf[['Column_A']] * df[['Column_B']]",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-14-column_arithmetic_questions.html#creating-a-new-column",
    "href": "modules/module2/module2-14-column_arithmetic_questions.html#creating-a-new-column",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nFor this exercise, we are going to create and drop some columns from our dataframe.\nTasks:\n\nCreate a new column named total_special that is the sum of column sp_attack and sp_defense.\nSave it, overwriting the dataframe named pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.assign()?\nAre you saving the new dataframes as the correct names?\nFor the new column does total_special  = pokemon['sp_attack'] + pokemon['sp_defense']?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-10-column_editing_questions.html",
    "href": "modules/module2/module2-10-column_editing_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad dataframe once again.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\nLet’s say we run the following code:\nfruit_salad.drop(columns = ['colour', 'shape', 'sweetness'])\nfruit_salad = fruit_salad.rename(columns={'location':'country',\n                                          'weight':'weight_g'})\nUse the dataframe and code above to answer the next 2 questions.\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\nLet’s rename one of the columns in our pokemon.csv data.\nTasks:\n\nRename the column sp_attack to special_a and sp_defense to special_d using .rename() only once.\nSave the new dataframe as pokemon_special.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.rename()?\nAre you saving the new dataframe as the correct name?\nAre you using the argument columns={'sp_attack':'special_a', 'sp_defense':'special_d'}?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome of the columns in pokemon.csv we have deemed not useful. Let’s get rid of them!\nTasks:\n\nDrop the columns deck_no, capture_rt, and legendary.\nMake sure to overwrite the new dataframe to object pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.drop()?\nAre you overwriting the new dataframe to object pokemon?\nAre you using square brackets in the argument columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-10-column_editing_questions.html#column-editing-questions",
    "href": "modules/module2/module2-10-column_editing_questions.html#column-editing-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad dataframe once again.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\nLet’s say we run the following code:\nfruit_salad.drop(columns = ['colour', 'shape', 'sweetness'])\nfruit_salad = fruit_salad.rename(columns={'location':'country',\n                                          'weight':'weight_g'})\nUse the dataframe and code above to answer the next 2 questions.",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-10-column_editing_questions.html#coding-questions",
    "href": "modules/module2/module2-10-column_editing_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\nLet’s rename one of the columns in our pokemon.csv data.\nTasks:\n\nRename the column sp_attack to special_a and sp_defense to special_d using .rename() only once.\nSave the new dataframe as pokemon_special.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.rename()?\nAre you saving the new dataframe as the correct name?\nAre you using the argument columns={'sp_attack':'special_a', 'sp_defense':'special_d'}?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome of the columns in pokemon.csv we have deemed not useful. Let’s get rid of them!\nTasks:\n\nDrop the columns deck_no, capture_rt, and legendary.\nMake sure to overwrite the new dataframe to object pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.drop()?\nAre you overwriting the new dataframe to object pokemon?\nAre you using square brackets in the argument columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-07-name_that_argument.html",
    "href": "modules/module2/module2-07-name_that_argument.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLoad in the data using the most suitable arguments.\nTasks:\n\nRead in the first 100 rows and columns name, total_bs and type from the file pokemon.csv, which is located in the data directory.\nSave the resulting dataframe as pokemon_sample.\nDisplay pokemon_sample.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokeman_df?\nAre you using pd.read_csv()?\nAre you including the full path through the data/ folder when calling the file name?\nDo you the argument nrows=100?\nAre you loading in the specified column index labels?\nPerhaps you are using index_col=0 when it was not required?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-07-name_that_argument.html#using-arguments-when-reading-in-files",
    "href": "modules/module2/module2-07-name_that_argument.html#using-arguments-when-reading-in-files",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLoad in the data using the most suitable arguments.\nTasks:\n\nRead in the first 100 rows and columns name, total_bs and type from the file pokemon.csv, which is located in the data directory.\nSave the resulting dataframe as pokemon_sample.\nDisplay pokemon_sample.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokeman_df?\nAre you using pd.read_csv()?\nAre you including the full path through the data/ folder when calling the file name?\nDo you the argument nrows=100?\nAre you loading in the specified column index labels?\nPerhaps you are using index_col=0 when it was not required?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-02-delimiter.html",
    "href": "modules/module2/module2-02-delimiter.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try reading in some data from a URL using pd.read_csv().\nTasks:\n\nUse pd.read_csv() to read in the data from this url using the name column as the index.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokemon_df?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in a .txt file.\nTasks:\n\nRead in the data from a text file name pokemon-text.txt located in the data folder.\nSave the resulting dataframe as pokemon_df.\nIt’s a good idea to see what the delimiter is.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_csv()?\nDid you check to see what the delimiter is.\nAre you including the full path through the data/ folder when calling the file name?\nCheck that your delimiter argument is correct.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in an Excel file.\nTasks:\n\nRead in the data from the sheet named pokemon from the Excel file pokemon.xlsx located in the data folder.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_excel()?\nCheck that you are using sheet_name=\"pokemon\".\nAre you including the full path through the data/ folder when calling the file name?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-02-delimiter.html#coding-questions",
    "href": "modules/module2/module2-02-delimiter.html#coding-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try reading in some data from a URL using pd.read_csv().\nTasks:\n\nUse pd.read_csv() to read in the data from this url using the name column as the index.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokemon_df?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in a .txt file.\nTasks:\n\nRead in the data from a text file name pokemon-text.txt located in the data folder.\nSave the resulting dataframe as pokemon_df.\nIt’s a good idea to see what the delimiter is.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_csv()?\nDid you check to see what the delimiter is.\nAre you including the full path through the data/ folder when calling the file name?\nCheck that your delimiter argument is correct.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in an Excel file.\nTasks:\n\nRead in the data from the sheet named pokemon from the Excel file pokemon.xlsx located in the data folder.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_excel()?\nCheck that you are using sheet_name=\"pokemon\".\nAre you including the full path through the data/ folder when calling the file name?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-00-module_learning_outcomes.html",
    "href": "modules/module2/module2-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module2/module2-01-reading_in_different_file_types.html",
    "href": "modules/module2/module2-01-reading_in_different_file_types.html",
    "title": "1. Reading in Different File Types",
    "section": "",
    "text": "1. Reading in Different File Types\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "1. Reading in Different File Types"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-arguments_for_reading_data.html",
    "href": "modules/module2/module2-06-arguments_for_reading_data.html",
    "title": "2. Arguments for Reading Data",
    "section": "",
    "text": "2. Arguments for Reading Data\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "2. Arguments for Reading Data"
    ]
  },
  {
    "objectID": "modules/module2/module2-09-column_renaming_and_dropping.html",
    "href": "modules/module2/module2-09-column_renaming_and_dropping.html",
    "title": "3. Column Renaming and Dropping",
    "section": "",
    "text": "3. Column Renaming and Dropping\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "3. Column Renaming and Dropping"
    ]
  },
  {
    "objectID": "modules/module2/module2-13-column_arithmetic_and_creation.html",
    "href": "modules/module2/module2-13-column_arithmetic_and_creation.html",
    "title": "4. Column Arithmetic and Creation",
    "section": "",
    "text": "4. Column Arithmetic and Creation\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "4. Column Arithmetic and Creation"
    ]
  },
  {
    "objectID": "modules/module2/module2-16-data_filtering.html",
    "href": "modules/module2/module2-16-data_filtering.html",
    "title": "5. Data Filtering",
    "section": "",
    "text": "5. Data Filtering\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "5. Data Filtering"
    ]
  },
  {
    "objectID": "modules/module2/module2-20-conditional_value_replacement.html",
    "href": "modules/module2/module2-20-conditional_value_replacement.html",
    "title": "6. Conditional Value Replacement",
    "section": "",
    "text": "6. Conditional Value Replacement\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "6. Conditional Value Replacement"
    ]
  },
  {
    "objectID": "modules/module2/module2-22-chaining_notation.html",
    "href": "modules/module2/module2-22-chaining_notation.html",
    "title": "7. Chaining Notation",
    "section": "",
    "text": "7. Chaining Notation\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "7. Chaining Notation"
    ]
  },
  {
    "objectID": "modules/module2/module2-25-grouping_and_aggregating.html",
    "href": "modules/module2/module2-25-grouping_and_aggregating.html",
    "title": "8. Grouping and Aggregating",
    "section": "",
    "text": "8. Grouping and Aggregating\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "8. Grouping and Aggregating"
    ]
  },
  {
    "objectID": "modules/module2/module2-29-plotting_with_altair.html",
    "href": "modules/module2/module2-29-plotting_with_altair.html",
    "title": "9. Plotting with Altair",
    "section": "",
    "text": "9. Plotting with Altair\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "9. Plotting with Altair"
    ]
  },
  {
    "objectID": "modules/module2/module2-31-what_did_we_just_learn.html",
    "href": "modules/module2/module2-31-what_did_we_just_learn.html",
    "title": "10. What Did We Just Learn?",
    "section": "",
    "text": "10. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "10. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-different-file-types",
    "href": "modules/module2/slides/module2_01.html#reading-in-different-file-types",
    "title": "Reading in Different File Types",
    "section": "Reading in Different File Types",
    "text": "Reading in Different File Types\npandas facilitates the loading of data from many different file types including:\n\nA URL\nA txt file\nAn xlsx file\n\n\nIn the last module, we learned how to read in a csv file but loading in data is not restricted to this file type.\nThere are several types such as:\n\nA URL: If the data is stored publicly on a webpage, pandas can read it directly in from the page address.\nA txt file: We saw what a plain text file looked like in the last module and it is generally a simple manner of storing data.\n\nAn xlsx file: This is a Microsoft Excel spreadsheet. This is different than a regular csv file as an Excel file can contain many different sheets and can be formatted uniquely and specifically for an individual’s needs.\n\nOf course, there are many other file types but we will focus on these for this course."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-from-a-url",
    "href": "modules/module2/slides/module2_01.html#reading-from-a-url",
    "title": "Reading in Different File Types",
    "section": "Reading from a URL",
    "text": "Reading from a URL\nhttps://raw.githubusercontent.com/UBC-MDS/MCL-DSCI-011-programming-in-python/master/data/candybars.csv.\n\n\n\ncandybars = pd.read_csv('https://raw.githubusercontent.com/UBC-MDS/MCL-DSCI-511-programming-in-python/master/data/candybars.csv')\ncandybars.head()\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n3\nSmarties\n45\n1\n0\n...\n0\n0\n1\nCanada\n\n\n4\nTwix\n58\n1\n0\n...\n0\n0\n1\nBoth\n\n\n\n\n5 rows × 11 columns\n\n\n\n\nIf the data is accessible publicly on a website, you can read in data directly from the webpage it is stored on. For example, this code and all the files that make up this course are all openly available and can be viewed online.\nThe candybar.csv file that we used in the last module, is stored at this URL.\nYou can see that it looks like a plain text file with each line being a row and each column value separated with a comma.\nThe code required to read in this URL looks like this.\nIt uses the same pd.read_csv() function we saw when reading in csv files locally."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-a-text-file",
    "href": "modules/module2/slides/module2_01.html#reading-in-a-text-file",
    "title": "Reading in Different File Types",
    "section": "Reading in a Text File",
    "text": "Reading in a Text File\n\ncandybars = pd.read_csv('data/candybars-text.txt')\ncandybars.head()\n\n\n\n\n\n\n\n\nname\\tweight\\tchocolate\\tpeanuts\\tcaramel\\tnougat\\tcookie_wafer_rice\\tcoconut\\twhite_chocolate\\tmulti\\tavailable_canada_america\n\n\n\n\n0\nCoffee Crisp\\t50\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t0\\tCanada\n\n\n1\nButterfinger\\t184\\t1\\t1\\t1\\t0\\t0\\t0\\t0\\t0\\tAme...\n\n\n2\nSkor\\t39\\t1\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\tBoth\n\n\n3\nSmarties\\t45\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\tCanada\n\n\n4\nTwix\\t58\\t1\\t0\\t1\\t0\\t1\\t0\\t0\\t1\\tBoth\n\n\n\n\n\n\n\n\n\ncandybars = pd.read_csv('data/candybars-text.txt', delimiter='\\t')\ncandybars.head()\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n3\nSmarties\n45\n1\n0\n...\n0\n0\n1\nCanada\n\n\n4\nTwix\n58\n1\n0\n...\n0\n0\n1\nBoth\n\n\n\n\n5 rows × 11 columns\n\n\n\n\nReading in txt files can be a little less standard.\nSometimes the character separating column values are not always commas like we saw before.\nThere are many different options and when we read in the data, we need to specify how the data should be recognized.\nLet’s load in the candybars-text.txt file.\nThis is the same as the candybars.csv data but saved as a txt file.\nLook what happens when we load it in using the same syntax we are used to.\nThis is not ideal.\nWhat you should notice is instead of each column value being separated by a comma, it is now separated by \\t.\nThis is called the delimiter.\nIn this specific case, a \\t delimiter is a “tab”.\nWe need to tell pd.read_csv() to separate each value on our delimiter \\t.\nThat’s much better.\nThe delimiter won’t always be \\t for txt files. The most common delimiters are ;, ,, \\t, and sometimes even just spaces."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-an-excel-file-xlsx",
    "href": "modules/module2/slides/module2_01.html#reading-in-an-excel-file-xlsx",
    "title": "Reading in Different File Types",
    "section": "Reading in an Excel File (xlsx)",
    "text": "Reading in an Excel File (xlsx)\n\ncandybars = pd.read_excel('data/foods.xlsx', sheet_name='chocolate')\ncandybars\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n...\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n...\n0\n0\n0\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n...\n0\n1\n0\nBoth\n\n\n\n\n25 rows × 11 columns\n\n\n\n\nExcel files need special attention because they give the user the capability of additional formatting including saving multiple dataframes on different “sheets” within a single file.\nIf this is the case, we need to specify which sheet we want.\nSince this is a new type of animal, we also need a new verb. Enter read_excel().\nOur candybars dataframe is now saved as an excel spreadsheet named foods.xlsx on a sheet named chocolate.\nHere is how we would read it in."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-data-from-a-different-file",
    "href": "modules/module2/slides/module2_01.html#reading-in-data-from-a-different-file",
    "title": "Reading in Different File Types",
    "section": "Reading in Data from a Different File",
    "text": "Reading in Data from a Different File\n\nThis translates to the syntax data/canucks.csv.\n\nSomething you have seen in Module 1’s exercises is that when reading in the data there is always a data/ before the file name.\nThis is because we are running the current code in a file that is located in a different folder than the data.\nThe data is specifying a folder in our current directory (folder).\nWe need to specify the path to the csv file through the subdirectory.\nThis translates to the syntax data/canucks.csv."
  },
  {
    "objectID": "modules/module2/slides/module2_09.html#column-renaming",
    "href": "modules/module2/slides/module2_09.html#column-renaming",
    "title": "Column renaming and column dropping",
    "section": "Column Renaming",
    "text": "Column Renaming\n\ncandy = candy.rename(columns={'available_canada_america':'availability'})\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\nnougat\ncookie_wafer_rice\ncoconut\nwhite_chocolate\nmulti\navailability\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\n0\n1\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\n0\n0\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\n0\n0\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\n0\n0\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\n0\n0\n0\n0\n0\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\n0\n1\n0\n1\n0\nBoth\n\n\n\n\n25 rows × 11 columns\n\n\n\n\n columns={'old column name':'new column name'}\n\nThere will be times where you are unsatisfied with the column names and you may want to change them.\nThe proper syntax to do that is with .rename().\nThe column name available_canada_america is a bit long.\nPerhaps it would be a good idea to change it to something shorter like availability.\nHere is how we can accomplish that.\nThis code uses something we’ve never seen before - {} curly braces, also called curly brackets.\nThese have a special meaning but for now, you only need to concentrate your attention on the fact that the argument columns needs to have the format shown on the slide."
  },
  {
    "objectID": "modules/module2/slides/module2_09.html#column-dropping",
    "href": "modules/module2/slides/module2_09.html#column-dropping",
    "title": "Column renaming and column dropping",
    "section": "Column Dropping",
    "text": "Column Dropping\n\ncandy.drop(columns='coconut')\n\n\n\n\n\n\n\n\nname\nweight_g\nchocolate\npeanuts\ncaramel\nnougat\ncookie_wafer_rice\nwhite_chocolate\nmulti\navailability\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\n0\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\n0\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\n0\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\n0\n0\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\n0\n0\n0\n0\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\n0\n1\n1\n0\nBoth\n\n\n\n\n25 rows × 10 columns\n\n\n\n\n.drop() is the verb we use to delete columns in a dataframe.\nLet’s delete the column coconut by specifying it in the columns argument of the drop verb."
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#conditions",
    "href": "modules/module2/slides/module2_16.html#conditions",
    "title": "Data Filtering",
    "section": "Conditions",
    "text": "Conditions\n\ncereal['protein'] &gt; 4\n\n0     False\n1     False\n2     False\n      ...  \n74    False\n75    False\n76    False\nName: protein, Length: 77, dtype: bool\n\n\n\nSuppose you are trying to find the information for cereals with a protein content greater than 4g per serving.\nOur first instinct would be to write code that looks somewhat like this.\nThis can be translated as\n“From the protein column in the dataframe cereal, which have values greater than 4?”\nThe output shows all the index labels and a column with True or False values depending on if the row meets the condition. Cereals with True have a protein content greater than 4 and False if they do not.\nBut we want a dataframe with all the information that only contains the rows with protein above 4.\nHow can this be achieved?"
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#multiple-condition-filtering---and",
    "href": "modules/module2/slides/module2_16.html#multiple-condition-filtering---and",
    "title": "Data Filtering",
    "section": "Multiple Condition Filtering - “and”",
    "text": "Multiple Condition Filtering - “and”\n\ncereal[cereal['protein'] &gt;= 4]\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.0\n0.33\n68.402973\n\n\n2\nAll-Bran\nK\nCold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.0\n0.50\n93.704912\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n56\nQuaker Oat Squares\nQ\nCold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.0\n0.50\n49.511874\n\n\n57\nQuaker Oatmeal\nQ\nHot\n100\n5\n2\n0\n2.7\n1.0\n1\n110\n0\n1\n1.0\n0.67\n50.828392\n\n\n67\nSpecial K\nK\nCold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.0\n1.00\n53.131324\n\n\n\n\n11 rows × 16 columns\n\n\n\n\nWe now know how to filter on one condition but how do we filter if we have many?\nPerhaps we only want cereals with protein content between 4 to 5 grams?\nTo find the cereals that meet protein contents greater or equal to 4, we use the code shown here."
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#multiple-condition-filtering---or",
    "href": "modules/module2/slides/module2_16.html#multiple-condition-filtering---or",
    "title": "Data Filtering",
    "section": "Multiple Condition Filtering - “or”",
    "text": "Multiple Condition Filtering - “or”\n\ncereal[(cereal['mfr'] == 'Q') | (cereal['protein'] &gt; 4)]\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.0\n1.00\n33.983679\n\n\n10\nCap'n'Crunch\nQ\nCold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.0\n0.75\n18.042851\n\n\n11\nCheerios\nG\nCold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.0\n1.25\n50.764999\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n56\nQuaker Oat Squares\nQ\nCold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.0\n0.50\n49.511874\n\n\n57\nQuaker Oatmeal\nQ\nHot\n100\n5\n2\n0\n2.7\n1.0\n1\n110\n0\n1\n1.0\n0.67\n50.828392\n\n\n67\nSpecial K\nK\nCold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.0\n1.00\n53.131324\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nSuppose that we are interested in cereals that either are made from the Quaker manufacturer OR a protein content above 4.\nFor a row to be included in the output, we only require one or the other condition to hold.\nInstead of using the & symbol, we use | which is called the “pipe operator”. This means “or” in the Python programming language (and many other languages)."
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#tilde",
    "href": "modules/module2/slides/module2_16.html#tilde",
    "title": "Data Filtering",
    "section": "Tilde",
    "text": "Tilde\n\ncereal['protein'] &gt; 4\n\n0     False\n1     False\n2     False\n      ...  \n74    False\n75    False\n76    False\nName: protein, Length: 77, dtype: bool\n\n\n\nWe saw that when we filter the conditions are expressed with an underlying column with True or False values indicating if the condition has been met in each row of the dataframe.\nBut what if I wanted the rows that were the complement (or opposite) of this?\nThe opposite of cereal['protein'] &gt; 4 is cereal['protein'] &lt;= 4, so that one isn’t too tricky. But sometimes taking the opposite is not so straightforward. This is where the ~ (“tilde”) operator can be helpful."
  },
  {
    "objectID": "modules/module2/slides/module2_22.html#what-is-chaining",
    "href": "modules/module2/slides/module2_22.html#what-is-chaining",
    "title": "Chaining Notation",
    "section": "What is Chaining?",
    "text": "What is Chaining?\n\n\nAttribution\n\nUp until now, when we perform multiple actions on an object, we have been saving the results with the = operator after each line.\nChaining allows us to do multiple actions in a single line of code without the need to save each action in an intermediate object.\nYou can imagine that we are linking verbs together with a chain."
  },
  {
    "objectID": "modules/module2/slides/module2_22.html#coding-preferences",
    "href": "modules/module2/slides/module2_22.html#coding-preferences",
    "title": "Chaining Notation",
    "section": "Coding Preferences",
    "text": "Coding Preferences\n\nChaining has advantages and disadvantages.\nIncreases the readability of our code.\nComments are extremely important with of without chaining.\n\n\nAlthough we have seen how chaining has advantages, it’s a coding style that is adopted by the person writing the code.\nSomeone else (or more often, future you) must be able to understand what is being accomplished.\nThis is why comments (#) are so important. If a lot is going on in your code, it’s a good habit to explain it whether it’s with chaining, or without."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#variable-types",
    "href": "modules/module2/slides/module2_29.html#variable-types",
    "title": "More plotting tricks using Altair",
    "section": "Variable types",
    "text": "Variable types\n\nchart4 = alt.Chart(cereal, width=500, height=300).mark_circle().encode(\n                   x=alt.X('sugars:Q'), # use alt.X() to map the x-axis\n                   y=alt.Y('rating:Q')  # use alt.Y() to map the y-axis\n         ).properties(title=\"Scatter plot of cereal rating vs sugar content\")\n\nchart4\n\n\n\nSo far when plotting with Altair, we have been mapping our x and y in the encode(x=..,y=..) verb.\nHowever, doing so gives us very little control over how exactly we would like to map our x and y values.\nIn order to have more control, we can map our x and y values using x=alt.X(...) and y=alt.Y(...) respectively.\nThis gives us a lot more control over the customization of our plot.\nYou’ll see this coming up."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#histograms",
    "href": "modules/module2/slides/module2_29.html#histograms",
    "title": "More plotting tricks using Altair",
    "section": "Histograms",
    "text": "Histograms\n\nchart5 = alt.Chart(cereal, width=500, height=300).mark_bar().encode(\n                   x=alt.X('calories:Q', bin=True), # set x-axis as calories \n                   y=alt.Y('count():Q')             # set the y-axis as the occurrence count for each calorie value\n         ).properties(title=\"Histogram plot of cereal calorie content\")\nchart5\n\n\n\nAnother type of plot we can make using Altair is called a histogram.\nA histogram would be an ideal plot if we were interested in seeing how many cereals in our dataframe have calories within a certain range. A histogram is a bar chart where the height of each bar shows the frequency of something occurring. When applied to quantitative data, it groups the values into ranges, and the height of each bar shows the frequency of each range.\nWe can generate a histogram plot of the calories values in the cereal dataframe, which is quantitative. This will enable us to see the various values of calories and how many times they occur.\nTo make a histogram, we use mark_bar().\nIn the encode() verb, we specify the x-axis as calories and use the argument bin=True. We assign the y-axis as count():Q to get the number of cereals that have values within each of the ranges.\nThis is the same count() argument we use in Module 1 when we made bar charts."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#bins",
    "href": "modules/module2/slides/module2_29.html#bins",
    "title": "More plotting tricks using Altair",
    "section": "Bins",
    "text": "Bins\n\nchart6 = alt.Chart(cereal, width=500, height=300).mark_bar().encode(\n                   x=alt.X('calories:Q', bin=alt.Bin(maxbins=20)), # set max number of bins to 20\n                   y=alt.Y('count():Q')\n         ).properties(title=\"Histogram of cereal calorie content with bins = 20\")\nchart6\n\n\n\nWe have the ability to change the number of bars (bins) in our histogram by using the bin argument and the alt.Bin() verb.\nWithin alt.Bin(), we can specify maxbins which is the maximum allowed number of bins in our plot.\nThis may be useful when viewing a dataset with lots of different values.\nHaving control over the number of bins in a histogram can help to make visualization easier to extract insights from.\nHere, we set the number of max bins in the plot to 20 by setting bin=alt.Bin(maxbins=20) inside alt.X()."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#sorting",
    "href": "modules/module2/slides/module2_29.html#sorting",
    "title": "More plotting tricks using Altair",
    "section": "Sorting",
    "text": "Sorting\n\nchart9 = alt.Chart(mfr_mean, width=500, height=300).mark_bar().encode(\n                   x=alt.X('mfr:N', sort=\"y\", title=\"Manufacturer\"),  # use sort=\"y\" to sort in ascending order\n                   y=alt.Y('sugars:Q', title=\"Mean sugar content\")\n        ).properties(title=\"Bar plot of manufacturers mean sugar content in ascending order\")\nchart9\n\n\n\nSometimes sorting a dataframe by quantity helps us obtain insights more easily.\nFor example, if we sorted the mean sugar content for the manufacturers before generating the previous plot, it would be easier to identify which manufacturer produces cereals with the highest mean sugar content.\nAltair allows us to sort a column while plotting.\nSorting can be done on either the x or y axis using the sort= in the alt.X or alt.Y verb.\nThe sort argument takes in either x or y to specify which axis to sort by.\nHere we are sorting in ascending order of which manufacturers have the largest mean sugar content.\nThis plot shows us immediately that manufacturer P has the highest mean cereal sugar content."
  }
]