[
  {
    "objectID": "modules/module3/slides/module3_25.html#summary",
    "href": "modules/module3/slides/module3_25.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 3",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nExplain what tidy data is.\nUse .melt() and .pivot() to reshape dataframes, specifically to make tidy data.\nLearn how to reset a dataframe’s index.\nCombine dataframes using .merge() and .concat() and know when to use these different methods.\nUnderstand the different joining methods.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module3/slides/module3_25.html#attribution",
    "href": "modules/module3/slides/module3_25.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 3",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#concatenation",
    "href": "modules/module3/slides/module3_17.html#concatenation",
    "title": "Concatenation",
    "section": "Concatenation",
    "text": "Concatenation\n\n\nConcatenation works extremely well when you have similar dataframes, which both share identical column or row index labels.\npd.concat() can glue the 2 dataframes together either horizontally or vertically.\nIn this animation, you can see that the pieces are joined in the order that was presented, and the pattern does not necessarily match up."
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#horizontal-concatenation",
    "href": "modules/module3/slides/module3_17.html#horizontal-concatenation",
    "title": "Concatenation",
    "section": "Horizontal Concatenation",
    "text": "Horizontal Concatenation\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\n\ncandy2 = pd.read_csv('data/candy_bars2.csv')\ncandy2\n\n\n\n\n\n\n\n\nname\ncalories\nfat\nsugar\n\n\n\n\n0\nCoffee Crisp\n260\n13\n25\n\n\n1\nButterfinger\n798\n30\n72\n\n\n2\nSkor\n209\n12\n23\n\n\n3\nSmarties\n210\n6\n33\n\n\n4\nTwix\n250\n12\n25\n\n\n\n\n\n\n\n\ncandy_bars2.csv is a new dataframe that has additional nutritional information about each candy bar like the columns calories fat and sugar. You’ll notice that this dataframe has the same number and order of candy bars.\nWe want to combine candy2 with candy horizontally."
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#vertical-concatenation",
    "href": "modules/module3/slides/module3_17.html#vertical-concatenation",
    "title": "Concatenation",
    "section": "Vertical Concatenation",
    "text": "Vertical Concatenation\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\n\ncandy_more = pd.read_csv('data/candybars_more.csv', usecols=range(4))\ncandy_more\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nKinder Bueno\n43\n1\n0\n\n\n1\n5th Avenue\n56\n1\n1\n\n\n2\nCrunch\n44\n1\n0\n\n\n\n\n\n\n\n\nThe new dataset candybars_more.csv has 3 additional candy bars that we wish to add to the original candy dataframe. The columns in this dataframe have the same order as in the candy dataframe."
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#be-careful-of-order",
    "href": "modules/module3/slides/module3_17.html#be-careful-of-order",
    "title": "Concatenation",
    "section": "Be careful of order!",
    "text": "Be careful of order!\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\n\nsnacksize_candybars = pd.read_csv('data/snacksize_candybars.csv')\nsnacksize_candybars\n\n\n\n\n\n\n\n\nname\ncalories\nfat\nsugar\n\n\n\n\n0\nButterfinger\n798\n30\n72\n\n\n1\nSkor\n209\n12\n23\n\n\n2\nTwix\n250\n12\n25\n\n\n3\nCoffee Crisp\n260\n13\n25\n\n\n4\nSmarties\n210\n6\n33\n\n\n\n\n\n\n\n\npd.concat() is great when our dataframes have the same order for each observation. What happens if our dataframes have different orders for the candy bars?\nLet’s use a horizontal concatenation example with the dataframesnacksize_candybars.csv. This data contains the candy bars from candy in a shuffled order."
  },
  {
    "objectID": "modules/module3/slides/module3_11.html#pivot-table",
    "href": "modules/module3/slides/module3_11.html#pivot-table",
    "title": "Reshaping with Pivot Table",
    "section": "Pivot Table",
    "text": "Pivot Table\n\n\n\nWe discussed that one of the effects of using .pivot() on our cereal_long dataframe was that the new dataframe was missing the column mfr.\nThat’s because .pivot() discards any columns that are not being directly affected by the pivot. Only the column that is specified in the index argument and the columns that need to be transformed are present in the new dataframe.\nThat’s where pivot_table steps in!"
  },
  {
    "objectID": "modules/module3/slides/module3_11.html#why-use-pivot-at-all-then",
    "href": "modules/module3/slides/module3_11.html#why-use-pivot-at-all-then",
    "title": "Reshaping with Pivot Table",
    "section": "Why use pivot at all then?",
    "text": "Why use pivot at all then?\n\n\n\nWhen we use .pivot_table(), we have to proceed with caution.\nWe talked about how .pivot() and .pivot_table() take the arguments index and columns. What happens if we have multiple rows with the same index and column values?\nTake the following example where we see that Special K has 2 rows with differing values for calories.\nWhat happens when we try to pivot this?"
  },
  {
    "objectID": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "href": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nExplain what tidy data is.\nUse .melt() and .pivot() to reshape dataframes, specifically to make tidy data.\nLearn how to reset a dataframe’s index.\nCombine dataframes using .merge() and .concat() and know when to use these different methods.\nUnderstand the different joining methods."
  },
  {
    "objectID": "modules/module3/module3-22-merge_questions.html",
    "href": "modules/module3/module3-22-merge_questions.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nIn this exercise, you are going to join two dataframes lego_inventory_parts.csv and lego-colors.csv and answer a few multiple-choice questions. The multiple-choice questions are being asked with the intention of using the code cell to write your own code in any way that helps to answer the question.\nTasks:\n\nCombine the two dataframes to make 1 large complete dataframe by using an outer join.\nMake sure to set the argument indicator to True.\nName the new dataframe lego_tower.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_tower?\nAre you using the arguments left_on='color_id', right_on=id, how='outer' and indicator=True?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis question may be a bit more challenging. We are wondering about the inventory of a store. We want to see which Lego sets are in stock and if so how many? After all, the store needs to make sure there are enough sets in stock to meet demand.\nTasks:\n\nCombine the two dataframes to make one large complete dataframe by using an inner join.\nName the new dataframe lego_stock.\nGroup the new dataframe by set_num and find how many groups there are using .ngroups\n\nThis question is in two parts and we are going to walk you through how to tackle it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_stock?\nAre you using the arguments left_on='set_num', right_on='set_num' and how='inner'?\nAre you grouping my using groupby('set_num')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAh, it appears we have multiple rows for some of the same sets.\nAlthough it shows initially the we have 2846 different sets due to the number of rows in lego_stock, when we group them by set_num we actually only get 2306 different sets. This means that we have some rows with the same set_num but with different inventory quantities.\nHow are we going to get the stock quantity of each set now?\nWe are going to have to sum up the quantity of each set using .groupby() and.agg().\nTasks:\n\nUse .groupby() and .agg() to sum up the quantity of each set and save this as store_inventory.\nInner join store_inventory with lego_sets and use chaining to sort the dataframe in descending order based on in-stock quantity\nSave this new dataframe as store_inventory_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe store_inventory?\nAre you aggregating using .agg({\\'quantity\\':\\'sum\\'})?\nAre you using the arguments left_index=True, right_index=True, how='inner'?\nAre you sorting in descending order of quantity?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we can return to our initial problem of identifying how many Lego sets are in stock.",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-22-merge_questions.html#coding-questions",
    "href": "modules/module3/module3-22-merge_questions.html#coding-questions",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nIn this exercise, you are going to join two dataframes lego_inventory_parts.csv and lego-colors.csv and answer a few multiple-choice questions. The multiple-choice questions are being asked with the intention of using the code cell to write your own code in any way that helps to answer the question.\nTasks:\n\nCombine the two dataframes to make 1 large complete dataframe by using an outer join.\nMake sure to set the argument indicator to True.\nName the new dataframe lego_tower.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_tower?\nAre you using the arguments left_on='color_id', right_on=id, how='outer' and indicator=True?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis question may be a bit more challenging. We are wondering about the inventory of a store. We want to see which Lego sets are in stock and if so how many? After all, the store needs to make sure there are enough sets in stock to meet demand.\nTasks:\n\nCombine the two dataframes to make one large complete dataframe by using an inner join.\nName the new dataframe lego_stock.\nGroup the new dataframe by set_num and find how many groups there are using .ngroups\n\nThis question is in two parts and we are going to walk you through how to tackle it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_stock?\nAre you using the arguments left_on='set_num', right_on='set_num' and how='inner'?\nAre you grouping my using groupby('set_num')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAh, it appears we have multiple rows for some of the same sets.\nAlthough it shows initially the we have 2846 different sets due to the number of rows in lego_stock, when we group them by set_num we actually only get 2306 different sets. This means that we have some rows with the same set_num but with different inventory quantities.\nHow are we going to get the stock quantity of each set now?\nWe are going to have to sum up the quantity of each set using .groupby() and.agg().\nTasks:\n\nUse .groupby() and .agg() to sum up the quantity of each set and save this as store_inventory.\nInner join store_inventory with lego_sets and use chaining to sort the dataframe in descending order based on in-stock quantity\nSave this new dataframe as store_inventory_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe store_inventory?\nAre you aggregating using .agg({\\'quantity\\':\\'sum\\'})?\nAre you using the arguments left_index=True, right_index=True, how='inner'?\nAre you sorting in descending order of quantity?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we can return to our initial problem of identifying how many Lego sets are in stock.",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-18-concat_questions.html",
    "href": "modules/module3/module3-18-concat_questions.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions: Running a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nSometimes we accumulate additional data that we need to combine with our existing data. In the following question, we need to combine our dataframes to have a complete collection of all the Lego sets that exist.\nTasks:\n\nCombine the two dataframes lego_top and lego_bottom vertically to make one large complete dataframe.\nName the new dataframe full_set.\nSave the new dimension of full_set in an object named full_set_shape.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating in the correct order with lego_top first and lego_bottom second?\nAre you putting your dataframes within square brackets?\nAre you using axis=0\nAre you using .shape to find the dimension of the new dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOur goal is to obtain a dataframe with the lego_set names and the total amount of pieces in each set but we only have 2 Lego dataframes (with the same indexes). One dataframe has the set names and the other contains information amount the number of matte and transparent pieces included in each set. Complete this question by using pd.concat() and techniques we learned in the previous model.\nTasks:\n\nCombine the two dataframes horizontally to make 1 large complete dataframe and name the new dataframe lego_full.\nDrop any duplicated columns using .loc[] and .duplicate()and save this new dataframe as washed_lego.\nMake a new column named total_pieces by adding up columns matte and transparent.\nSort the dataframe by total_pieces in descending order.\nSave this in an object named lego_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating the dataframes lego_base with lego_opacity?\nAre you putting your dataframes within square brackets?\nAre you removing any duplicated columns?\nAre you using axis=1?\nAre you using .assign() to make a new column named total_pieces?\nAre you using using .sort_values() with the argument ascending=False\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-18-concat_questions.html#coding-questions",
    "href": "modules/module3/module3-18-concat_questions.html#coding-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions: Running a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nSometimes we accumulate additional data that we need to combine with our existing data. In the following question, we need to combine our dataframes to have a complete collection of all the Lego sets that exist.\nTasks:\n\nCombine the two dataframes lego_top and lego_bottom vertically to make one large complete dataframe.\nName the new dataframe full_set.\nSave the new dimension of full_set in an object named full_set_shape.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating in the correct order with lego_top first and lego_bottom second?\nAre you putting your dataframes within square brackets?\nAre you using axis=0\nAre you using .shape to find the dimension of the new dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOur goal is to obtain a dataframe with the lego_set names and the total amount of pieces in each set but we only have 2 Lego dataframes (with the same indexes). One dataframe has the set names and the other contains information amount the number of matte and transparent pieces included in each set. Complete this question by using pd.concat() and techniques we learned in the previous model.\nTasks:\n\nCombine the two dataframes horizontally to make 1 large complete dataframe and name the new dataframe lego_full.\nDrop any duplicated columns using .loc[] and .duplicate()and save this new dataframe as washed_lego.\nMake a new column named total_pieces by adding up columns matte and transparent.\nSort the dataframe by total_pieces in descending order.\nSave this in an object named lego_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating the dataframes lego_base with lego_opacity?\nAre you putting your dataframes within square brackets?\nAre you removing any duplicated columns?\nAre you using axis=1?\nAre you using .assign() to make a new column named total_pieces?\nAre you using using .sort_values() with the argument ascending=False\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-15-melting_questions.html",
    "href": "modules/module3/module3-15-melting_questions.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at some new untidy data that we have named lego.\n\n\n\n\n\n\nLet’s melt this so that the 2 new columns named matte and transparent become a single one. These columns refer to the opacity of the blocks and the values refer to the number of pieces of each included in the set. Since our variable of interest in this scenario is opacity, we need to combine the two measurements into one column.\nTasks:\n\nmelt the dataframe columns matte and transparent into a single column named opacity and name the values column quantity.\nName the new dataframe tidied_lego.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you melting the correct columns named matte and transparent?\nAre you making sure to use all the columns (except matte and transparent) in the argument id_vars?\nHave you set all arguments (id_vars, value_vars, var_name, and value_name)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-15-melting_questions.html#applying-melt",
    "href": "modules/module3/module3-15-melting_questions.html#applying-melt",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at some new untidy data that we have named lego.\n\n\n\n\n\n\nLet’s melt this so that the 2 new columns named matte and transparent become a single one. These columns refer to the opacity of the blocks and the values refer to the number of pieces of each included in the set. Since our variable of interest in this scenario is opacity, we need to combine the two measurements into one column.\nTasks:\n\nmelt the dataframe columns matte and transparent into a single column named opacity and name the values column quantity.\nName the new dataframe tidied_lego.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you melting the correct columns named matte and transparent?\nAre you making sure to use all the columns (except matte and transparent) in the argument id_vars?\nHave you set all arguments (id_vars, value_vars, var_name, and value_name)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-12-pivot_table_questions.html",
    "href": "modules/module3/module3-12-pivot_table_questions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s convert the dataframe lego into wider data but this time preserve all the columns in the dataframe by using .pivot_table().\nTasks:\n\nConvert the untidy data into tidy data using .pivot_table() making sure to keep all the columns.\nName the new dataframe tidied_lego.\nUse .agg() to find the mean number of parts for each production year and save it in an object name year_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct arguments such as index, columns, and values?\nDoes your index contain multiple columns?\nAre you pivoting the correct column named lego_info with values='value'?\nAre you resetting your index again after you pivot?\nAre you using .agg({\"num_parts\": \"mean\"})?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-12-pivot_table_questions.html#applying-pivot-table",
    "href": "modules/module3/module3-12-pivot_table_questions.html#applying-pivot-table",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s convert the dataframe lego into wider data but this time preserve all the columns in the dataframe by using .pivot_table().\nTasks:\n\nConvert the untidy data into tidy data using .pivot_table() making sure to keep all the columns.\nName the new dataframe tidied_lego.\nUse .agg() to find the mean number of parts for each production year and save it in an object name year_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct arguments such as index, columns, and values?\nDoes your index contain multiple columns?\nAre you pivoting the correct column named lego_info with values='value'?\nAre you resetting your index again after you pivot?\nAre you using .agg({\"num_parts\": \"mean\"})?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-09-pivoting_questions.html",
    "href": "modules/module3/module3-09-pivoting_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at the new dataset named lego.\n\n\n\n\n\n\nLet’s convert the dataframe lego into a wider dataframe using .pivot().\nTasks:\n\nConvert the untidy data into tidy data using .pivot().\nDon’t forget to reset your index.\nName the new dataframe tidied_lego.\nSave the mean number of parts (num_parts) of the Lego sets in an object named set_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you pivoting the correct column named lego_info with values='value'?\n\nAre you resetting your index after you pivot?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-09-pivoting_questions.html#applying-pivot",
    "href": "modules/module3/module3-09-pivoting_questions.html#applying-pivot",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at the new dataset named lego.\n\n\n\n\n\n\nLet’s convert the dataframe lego into a wider dataframe using .pivot().\nTasks:\n\nConvert the untidy data into tidy data using .pivot().\nDon’t forget to reset your index.\nName the new dataframe tidied_lego.\nSave the mean number of parts (num_parts) of the Lego sets in an object named set_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you pivoting the correct column named lego_info with values='value'?\n\nAre you resetting your index after you pivot?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-which_is_tidy.html",
    "href": "modules/module3/module3-06-which_is_tidy.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Dataframe A\n\n\n\n\n\nDataframe B",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-which_is_tidy.html#which-is-tidy",
    "href": "modules/module3/module3-06-which_is_tidy.html#which-is-tidy",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Dataframe A\n\n\n\n\n\nDataframe B",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-00-module_learning_outcomes.html",
    "href": "modules/module3/module3-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "href": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "title": "Summary Statistics",
    "section": "Numerical and Categorical Columns",
    "text": "Numerical and Categorical Columns\nCategorical data\nConsists of qualitative observations such as characteristics - things generally containing words.\nExamples\n\nColours\nNames\n\n\nNumerical data\nThese data are usually expressed with numbers.\nExamples\n\nMeasurements\nQuantities\n\n\nBefore we go further, let’s quickly discuss the 2 different types of data.\nCategorical data consists of qualitative observations such as characteristics - things generally containing names or words. Examples would be colours or names of things.\nNumerical data are usually expressed with numbers such as measurements or quantities.\nOur columns in our dataframe are considered one of the two of these."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#pandas-describe",
    "href": "modules/module1/slides/module1_26.html#pandas-describe",
    "title": "Summary Statistics",
    "section": "Pandas describe()",
    "text": "Pandas describe()\n\ncereal.describe()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\n\n\ncount\n77.000000\n77.000000\n77.000000\n77.000000\n...\n77.000000\n77.000000\n77.000000\n77.000000\n\n\nmean\n106.883117\n2.545455\n1.012987\n159.675325\n...\n2.207792\n1.029610\n0.821039\n42.665705\n\n\nstd\n19.484119\n1.094790\n1.006473\n83.832295\n...\n0.832524\n0.150477\n0.232716\n14.047289\n\n\nmin\n50.000000\n1.000000\n0.000000\n0.000000\n...\n1.000000\n0.500000\n0.250000\n18.042851\n\n\n25%\n100.000000\n2.000000\n0.000000\n130.000000\n...\n1.000000\n1.000000\n0.670000\n33.174094\n\n\n50%\n110.000000\n3.000000\n1.000000\n180.000000\n...\n2.000000\n1.000000\n0.750000\n40.400208\n\n\n75%\n110.000000\n3.000000\n2.000000\n210.000000\n...\n3.000000\n1.000000\n1.000000\n50.828392\n\n\nmax\n160.000000\n6.000000\n5.000000\n320.000000\n...\n3.000000\n1.500000\n1.500000\n93.704912\n\n\n\n\n8 rows × 13 columns\n\n\n\n\nPandas has a lot up its sleeve but one of the most useful methods is called .describe() and it does exactly that. it describes our data.\nLet’s try it out on our cereal dataset.\nBy default df.describe() only shows numerical columns."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "href": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Slicing Dataframe",
    "text": "Slicing Dataframe\n\ncereal = pd.read_csv('data/cereal.csv')\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nUp until point, we have been manipulating our dataframe with column and row labels using .loc[].\nSlicing can also be done by the location position of each row with .iloc[].\n.iloc[] is very similar to .loc[], however, the “i” in iloc refers to the index integer position.\nWe are going to return to our cereal dataset and take a look at the first 10 rows.\nLet’s say we want the rows from All-Bran to Apple Cinnamon Cheerios, but we want to slice based on their position instead of their label.\nUsing Python’s counting method of starting at zero, we conclude that All-Bran to be at position to 2.\nWe get Apple Cinnamon Cheerios position to be 5 in the same way.\nWe are lucky with this dataframe because our index labels match the position of the rows, and this makes things a little bit simpler."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "href": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Selecting with .iloc[]",
    "text": "Selecting with .iloc[]\n\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\n\n\n\n\n\n\nRow\nRow Position\n\n\n\n\nAlmond Delight\nPosition 4\n\n\nBasic 4\nPosition 7\n\n\nApple Jacks\nPosition 6\n\n\n\n\n\n\n\n\n\n\n\n\nColumns\nColumn Position\n\n\n\n\nname\nPosition 0\n\n\ncalories\nPosition 3\n\n\nfat\nPosition 5\n\n\ntype\nPosition 2\n\n\n\n\n\n\n\n\nSelecting using .iloc[] is done identically to .loc[], however, the items within each set of square brackets MUST be integers, and not in quotation marks.\nLet’s say we want the rows Almond Delight, Basic 4 and Apple Jacks with the columns name, calories, fat and type and in that specific order."
  },
  {
    "objectID": "modules/module1/slides/module1_11.html#so-far",
    "href": "modules/module1/slides/module1_11.html#so-far",
    "title": "Slicing Only Columns Using .loc[]",
    "section": "So Far",
    "text": "So Far\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\n\ncereal.loc['row name start':'row name end', 'column name start':'column name end']\n\nIf we aren’t slicing any columns, but we are slicing rows we can shorten that to\n\ndf.loc['row name start':'row name end']\n\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify we want all the row first with just a colon : followed by interval of the columns:\n\ndf.loc[:, 'column name start':'column name end']\n\nWe can read : as “to”.\nIf the indices are labeled with numbers, we do not need “quotations” when calling them. This is only when the labels are using letters.\n\n\nLet’s talk about what we have covered so far.\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\nIf we are not slicing any columns, but we are slicing rows we only need to specify the row labels.\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify rows first and therefore we would need to make it clear with a colon first that we are slicing all the rows followed by the column labels.\nWe can read : as “to”.\nAnd finally, if the row index is labeled with numbers, we do not need “quotations” when slicing."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#importing-pandas",
    "href": "modules/module1/slides/module1_03.html#importing-pandas",
    "title": "What is Pandas?",
    "section": "Importing pandas",
    "text": "Importing pandas\n\nimport pandas as pd\n\n\nTo analyze dataframes and load these csv files, we need to make sure that we bring in the pandas library into Python.\nBefore we start writing any valuable code for loading data and doing data analysis we need to import it with the following code."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#reading-in-data",
    "href": "modules/module1/slides/module1_03.html#reading-in-data",
    "title": "What is Pandas?",
    "section": "Reading in Data",
    "text": "Reading in Data\n\ncandy = pd.read_csv('data/candybars.csv')\n\n\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\nBoth\n\n\n\n\n25 rows × 6 columns\n\n\n\n\nNext we can bring in our data named candybars which is stored as a .csv file.\nLet’s break this up:\n\npd is the short form for pandas, which we are using to manipulate our dataframe.\n\nread_csv() is the tool that does the job and, in this case, it is reading in the csv file named candybars.csv.\n\ncandy is The dataframe is now saved as an object called candy.\n\nThe dataframe is stored in an object named candy and we can inspect in by “calling” the object name.\nIn these slides we can differentiate between the code that we typed in with a light grey background and it’s output which has a dark grey background.\nFrom this dataframe, we can see that there are 25 different candy bars and 6 columns."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "href": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "title": "What is Pandas?",
    "section": "Functions/Methods and Attributes",
    "text": "Functions/Methods and Attributes\n\nAttributes\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\n\nFunctions\nIn the example of pd.read_csv(), this function does the action of reading in our data.\n\nSomething you may have noticed is that when we use pd.read_csv() we put our instructions within the parentheses, whereas, when we use .shape or .head() the object that we are operating on comes before our desired command.\nIn Python, we use functions, methods and attributes. These are special words in Python that take instructions (we call these arguments) and do something.\nAttributes can be distinguished from methods and functions as they do not have parentheses.\nThey can be thought of as nouns or adjectives that describe an object.\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\nFunctions and methods have parentheses.\nThey can be thought of as verbs that complete an action.\nIn the example of pd.read_csv(), this function does the action of reading in our data.\nThis is going to be discussed in more detail later in the course but now, simply be aware of the way we write the different instructions."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#comments",
    "href": "modules/module1/slides/module1_03.html#comments",
    "title": "What is Pandas?",
    "section": "Comments",
    "text": "Comments\n\n# This line does not execute anything. \n\n\n\ncandy.shape  # This will output the shape of the dataframe\n\n\nWhile we write code, it’s often useful to annotate it or include information for humans that we do not want to executed.\nThe easiest way to do this is with a hash (#) symbol. This creates a single line comment and prevents anything written after it from being executed by Python.\nWe use comments frequently in the exercises to help you understand what to do and what our intentions are.\nIt’s good practice to use them to explain our code so if we or someone else wants to read it at a later date, it’s easier to understand."
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\n\nLoad the pandas library into Python.\n\nDemonstrate indexing and slicing with .loc[] and .iloc[].\n\nDemonstrate Selecting columns of a dataframe using df[] notation.\n\nObtain values from a dataframe using .loc[].\n\nSort a dataframe using .sort_values().\n\nCreate simple summary statistics using .describe().\n\nConstruct simple visualizations using Altair.\n\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html",
    "href": "modules/module1/module1-32-practicing_bar_charts.html",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nYou are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOk, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "title": "12.1. Exercises",
    "section": "",
    "text": "You are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Ok, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html",
    "href": "modules/module1/module1-25-practice_sorting.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "href": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html",
    "href": "modules/module1/module1-19-practicing_selecting.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "href": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html",
    "href": "modules/module1/module1-17-practicing_selecting_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "href": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html",
    "href": "modules/module1/module1-12-slicing_columns_only.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "href": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html",
    "href": "modules/module1/module1-04-definitions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html#coding-questions",
    "href": "modules/module1/module1-04-definitions.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module_learning_outcomes.html",
    "href": "modules/module1/module1-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Programming in Python for Data Science!",
    "section": "",
    "text": "Welcome to Programming in Python for Data Science!\nThis course is part of the Key Capabilities for Data Science program and will teach you how to conduct data analysis in Python. During the course, you will work with powerful Python packages made for data-science, including Pandas for processing tabular data, Altair for data visualization and NumPy for working with numerical data types.\nYou will also learn about iteration, flow control, and the data types relevant to data exploration and analysis. You will leave this course capable of processing raw data into a format suitable for analysis, writing your own analysis functions, and deriving data-driven insights via the creation of interactive visualizations and summary tables.\nCourse prerequisites: None",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "0. Welcome!"
    ]
  },
  {
    "objectID": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "href": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "title": "1. Programming in Python for Data Science",
    "section": "",
    "text": "1. Programming in Python for Data Science\n\nVideoSlides",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "1. Programming in Python for Data Science"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\n\nDefine tidy data and explain why it is an optimal format for data analysis.\nTransform data into the tidy data format using pandas.\nDemonstrate fundamental programming concepts such as loops and conditionals.\nUnderstand the key data structures in Python.\nRead data into Python data from vanilla (e.g., .csv) and non-standard plain text files, as well as common spreadsheet file types (e.g., .xls).\nConstruct simple plots using Altair\nManipulate a single data table by:\n7.1 Filtering rows based on a criterion or combination of criteria.\n7.2 Selecting variables.\n7.3 Creating new variables and modifying pre-existing ones.\n7.4 Rearranging the observations or variables by sorting.\n\nManage and manipulate data with dates and times, missing values and categorical variables as well as renaming dataframe columns.\nProduce human-readable code that incorporates best practices of programming and coding style."
  },
  {
    "objectID": "modules/module1/module1-01-introduction_to_dataframes.html",
    "href": "modules/module1/module1-01-introduction_to_dataframes.html",
    "title": "1. Introduction to Dataframes",
    "section": "",
    "text": "1. Introduction to Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "1. Introduction to Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-introduction_to_pandas.html",
    "href": "modules/module1/module1-03-introduction_to_pandas.html",
    "title": "2. Introduction to Pandas",
    "section": "",
    "text": "2. Introduction to Pandas\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "2. Introduction to Pandas"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "href": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "title": "3. Slicing with Pandas Using .loc[]",
    "section": "",
    "text": "3. Slicing with Pandas Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "3. Slicing with Pandas Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "href": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "title": "4. Slicing Columns Using .loc[]",
    "section": "",
    "text": "4. Slicing Columns Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "4. Slicing Columns Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-13-selecting_using_.loc[].html",
    "href": "modules/module1/module1-13-selecting_using_.loc[].html",
    "title": "5. Selecting Using .loc[]",
    "section": "",
    "text": "5. Selecting Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "5. Selecting Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "href": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "title": "6. Obtaining Dataframe Values",
    "section": "",
    "text": "6. Obtaining Dataframe Values\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "6. Obtaining Dataframe Values"
    ]
  },
  {
    "objectID": "modules/module1/module1-18-selecting_a_single_column.html",
    "href": "modules/module1/module1-18-selecting_a_single_column.html",
    "title": "7. Selecting a Single Column",
    "section": "",
    "text": "7. Selecting a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "7. Selecting a Single Column"
    ]
  },
  {
    "objectID": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "href": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "title": "8. Slicing and Selecting Using df.iloc[]",
    "section": "",
    "text": "8. Slicing and Selecting Using df.iloc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "8. Slicing and Selecting Using df.iloc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-24-sorting_dataframes.html",
    "href": "modules/module1/module1-24-sorting_dataframes.html",
    "title": "9. Sorting Dataframes",
    "section": "",
    "text": "9. Sorting Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "9. Sorting Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-26-summary_statistics.html",
    "href": "modules/module1/module1-26-summary_statistics.html",
    "title": "10. Summary Statistics",
    "section": "",
    "text": "10. Summary Statistics\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "10. Summary Statistics"
    ]
  },
  {
    "objectID": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "href": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "title": "11. Frequency Tables and Writing CSVs",
    "section": "",
    "text": "11. Frequency Tables and Writing CSVs\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "11. Frequency Tables and Writing CSVs"
    ]
  },
  {
    "objectID": "modules/module1/module1-31-quick_viz_with_altair.html",
    "href": "modules/module1/module1-31-quick_viz_with_altair.html",
    "title": "12. Quick Viz with Altair",
    "section": "",
    "text": "12. Quick Viz with Altair\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "12. Quick Viz with Altair"
    ]
  },
  {
    "objectID": "modules/module1/module1-34-what_did_we_just_learn.html",
    "href": "modules/module1/module1-34-what_did_we_just_learn.html",
    "title": "13. What Did We Just Learn?",
    "section": "",
    "text": "13. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "13. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "href": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "title": "What is a dataframe?",
    "section": "What is a dataframe?",
    "text": "What is a dataframe?\n\n\nOften, the first thing we need to do in data analysis is to load in data.\nIn this case, we will be using the programming language Python.\nWhen we bring spreadsheet-like data, into Python, it is generally shaped like a rectangle (think of Microsoft Excel tables for example) it is represented as what we call a dataframe object. It is very similar to a spreadsheet."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "href": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "title": "What is a dataframe?",
    "section": "What is a CSV file?",
    "text": "What is a CSV file?\n\n\n\nThe first kind of data we will learn how to load into Python as a dataframe is the spreadsheet-like comma-separated values format (.csv for short).\nThese files have names ending in .csv, and can be opened open and saved from common spreadsheetlike programs like Microsoft Excel and Google Sheets.\nFor example, we will be importing the .csv file you saw in the first slide named “candybars.csv”.\nIf we were to open this data in a plain text editor, we would be able to see each row on its own line, and each entry in the table separated by a comma."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#cereal-data",
    "href": "modules/module1/slides/module1_07.html#cereal-data",
    "title": "Slicing with Pandas Using .loc[]",
    "section": "Cereal Data",
    "text": "Cereal Data\n\nimport pandas as pd\n  \ncereal = pd.read_csv('data/cereal.csv')\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\nAttribution:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported\n\nCongratulations on writing your first code!\nWe have read in our data, and we know the dimensions. Well, now what?\nLet’s go over how we would index, slice, and select certain columns or rows of our data.\nLet’s start by importing pandas and loading in a dataset named cereal.csv, and we will save it as cereal.\nWe can see all the columns and the first 5 rows of the dataframe using .head()\nLet’s say we only want certain rows, however, of the dataframe or certain columns.\nWe talked about how .head() will generate the first few rows of a dataframe (5 as default), but what if we wanted the rows from 5-10?\nThe first column of this dataframe is called the index.\nEach row has a label (the index) as well as a position. In this case, the index label of an observation is the same as it’s position.\nThis doesn’t always have to be the case. We can assign another column as the index; however, we will wait to discuss this in the next module."
  },
  {
    "objectID": "modules/module1/slides/module1_13.html#unordered-indexing",
    "href": "modules/module1/slides/module1_13.html#unordered-indexing",
    "title": "Selecting Using .loc[]",
    "section": "Unordered Indexing",
    "text": "Unordered Indexing\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1\n1.0\n0.67\n49.787445\n\n\n75\nWheaties\nG\nCold\n100\n...\n1\n1.0\n1.00\n51.592193\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1\n1.0\n0.75\n36.187559\n\n\n\n\n77 rows × 16 columns\n\n\n\n\nHere we have our trusty cereal dataframe.\nWhat would we do if we wanted to select columns and rows that don’t fall consecutively or if we wanted to rearrange them?"
  },
  {
    "objectID": "modules/module1/slides/module1_24.html#sorting",
    "href": "modules/module1/slides/module1_24.html#sorting",
    "title": "Sorting Dataframes",
    "section": "Sorting",
    "text": "Sorting\n\ncereal.sort_values(by='rating')\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nshelf\nweight\ncups\nrating\n\n\n\n\n10\nCap'n'Crunch\nQ\n120\n2\n1.0\n0.75\n18.042851\n\n\n12\nCinnamon Toast Crunch\nG\n120\n2\n1.0\n0.75\n19.823573\n\n\n35\nHoney Graham Ohs\nQ\n120\n2\n1.0\n1.00\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65\nShredded Wheat spoon size\nN\n90\n1\n1.0\n0.67\n72.801787\n\n\n64\nShredded Wheat 'n'Bran\nN\n90\n1\n1.0\n0.67\n74.472949\n\n\n3\nAll-Bran with Extra Fiber\nK\n50\n3\n1.0\n0.50\n93.704912\n\n\n\n\n77 rows × 7 columns\n\n\n\n\nWhen we read in our data, it is generally ordered in the same way it is stored.\nWe can easily sort the rows of a dataframe based on the values within a column.\nThe verb that we use for that is .sort_values().\nFor example, if we wanted to order the cereals based on rating, we could do so by using the argument by within the .sort_values() verb.\nThis allows us to see the cereals with lower ratings on the top."
  },
  {
    "objectID": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "href": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "title": "Frequency Tables and Writing CSVs",
    "section": "Saving a dataframe",
    "text": "Saving a dataframe\n\nmfr_freq.to_csv('data/mfr_frequency.csv', index=False)\n\n\nSometimes it is useful to save a new dataframe to a file like a csv file for future use by you or somebody else.\nWe can do this using a method called .to_csv().\nWe put our desired csv file name in quotations within the parentheses and follow it with the argument index=False so we don’t export our index column which is just a column of numbers."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#summary",
    "href": "modules/module1/slides/module1_34.html#summary",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\nLoad the pandas library into Python.\nDemonstrate indexing and slicing with .loc[] and .iloc[].\nDemonstrate Selecting columns of a dataframe using df[] notation.\nObtain values from a dataframe using .loc[].\nSort a dataframe using .sort_values().\nCreate simple summary statistics using .describe().\nConstruct simple visualizations using Altair.\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#assignment-instructions",
    "href": "modules/module1/slides/module1_34.html#assignment-instructions",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Assignment Instructions",
    "text": "Assignment Instructions\nThe assignment will concentrate not only on the learning objectives above but also\n\nNavigating a Jupyter Notebook\nUnderstanding cells\nCreating Markdown cells and coding cells"
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#attribution",
    "href": "modules/module1/slides/module1_34.html#attribution",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module3/module3-01-what_is_tidy_data.html",
    "href": "modules/module3/module3-01-what_is_tidy_data.html",
    "title": "1. What is Tidy Data?",
    "section": "",
    "text": "1. What is Tidy Data?\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "1. What is Tidy Data?"
    ]
  },
  {
    "objectID": "modules/module3/module3-05-statistical_questions_and_tidy_data.html",
    "href": "modules/module3/module3-05-statistical_questions_and_tidy_data.html",
    "title": "2. Statistical Questions and Tidy Data",
    "section": "",
    "text": "2. Statistical Questions and Tidy Data\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "2. Statistical Questions and Tidy Data"
    ]
  },
  {
    "objectID": "modules/module3/module3-08-reshaping_with_pivot.html",
    "href": "modules/module3/module3-08-reshaping_with_pivot.html",
    "title": "3. Reshaping with Pivot",
    "section": "",
    "text": "3. Reshaping with Pivot\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "3. Reshaping with Pivot"
    ]
  },
  {
    "objectID": "modules/module3/module3-11-reshaping_with_pivot_table.html",
    "href": "modules/module3/module3-11-reshaping_with_pivot_table.html",
    "title": "4. Reshaping with Pivot Table",
    "section": "",
    "text": "4. Reshaping with Pivot Table\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "4. Reshaping with Pivot Table"
    ]
  },
  {
    "objectID": "modules/module3/module3-14-reshaping_with_melt.html",
    "href": "modules/module3/module3-14-reshaping_with_melt.html",
    "title": "5. Reshaping with Melt",
    "section": "",
    "text": "5. Reshaping with Melt\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "5. Reshaping with Melt"
    ]
  },
  {
    "objectID": "modules/module3/module3-17-concatenation.html",
    "href": "modules/module3/module3-17-concatenation.html",
    "title": "6. Concatenation",
    "section": "",
    "text": "6. Concatenation\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "6. Concatenation"
    ]
  },
  {
    "objectID": "modules/module3/module3-21-joining_dataframes_using_merge.html",
    "href": "modules/module3/module3-21-joining_dataframes_using_merge.html",
    "title": "7. Joining Dataframes using Merge",
    "section": "",
    "text": "7. Joining Dataframes using Merge\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "7. Joining Dataframes using Merge"
    ]
  },
  {
    "objectID": "modules/module3/module3-25-what_did_we_just_learn.html",
    "href": "modules/module3/module3-25-what_did_we_just_learn.html",
    "title": "8. What Did We Just Learn?",
    "section": "",
    "text": "8. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "8. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#what-is-the-concept-of-tidy-data",
    "href": "modules/module3/slides/module3_01.html#what-is-the-concept-of-tidy-data",
    "title": "Tidy Data",
    "section": "What is the concept of tidy data?",
    "text": "What is the concept of tidy data?\nTidy data satisfies the following three criteria:\n\nEach row is a single observation,\nEach variable is a single column, and\nEach value is a single cell (i.e., its row, column position in the dataframe is not shared with another value)\n\n\nImage Source: R for Data Science by Garrett Grolemund & Hadley Wickham\n\nWhat a variable and an observation is may depend on your immediate goal.\n\nWhen we first hear “tidy data”, you likely think of clean, organized, and orderly data. The same applies here, however, the concept of tidy data stems from a paper written by renowned data scientist Hadley Wickham in 2014.\nWe tidy our data in such a way so that we can create a standard across multiple analysis tools. It changes the focus from figuring out the logistics of how the data is structured, to answering the actual analysis question being asked.\nThis approach allows us to standardize input arguments of certain analysis verbs like .describe() and other predictive methods."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation",
    "href": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation",
    "title": "Tidy Data",
    "section": "Criterion #1: Each row is a single observation",
    "text": "Criterion #1: Each row is a single observation\n\n\nFrom the dataframe we can see that each cereal has its own row. Criterion #1 is met!"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column",
    "href": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column",
    "title": "Tidy Data",
    "section": "Criterion #2: Each variable is a single column",
    "text": "Criterion #2: Each variable is a single column\n\n\nFrom the dataframe we can see that each of the variables name, mfr, calories and protein have their own column. We can validate that criterion #2 is also met."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-3-each-value-is-a-single-cell",
    "href": "modules/module3/slides/module3_01.html#criterion-3-each-value-is-a-single-cell",
    "title": "Tidy Data",
    "section": "Criterion #3: Each value is a single cell",
    "text": "Criterion #3: Each value is a single cell\n\n\nThe variable value for each cereal has it’s own cell, confirming that criterion #3 is met!"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation-1",
    "href": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation-1",
    "title": "Tidy Data",
    "section": "Criterion #1 Each row is a single observation",
    "text": "Criterion #1 Each row is a single observation\n\n\nFrom the dataframe we can see that each observation has its own row. There are 2 rows per cereal but each row is unique.\nWe can confirm that criterion 1 is met."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column-1",
    "href": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column-1",
    "title": "Tidy Data",
    "section": "Criterion #2: Each variable is a single column",
    "text": "Criterion #2: Each variable is a single column\n\n\nIt looks like we have a problem here. In this dataframe, two of our variables we are measuring for our statistical question are contained in a single column. This is making the data untidy and potentially a problem to work with.\nFor example, what if I wanted to know the average calorie content of the cereals?"
  },
  {
    "objectID": "modules/module3/slides/module3_08.html#pivot",
    "href": "modules/module3/slides/module3_08.html#pivot",
    "title": "Reshaping with Pivot",
    "section": "Pivot",
    "text": "Pivot\n\n\n.pivot() can be used in situations to transform long dataframes into wider ones.\nConsider the dataframe below.\nHow can we convert it?"
  },
  {
    "objectID": "modules/module3/slides/module3_08.html#resetting-the-index",
    "href": "modules/module3/slides/module3_08.html#resetting-the-index",
    "title": "Reshaping with Pivot",
    "section": "Resetting the Index",
    "text": "Resetting the Index\n\ncereal_wide.head(5)\n\n\n\n\n\n\n\nnutrition\ncalories\nprotein\n\n\nname\n\n\n\n\n\n\nApple Jacks\n110\n2\n\n\nCheerios\n110\n6\n\n\nRaisin Bran\n120\n3\n\n\nSpecial K\n110\n6\n\n\nWheaties\n100\n3\n\n\n\n\n\n\n\n\n\ncereal_wide_messy = cereal_wide.reset_index()\ncereal_wide_messy.head(5)\n\n\n\n\n\n\n\nnutrition\nname\ncalories\nprotein\n\n\n\n\n0\nApple Jacks\n110\n2\n\n\n1\nCheerios\n110\n6\n\n\n2\nRaisin Bran\n120\n3\n\n\n3\nSpecial K\n110\n6\n\n\n4\nWheaties\n100\n3\n\n\n\n\n\n\n\n\nLet’s take a brief detour and discuss resetting the index. Here is our dataframe cereal_wide.\nWhile pivoting we transformed the name column as our index.\nWe can transform the name index back into a regular column by using the same reset_index() verb we learned when plotting grouped dataframes in module 2:"
  },
  {
    "objectID": "modules/module3/slides/module3_14.html#melt",
    "href": "modules/module3/slides/module3_14.html#melt",
    "title": "Reshaping with Melt",
    "section": "Melt",
    "text": "Melt\n\nmelted_cereal  = (cereal.melt(id_vars=['name', 'mfr'] , \n                              value_vars=['calories', 'protein'], \n                              var_name='nutrition', \n                              value_name='value')\n                  )\nmelted_cereal\n\n\n\n\n\n\n\n\nname\nmfr\nnutrition\nvalue\n\n\n\n\n0\nSpecial K\nK\ncalories\n110\n\n\n1\nApple Jacks\nK\ncalories\n110\n\n\n2\nRaisin Bran\nK\ncalories\n120\n\n\n...\n...\n...\n...\n...\n\n\n7\nRaisin Bran\nK\nprotein\n3\n\n\n8\nCheerios\nG\nprotein\n6\n\n\n9\nWheaties\nG\nprotein\n3\n\n\n\n\n10 rows × 4 columns\n\n\n\n\nLet’s attempt to melt the calories and protein columns into a single one named nutrition with the values expressed in a column named value.\nThis is the dataframe exactly like we started with when we used .pivot() in the last section.\nAfter melting, we can see that the rows are not quite in the same order as before, but we can agree that its what we want."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#introducing-the-data",
    "href": "modules/module3/slides/module3_21.html#introducing-the-data",
    "title": "Joining Dataframes using Merge",
    "section": "Introducing the Data",
    "text": "Introducing the Data\n\ncandy = pd.read_csv('data/candybars.csv', nrows=5, usecols=['name', 'weight', 'chocolate', 'peanuts'])\ncandy.head()\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\nWith .merge(), we need to identify a column in each dataframe that acts as a connection between them.\nIt’s a column where the values in Dataframe A are the same values to those in Dataframe B.\nIn the easiest situations both columns are named the same thing, but that doesn’t have to be the case.\nLet’s use a subset of the candy bars dataset to explain this concept further.\ncandy has a column labeled name which has unique candy bar names."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#key-columns",
    "href": "modules/module3/slides/module3_21.html#key-columns",
    "title": "Joining Dataframes using Merge",
    "section": "Key Columns",
    "text": "Key Columns\n.merge() needs arguments that identify a common key column. This is a column present in both dataframes which contain common values.\nTo choose our key columns in each dataframe, we use the following arguments:\n\nleft_on - The left dataframe identifying key column label.\nright_on - The right dataframe identifying key column label.\n\n\n.merge() needs arguments that identify a common key column. This is a column present in both dataframes which contain common values.\nKey columns do not need to be named identically.\nTo choose our key columns in each dataframe, we use the following arguments:\n\nleft_on - The left dataframe identifying key column label.\nright_on - The right dataframe identifying key column label.\n\nFor example:\nDataframe A can have a column labeled cereal, and Dataframe B could have a column labeled product_name that both share cereal names."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#how",
    "href": "modules/module3/slides/module3_21.html#how",
    "title": "Joining Dataframes using Merge",
    "section": "how",
    "text": "how\n\ncandy.merge(candy2m, left_on='name', right_on='chocolate_bar', how='inner')\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncalories\nfat\nsugar\nchocolate_bar\n\n\n\n\n0\nButterfinger\n184\n1\n1\n...\n798\n30.0\n72.0\nButterfinger\n\n\n1\nTwix\n58\n1\n0\n...\n250\n12.0\n25.0\nTwix\n\n\n\n\n2 rows × 9 columns\n\n\n\n\n\nThe how argument specifies “how” our dataframes are joined.\nWe mentioned that the default argument value inner will only keep the rows with identifying column values that are present in both dataframes."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#indicator",
    "href": "modules/module3/slides/module3_21.html#indicator",
    "title": "Joining Dataframes using Merge",
    "section": "indicator",
    "text": "indicator\n\ncandy.merge(candy2m, left_on='name', right_on='chocolate_bar', how='outer', indicator=True)\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\nfat\nsugar\nchocolate_bar\n_merge\n\n\n\n\n0\nNaN\nNaN\nNaN\nNaN\n...\n8.0\n40.0\n3 Musketeers\nright_only\n\n\n1\nNaN\nNaN\nNaN\nNaN\n...\n13.0\n32.0\nBabe Ruth\nright_only\n\n\n2\nButterfinger\n184.0\n1.0\n1.0\n...\n30.0\n72.0\nButterfinger\nboth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5\nSkor\n39.0\n1.0\n0.0\n...\nNaN\nNaN\nNaN\nleft_only\n\n\n6\nSmarties\n45.0\n1.0\n0.0\n...\nNaN\nNaN\nNaN\nleft_only\n\n\n7\nTwix\n58.0\n1.0\n0.0\n...\n12.0\n25.0\nTwix\nboth\n\n\n\n\n8 rows × 10 columns\n\n\n\n\nindicator makes a new column name _merge and informs us from which dataframe the row originated from.\nIf we want to do an outer join and show all the possible rows from both dataframes, there is a useful argument called indicator.\nHere we can see three possible values left_only, right_only, or both which informs us if the row came from the left dataframe, the right dataframe or if the row index label is shared between both dataframes."
  }
]