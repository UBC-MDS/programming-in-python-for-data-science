[
  {
    "objectID": "modules/module4/slides/module4_25.html#summary",
    "href": "modules/module4/slides/module4_25.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 4",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nCompare and contrast python’s key data types.\nCompare and contrast python’s key data structures.\nUse Python to determine the type and structure of an object.\nDemonstrate how to create data structures and convert them to another.\nIdentify which operations can be applied to different data types and columns dtypes.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module4/slides/module4_25.html#attribution",
    "href": "modules/module4/slides/module4_25.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 4",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module4/slides/module4_21.html#object-columns",
    "href": "modules/module4/slides/module4_21.html#object-columns",
    "title": "Operations with Columns",
    "section": "object columns",
    "text": "object columns\ncereal['mfr_type'].mean()\nTypeError: Could not convert 'N-ColdQ-ColdK-ColdK-ColdR-ColdG-ColdK-ColdG-ColdR-ColdP-ColdQ-ColdG-ColdG-ColdG-ColdG-ColdR-ColdK-ColdK-ColdG-ColdK-ColdN-HotK-ColdG-ColdR-ColdK-ColdK-ColdK-ColdP-ColdK-ColdP-ColdP-ColdG-ColdP-ColdP-ColdP-ColdQ-ColdG-ColdP-ColdK-ColdK-ColdG-ColdQ-ColdG-ColdA-HotR-ColdR-ColdK-ColdG-ColdK-ColdK-ColdK-ColdG-ColdP-ColdK-ColdQ-ColdQ-ColdQ-ColdQ-HotK-ColdG-ColdK-ColdR-ColdK-ColdN-ColdN-ColdN-ColdK-ColdK-ColdN-ColdG-ColdG-ColdG-ColdG-ColdG-ColdR-ColdG-ColdG-Cold' to numeric\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/python3.12/site-packages/pandas/core/series.py\", line 6549, in mean\n  ...\n\ncereal['mfr_type'].sum()\n\n'N-ColdQ-ColdK-ColdK-ColdR-ColdG-ColdK-ColdG-ColdR-ColdP-ColdQ-ColdG-ColdG-ColdG-ColdG-ColdR-ColdK-ColdK-ColdG-ColdK-ColdN-HotK-ColdG-ColdR-ColdK-ColdK-ColdK-ColdP-ColdK-ColdP-ColdP-ColdG-ColdP-ColdP-ColdP-ColdQ-ColdG-ColdP-ColdK-ColdK-ColdG-ColdQ-ColdG-ColdA-HotR-ColdR-ColdK-ColdG-ColdK-ColdK-ColdK-ColdG-ColdP-ColdK-ColdQ-ColdQ-ColdQ-ColdQ-HotK-ColdG-ColdK-ColdR-ColdK-ColdN-ColdN-ColdN-ColdK-ColdK-ColdN-ColdG-ColdG-ColdG-ColdG-ColdG-ColdR-ColdG-ColdG-Cold'\n\n\n\nWhat happens if we try to take summary statistics of some of the other columns?\nYikes! Let’s not take the mean of columns of dtype object.\nAs we saw before, taking a .sum() of a column concatenates the values together."
  },
  {
    "objectID": "modules/module4/slides/module4_21.html#bool",
    "href": "modules/module4/slides/module4_21.html#bool",
    "title": "Operations with Columns",
    "section": "Bool",
    "text": "Bool\n\ncereal['hot'].mean()\n\nnp.float64(0.03896103896103896)\n\n\n\nWhat about the column of type bool?\nSince Booleans are cast to 0 and 1 for True and False values respectively, we can take the sum of a column to obtain the total number of True values.\n.mean() works by summing up all the values and divides them by the total number of rows. In the case where the column is of dtype bool since True has a value of 1 and False has a value of 0, the mean is calculated as the total number of True values divided by the total number of True and False values. In other words, this gives you the fraction of cases that are True."
  },
  {
    "objectID": "modules/module4/slides/module4_21.html#axis-argument",
    "href": "modules/module4/slides/module4_21.html#axis-argument",
    "title": "Operations with Columns",
    "section": "Axis Argument",
    "text": "Axis Argument\n\ncereal.head(3)\n\n\n\n\n\n\n\n\nname\nmfr_type\ncalories\nprotein\n...\nfat\ncarbo\nrating\nhot\n\n\n\n\n0\n100% Bran\nN-Cold\n70\n4\n...\n1\n5.0\n68.402973\nFalse\n\n\n1\n100% Natural Bran\nQ-Cold\n120\n3\n...\n5\n8.0\n33.983679\nFalse\n\n\n2\nAll-Bran\nK-Cold\n70\n4\n...\n1\n7.0\n59.425505\nFalse\n\n\n\n\n3 rows × 9 columns\n\n\n\n\n\ncereal.loc[:, 'protein': 'carbo'].sum(axis=1)\n\n0     20.0\n1     18.0\n2     21.0\n      ... \n74    24.0\n75    24.0\n76    20.0\nLength: 77, dtype: float64\n\n\n\nWe are quite familiar with taking the mean and sum of entire columns now, but there are times where we want the mean or sum of the values in a row.\nPerhaps we wanted the total grams of protein,fiber, fat, and carbo for each cereal?\nRemember, when we discussed the argument axis in Module 3?\nWe can use it in our operations as well.\naxis=1 refers to the calculation being done for each row, across multiple columns, whereas axis=0 (which is the default for aggregation verbs) refers to the calculation for each column across multiple rows."
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#what-is-a-dataframe-again",
    "href": "modules/module4/slides/module4_14.html#what-is-a-dataframe-again",
    "title": "Dataframes, Series and Column dtypes",
    "section": "What is a Dataframe … again",
    "text": "What is a Dataframe … again\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nprotein\n...\nfat\ncarbo\nrating\nhot\n\n\n\n\n0\n100% Bran\nN\n70\n4\n...\n1\n5.0\n68.402973\nFalse\n\n\n1\n100% Natural Bran\nQ\n120\n3\n...\n5\n8.0\n33.983679\nFalse\n\n\n2\nAll-Bran\nK\n70\n4\n...\n1\n7.0\n59.425505\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\n100\n3\n...\n1\n17.0\n49.787445\nFalse\n\n\n75\nWheaties\nG\n100\n3\n...\n1\n17.0\n51.592193\nFalse\n\n\n76\nWheaties Honey Gold\nG\n110\n2\n...\n1\n16.0\n36.187559\nFalse\n\n\n\n\n77 rows × 9 columns\n\n\n\n\nSince the beginning of this module, we have explored basic Python Data types and structures. We’ve covered how they can be transformed into a dataframe, but that didn’t answer the lingering question:\n“What is and makes up a Pandas dataframe?”\nLet’s greet our cereal data back with a warm welcome."
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#pandas-series",
    "href": "modules/module4/slides/module4_14.html#pandas-series",
    "title": "Dataframes, Series and Column dtypes",
    "section": "Pandas Series",
    "text": "Pandas Series\n\ncereal['mfr']\n\n0     N\n1     Q\n2     K\n     ..\n74    R\n75    G\n76    G\nName: mfr, Length: 77, dtype: object\n\n\n\nA pandas Series is a one-dimensional array of values with an axis label, sort of like a list with a name attached to it.\nThis is the base data type that makes up a pandas dataframe.\nIn fact, the Pandas documentation” explains a dataframe as “a dict of Series objects”.\nLet’s look back at the series output again.\nWe can see additional information at the bottom.\nThe series contains the name of the column series, which is mfr , the length of the series, which is equal to 77, and a dtype equal to object.\nOk, we know what type is, but what is a dtype?"
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#what-is-a-dtype",
    "href": "modules/module4/slides/module4_14.html#what-is-a-dtype",
    "title": "Dataframes, Series and Column dtypes",
    "section": "What is a dtype?",
    "text": "What is a dtype?\n\n\n\nSo far, we know a dataframe is made up of a collection of series, and a series contains values, a label as well as some additional information regarding a dtype.\nJust like how objects have data types ( str, int, float, etc.), columns in a Pandas dataframe have types called dtypes.\nIn this course we are going to concentrate on the following dtypes."
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#non-numeric-dtypes",
    "href": "modules/module4/slides/module4_14.html#non-numeric-dtypes",
    "title": "Dataframes, Series and Column dtypes",
    "section": "Non-Numeric dtypes",
    "text": "Non-Numeric dtypes\n\n\n\nNon-numeric types can be a bit more complicated but let’s concentrate on the dtypes object and bool. We will be exploring datetime64 and timedelta[ns] in Module 8.\n\nobject is a dtype that contains str type values in the cells of the dataframe or that had a mixture of different types, to begin with. This is the “default” dtype when pandas is not quite sure what is the cell type values are or when there is a mixture of numeric and non-numeric value types.\nbool dtypes, just like its dtype name, contains Boolean values."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#sequences",
    "href": "modules/module4/slides/module4_05.html#sequences",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Sequences",
    "text": "Sequences\n\nsentence = \"I always lose at least one sock when I do laundry.\" \nwords = sentence.split()\nwords\n\n['I',\n 'always',\n 'lose',\n 'at',\n 'least',\n 'one',\n 'sock',\n 'when',\n 'I',\n 'do',\n 'laundry.']\n\n\n\n\nsentence.split(\"e\")\n\n['I always los', ' at l', 'ast on', ' sock wh', 'n I do laundry.']\n\n\n\nIn the last section, we discussed the string (str) data type.\nWe described it as a sequence of characters. In many cases, there is good reason to split up a long text string into separate ones. Luckily, we have a convenient verb to do that .split().\nThis verb then splits up the string into separate words.\nWe can change where to split the string as well.\nThis argument uses the character “e” to separate the string and discards the separator.\nWhy is it returned in square brackets, though?"
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#lists",
    "href": "modules/module4/slides/module4_05.html#lists",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Lists",
    "text": "Lists\n\nwords\n\n['I',\n 'always',\n 'lose',\n 'at',\n 'least',\n 'one',\n 'sock',\n 'when',\n 'I',\n 'do',\n 'laundry.']\n\n\n\ntype(words)\n\nlist\n\n\n\n\nmy_list = [1.2, 3, None, True, 'One of the lost socks']\nmy_list\n\n[1.2, 3, None, True, 'One of the lost socks']\n\n\n\nThe output from the .split() verb is called a list.\nSimilarly to how a string is a sequence of characters in order, a list is a sequence of elements with a particular order.\nLists can be identified by their square brackets.\nThe elements in a list can be any objects, and they don’t all need to have the same type."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#mutable-vs-immutable",
    "href": "modules/module4/slides/module4_05.html#mutable-vs-immutable",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Mutable vs Immutable",
    "text": "Mutable vs Immutable\n\nmy_list\n\n[1.2, 3, None, True, 'One of the lost socks']\n\n\n\n\nmy_list[2] = \"Ta Da!\"\n\n\n\nmy_list\n\n[1.2, 3, 'Ta Da!', True, 'One of the lost socks']\n\n\n\nNext, we’ll talk about mutable and immutable data types.\nAn object is mutable if it can be modified.\nLists are mutable, and we can assign new values for their various entries.\nFor example, we can edit any entry in this list and replace it with a new value."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#list-verbs",
    "href": "modules/module4/slides/module4_05.html#list-verbs",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "List Verbs",
    "text": "List Verbs\n\nprimes = [2,3,5,7,11]\n\n\n\nprimes.append(13)\nprimes\n\n[2, 3, 5, 7, 11, 13]\n\n\n\n\nmax(primes)\n\n13\n\n\n\n\nsum(primes)\n\n41\n\n\n\nLists have a variety of different methods for interacting with their data. Here are just a few.\nWe can add to the end of a list with append(). Notice how we didn’t need to write prime = and overwrite the prime object, because append modified primes directly.\nWe can find the maximum value in the list with max().\nAnd the sum of the list with sum()."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#lists-to-dataframes",
    "href": "modules/module4/slides/module4_05.html#lists-to-dataframes",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Lists to Dataframes",
    "text": "Lists to Dataframes\n\n\n\n\n\n\nitem\nlocation\nprice\n\n\n\n\n0\ntoothpaste\nLondon Drugs\n3.99\n\n\n1\napples\nProduce Store\n4.00\n\n\n2\nbread\nBakery\n3.50\n\n\n\n\n\n\nitem1 = ['toothpaste', 'London Drugs', 3.99]\nitem2 = ['apples', 'Produce Store', 4.00]\nitem3 = ['bread', 'Bakery', 3.50]\ncolumn_names = ['item', 'location', 'price']\n\nshopping_items = pd.DataFrame(data=[item1, item2, item3], columns=column_names)\nshopping_items\n\n\n\n\n\n\n\n\nitem\nlocation\nprice\n\n\n\n\n0\ntoothpaste\nLondon Drugs\n3.99\n\n\n1\napples\nProduce Store\n4.00\n\n\n2\nbread\nBakery\n3.50\n\n\n\n\n\n\n\n\n\ntype(shopping_items)\n\npandas.core.frame.DataFrame\n\n\n\nUp until this point, we have been working with dataframes that have been read in and converted from different types of files.\nHowever, we can also make dataframes from scratch using lists.\nLet’s say we wanted a dataframe of things we needed to purchase from the store on our next grocery shopping trip, as shown in the table here.\nWe can use a list for each row and a list for the column labels. We then use another list of all the rows to make up the data.\nNow the shopping items are no longer in a structure type list, but in a type DataFrame."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#tuples",
    "href": "modules/module4/slides/module4_05.html#tuples",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Tuples",
    "text": "Tuples\n\nmy_tuple = ('I', 'lose', None,  'socks', 'when', 1, 'do', 'laundry.', False)\nmy_tuple\n\n('I', 'lose', None, 'socks', 'when', 1, 'do', 'laundry.', False)\n\n\n\n\ntype(my_tuple)\n\ntuple\n\n\n\nTuples are a data structure very similar to lists but with two main differences:\n\nThey are represented with parentheses instead of square brackets, and\nThey are immutable"
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#sets",
    "href": "modules/module4/slides/module4_05.html#sets",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Sets",
    "text": "Sets\n\nmy_set = {2, 1.0, 'Buckle my shoe'}\nmy_set\n\n{1.0, 2, 'Buckle my shoe'}\n\n\n\n\nmy_set = {2, 1.0, 'Buckle my shoe', 1.0, 2}\nmy_set\n\n{1.0, 2, 'Buckle my shoe'}\n\n\n\nSets, not unlike lists and tuples, are a data structure that contains elements. Sets differ from lists and tuples in that:\n\nThey are unordered, meaning there is no element 0 and element 1, and\n\nThe values contained are unique - meaning there are no duplicate entries.\n\nLet’s explore this a bit.\nSets are made with curly brackets.\nYou’ll notice that the printed order is not the same as we inputted then in. That’s because sets do not preserve order.\nIf we have repeats of any entries, they only occur once in the set. This is useful if you want to keep track of a set of things, like who visited a store, and you’re not interested in repeat entries."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#all-together-now",
    "href": "modules/module4/slides/module4_05.html#all-together-now",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "All Together Now",
    "text": "All Together Now\n\n\n\n\n\n\n\n\n\n\n\nData Structure\npreserves order\nMutable\nSymbol\nCan contain duplicates\n\n\n\n\nstr\n✓\n☓\n'' or \"\"\n✓\n\n\nlist\n✓\n✓\n[]\n✓\n\n\ntuple\n✓\n☓\n()\n✓\n\n\nset\n☓\n✓\n{}\n☓\n\n\n\n\nWe have condensed the data structures characteristics into a convenient table for you."
  },
  {
    "objectID": "modules/module4/slides/module4_00.html#module-learning-outcomes",
    "href": "modules/module4/slides/module4_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nCompare and contrast Python’s key data types.\nCompare and contrast Python’s key data structures.\nUse Python to determine the type and structure of an object.\nDemonstrate how to create data structures and convert them to another.\nIdentify which operations can be applied to different data types and columns dtypes."
  },
  {
    "objectID": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html",
    "href": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s split up a column of dtype object.\nTasks:\n\nSplit up the column Birth Date into 3 separate columns named Birth_Day, Birth_Month and Birth_Year.\nName this new dataframe birthdate_df.\nSave these as columns in the canucks dataframe as dtype int.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using str.split('-', expand='True')?\n\nAre you saving the columns from the birthdate_df back to the canucks dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html#practice-operations-with-dataframe-columns",
    "href": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html#practice-operations-with-dataframe-columns",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s split up a column of dtype object.\nTasks:\n\nSplit up the column Birth Date into 3 separate columns named Birth_Day, Birth_Month and Birth_Year.\nName this new dataframe birthdate_df.\nSave these as columns in the canucks dataframe as dtype int.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using str.split('-', expand='True')?\n\nAre you saving the columns from the birthdate_df back to the canucks dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-22-whats_that_output_with_column_operations.html",
    "href": "modules/module4/module4-22-whats_that_output_with_column_operations.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Here is my dataframe named fruit_salad:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ncolour\nlocation\nseed\nshape\nsweetness\nwater-content\nweight\n\n\n\n\n0\napple\nred\ncanada\nTrue\nround\nTrue\n84\n100\n\n\n1\nbanana\nyellow\nmexico\nFalse\nlong\nTrue\n75\n120\n\n\n2\ncantaloupe\norange\nspain\nTrue\nround\nTrue\n90\n1360\n\n\n3\ndragon-fruit\nmegenta\nchina\nTrue\nround\nFalse\n96\n600\n\n\n4\nelderberry\npurple\naustria\nFalse\nround\nTrue\n80\n5\n\n\n5\nfig\npurple\nturkey\nFalse\noval\nFalse\n78\n40\n\n\n6\nguava\ngreen\nmexico\nTrue\noval\nTrue\n83\n450\n\n\n7\nhuckleberry\nblue\ncanada\nTrue\nround\nTrue\n73\n5\n\n\n8\nkiwi\nbrown\nchina\nTrue\nround\nTrue\n80\n76\n\n\n9\nlemon\nyellow\nmexico\nFalse\noval\nFalse\n83\n65",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-22-whats_that_output_with_column_operations.html#whats-that-output-with-column-operations",
    "href": "modules/module4/module4-22-whats_that_output_with_column_operations.html#whats-that-output-with-column-operations",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Here is my dataframe named fruit_salad:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ncolour\nlocation\nseed\nshape\nsweetness\nwater-content\nweight\n\n\n\n\n0\napple\nred\ncanada\nTrue\nround\nTrue\n84\n100\n\n\n1\nbanana\nyellow\nmexico\nFalse\nlong\nTrue\n75\n120\n\n\n2\ncantaloupe\norange\nspain\nTrue\nround\nTrue\n90\n1360\n\n\n3\ndragon-fruit\nmegenta\nchina\nTrue\nround\nFalse\n96\n600\n\n\n4\nelderberry\npurple\naustria\nFalse\nround\nTrue\n80\n5\n\n\n5\nfig\npurple\nturkey\nFalse\noval\nFalse\n78\n40\n\n\n6\nguava\ngreen\nmexico\nTrue\noval\nTrue\n83\n450\n\n\n7\nhuckleberry\nblue\ncanada\nTrue\nround\nTrue\n73\n5\n\n\n8\nkiwi\nbrown\nchina\nTrue\nround\nTrue\n80\n76\n\n\n9\nlemon\nyellow\nmexico\nFalse\noval\nFalse\n83\n65",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-19-output_or_error_with_operations.html",
    "href": "modules/module4/module4-19-output_or_error_with_operations.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Will the following operations result with an output or an error?\n['One', 'Two', 3] + (4, 'five', 6)\n\n\n\n\ntuple(['One', 'Two', 3]) + (4, 'five', 6)\n\n\n\n\ndictionary1 = {1: 'one', 2: 'two'}\ndictionary2 = {3: 'three', 4: 'four'}\n\ndictionary1 + dictionary2\n\n\n\n\nsum(['nine', 'ten', 'eleven', 'twelve'])\n\n\n\n\n'The monster under my bed' + [1, 2.0, 3, 4.5]\n\n\n\n\n\n\n\nWould the following result in a True of False value?\n('hotels' != 'homes') and 50 &lt; 5000\n\n\n\n\nnot ('hotels' != 'homes') \n\n\n\n\nnot not ('hotels' != 'homes')",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-19-output_or_error_with_operations.html#output-or-error-with-operations",
    "href": "modules/module4/module4-19-output_or_error_with_operations.html#output-or-error-with-operations",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Will the following operations result with an output or an error?\n['One', 'Two', 3] + (4, 'five', 6)\n\n\n\n\ntuple(['One', 'Two', 3]) + (4, 'five', 6)\n\n\n\n\ndictionary1 = {1: 'one', 2: 'two'}\ndictionary2 = {3: 'three', 4: 'four'}\n\ndictionary1 + dictionary2\n\n\n\n\nsum(['nine', 'ten', 'eleven', 'twelve'])\n\n\n\n\n'The monster under my bed' + [1, 2.0, 3, 4.5]",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-19-output_or_error_with_operations.html#true-or-false-with-boolean-operators",
    "href": "modules/module4/module4-19-output_or_error_with_operations.html#true-or-false-with-boolean-operators",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Would the following result in a True of False value?\n('hotels' != 'homes') and 50 &lt; 5000\n\n\n\n\nnot ('hotels' != 'homes') \n\n\n\n\nnot not ('hotels' != 'homes')",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-15-name_that_type_dtype.html",
    "href": "modules/module4/module4-15-name_that_type_dtype.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nRemember our canucks dataframe? Let’s take a closer look at the labels of the columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlayer\nNo.\nAge\nHeight\nWeight\nCountry\nPosition\nExperience\nBirth Date\nSalary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Question 1 (a)\n\n\n\n\nQuestion 1 (b)\nUse the coding cell below to check the dtype for the Salary column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 1 (c)\n\n\n\n\nQuestion 2 (a)\n\n\n\n\nQuestion 2 (b)\nUse the coding cell below to check the dtype for the Weight column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 2 (c)",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-15-name_that_type_dtype.html#dtype-practice",
    "href": "modules/module4/module4-15-name_that_type_dtype.html#dtype-practice",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nRemember our canucks dataframe? Let’s take a closer look at the labels of the columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlayer\nNo.\nAge\nHeight\nWeight\nCountry\nPosition\nExperience\nBirth Date\nSalary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Question 1 (a)\n\n\n\n\nQuestion 1 (b)\nUse the coding cell below to check the dtype for the Salary column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 1 (c)\n\n\n\n\nQuestion 2 (a)\n\n\n\n\nQuestion 2 (b)\nUse the coding cell below to check the dtype for the Weight column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 2 (c)",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-11-dictionary_questions.html",
    "href": "modules/module4/module4-11-dictionary_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nRecently Jeremy bought a new Ikea shoe rack. The packaging included quite a few parts and he is finding it hard to keep track!\nTasks:\n\nMake a dictionary that includes the quantity of each part included in the Ikea set.\n\nThe shoe rack contained the following parts:\n\n8 Long Screw\n8 Wood Dowel\n2 Short Screw\n1 Allen Key\nConstruct the dictionary so that the part names are the keys and the quantities of the parts, are the values for the dictionary.\nName the dictionary ikea_shoe_rack.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your dictionary properly?\nAre all your parts spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shoe rack was not the only thing Jeremy bought. below is a table of all his purchases.\n\n\n\n\nitem_name\ncollection\nprice\n\n\n\n\n0\nBistro Set\nAPPLARO\n216.98\n\n\n1\nShelf Unit\nHYLLIS\n11.99\n\n\n3\nShoe Rack\nTJUSIG\n29.99\n\n\n\nTasks:\n\nCreate the table above from a dictionary using pd.DataFrame.from_dict().\nName your new dataframe ikea_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using lists as the values in your dictionary?\nAre you making sure to use floats for the price?\nare all your items and collections spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-11-dictionary_questions.html#coding-questions",
    "href": "modules/module4/module4-11-dictionary_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nRecently Jeremy bought a new Ikea shoe rack. The packaging included quite a few parts and he is finding it hard to keep track!\nTasks:\n\nMake a dictionary that includes the quantity of each part included in the Ikea set.\n\nThe shoe rack contained the following parts:\n\n8 Long Screw\n8 Wood Dowel\n2 Short Screw\n1 Allen Key\nConstruct the dictionary so that the part names are the keys and the quantities of the parts, are the values for the dictionary.\nName the dictionary ikea_shoe_rack.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your dictionary properly?\nAre all your parts spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shoe rack was not the only thing Jeremy bought. below is a table of all his purchases.\n\n\n\n\nitem_name\ncollection\nprice\n\n\n\n\n0\nBistro Set\nAPPLARO\n216.98\n\n\n1\nShelf Unit\nHYLLIS\n11.99\n\n\n3\nShoe Rack\nTJUSIG\n29.99\n\n\n\nTasks:\n\nCreate the table above from a dictionary using pd.DataFrame.from_dict().\nName your new dataframe ikea_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using lists as the values in your dictionary?\nAre you making sure to use floats for the price?\nare all your items and collections spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-name_that_data_structure.html",
    "href": "modules/module4/module4-06-name_that_data_structure.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s explore how to add to a list, slice it and convert it into a tuple.\nTasks:\n\nUsing the list provided, add a pen, a scrap paper, a 7.3 and a True element.\nFind the length of the list after adding the element and save the value in an object named drawer_length.\nSlice the list from 4 to scrap paper and save this in an object named cleaned_junk_drawer.\nFinally, convert it into a set and name it junk_set.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nThe verbs .append() and len() may be handy.\nYou can convert your list to a tuple with `tuple().\nHave you sliced keeping in mind the end of the slice is excluded?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s use lists and convert them into a pandas dataframe.\nTasks:\n\nUse the lists given in the cell below to make a dataframe.\nName the dataframe family.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.DataFrame()?\nAre you using the arguments data and columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-name_that_data_structure.html#coding-questions",
    "href": "modules/module4/module4-06-name_that_data_structure.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s explore how to add to a list, slice it and convert it into a tuple.\nTasks:\n\nUsing the list provided, add a pen, a scrap paper, a 7.3 and a True element.\nFind the length of the list after adding the element and save the value in an object named drawer_length.\nSlice the list from 4 to scrap paper and save this in an object named cleaned_junk_drawer.\nFinally, convert it into a set and name it junk_set.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nThe verbs .append() and len() may be handy.\nYou can convert your list to a tuple with `tuple().\nHave you sliced keeping in mind the end of the slice is excluded?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s use lists and convert them into a pandas dataframe.\nTasks:\n\nUse the lists given in the cell below to make a dataframe.\nName the dataframe family.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.DataFrame()?\nAre you using the arguments data and columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-name_that_data_type.html",
    "href": "modules/module4/module4-02-name_that_data_type.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "For the next few questions, name the data type of each value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nHow many times do the lyrics “Let it be” occur in the Beatles Hit song of the same title?\nTasks:\n\nUse some of the string verbs you learned in the lecture to count all the times “let it be” (all upper and lower case versions) appears in the string lyrics.\nSave it in an object named letitbe_count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you converting lyrics to lowercase using .lower()?\nAre you using .count() with the argument let it be?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow can we cast from a string to an integer value?\nTasks:\n\nConvert string1 to a float in an object named pi.\nConvert the object pi now into an int named pi_slice.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using float()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using int()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-name_that_data_type.html#name-that-data-type",
    "href": "modules/module4/module4-02-name_that_data_type.html#name-that-data-type",
    "title": "1.1. Exercises",
    "section": "",
    "text": "For the next few questions, name the data type of each value.",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-name_that_data_type.html#coding-questions",
    "href": "modules/module4/module4-02-name_that_data_type.html#coding-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nHow many times do the lyrics “Let it be” occur in the Beatles Hit song of the same title?\nTasks:\n\nUse some of the string verbs you learned in the lecture to count all the times “let it be” (all upper and lower case versions) appears in the string lyrics.\nSave it in an object named letitbe_count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you converting lyrics to lowercase using .lower()?\nAre you using .count() with the argument let it be?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow can we cast from a string to an integer value?\nTasks:\n\nConvert string1 to a float in an object named pi.\nConvert the object pi now into an int named pi_slice.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using float()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using int()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-00-module_learning_outcomes.html",
    "href": "modules/module4/module4-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "href": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "title": "Summary Statistics",
    "section": "Numerical and Categorical Columns",
    "text": "Numerical and Categorical Columns\nCategorical data\nConsists of qualitative observations such as characteristics - things generally containing words.\nExamples\n\nColours\nNames\n\n\nNumerical data\nThese data are usually expressed with numbers.\nExamples\n\nMeasurements\nQuantities\n\n\nBefore we go further, let’s quickly discuss the 2 different types of data.\nCategorical data consists of qualitative observations such as characteristics - things generally containing names or words. Examples would be colours or names of things.\nNumerical data are usually expressed with numbers such as measurements or quantities.\nOur columns in our dataframe are considered one of the two of these."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#pandas-describe",
    "href": "modules/module1/slides/module1_26.html#pandas-describe",
    "title": "Summary Statistics",
    "section": "Pandas describe()",
    "text": "Pandas describe()\n\ncereal.describe()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\n\n\ncount\n77.000000\n77.000000\n77.000000\n77.000000\n...\n77.000000\n77.000000\n77.000000\n77.000000\n\n\nmean\n106.883117\n2.545455\n1.012987\n159.675325\n...\n2.207792\n1.029610\n0.821039\n42.665705\n\n\nstd\n19.484119\n1.094790\n1.006473\n83.832295\n...\n0.832524\n0.150477\n0.232716\n14.047289\n\n\nmin\n50.000000\n1.000000\n0.000000\n0.000000\n...\n1.000000\n0.500000\n0.250000\n18.042851\n\n\n25%\n100.000000\n2.000000\n0.000000\n130.000000\n...\n1.000000\n1.000000\n0.670000\n33.174094\n\n\n50%\n110.000000\n3.000000\n1.000000\n180.000000\n...\n2.000000\n1.000000\n0.750000\n40.400208\n\n\n75%\n110.000000\n3.000000\n2.000000\n210.000000\n...\n3.000000\n1.000000\n1.000000\n50.828392\n\n\nmax\n160.000000\n6.000000\n5.000000\n320.000000\n...\n3.000000\n1.500000\n1.500000\n93.704912\n\n\n\n\n8 rows × 13 columns\n\n\n\n\nPandas has a lot up its sleeve but one of the most useful methods is called .describe() and it does exactly that. it describes our data.\nLet’s try it out on our cereal dataset.\nBy default df.describe() only shows numerical columns."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "href": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Slicing Dataframe",
    "text": "Slicing Dataframe\n\ncereal = pd.read_csv('data/cereal.csv')\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nUp until point, we have been manipulating our dataframe with column and row labels using .loc[].\nSlicing can also be done by the location position of each row with .iloc[].\n.iloc[] is very similar to .loc[], however, the “i” in iloc refers to the index integer position.\nWe are going to return to our cereal dataset and take a look at the first 10 rows.\nLet’s say we want the rows from All-Bran to Apple Cinnamon Cheerios, but we want to slice based on their position instead of their label.\nUsing Python’s counting method of starting at zero, we conclude that All-Bran to be at position to 2.\nWe get Apple Cinnamon Cheerios position to be 5 in the same way.\nWe are lucky with this dataframe because our index labels match the position of the rows, and this makes things a little bit simpler."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "href": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Selecting with .iloc[]",
    "text": "Selecting with .iloc[]\n\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\n\n\n\n\n\n\nRow\nRow Position\n\n\n\n\nAlmond Delight\nPosition 4\n\n\nBasic 4\nPosition 7\n\n\nApple Jacks\nPosition 6\n\n\n\n\n\n\n\n\n\n\n\n\nColumns\nColumn Position\n\n\n\n\nname\nPosition 0\n\n\ncalories\nPosition 3\n\n\nfat\nPosition 5\n\n\ntype\nPosition 2\n\n\n\n\n\n\n\n\nSelecting using .iloc[] is done identically to .loc[], however, the items within each set of square brackets MUST be integers, and not in quotation marks.\nLet’s say we want the rows Almond Delight, Basic 4 and Apple Jacks with the columns name, calories, fat and type and in that specific order."
  },
  {
    "objectID": "modules/module1/slides/module1_11.html#so-far",
    "href": "modules/module1/slides/module1_11.html#so-far",
    "title": "Slicing Only Columns Using .loc[]",
    "section": "So Far",
    "text": "So Far\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\n\ncereal.loc['row name start':'row name end', 'column name start':'column name end']\n\nIf we aren’t slicing any columns, but we are slicing rows we can shorten that to\n\ndf.loc['row name start':'row name end']\n\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify we want all the row first with just a colon : followed by interval of the columns:\n\ndf.loc[:, 'column name start':'column name end']\n\nWe can read : as “to”.\nIf the indices are labeled with numbers, we do not need “quotations” when calling them. This is only when the labels are using letters.\n\n\nLet’s talk about what we have covered so far.\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\nIf we are not slicing any columns, but we are slicing rows we only need to specify the row labels.\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify rows first and therefore we would need to make it clear with a colon first that we are slicing all the rows followed by the column labels.\nWe can read : as “to”.\nAnd finally, if the row index is labeled with numbers, we do not need “quotations” when slicing."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#importing-pandas",
    "href": "modules/module1/slides/module1_03.html#importing-pandas",
    "title": "What is Pandas?",
    "section": "Importing pandas",
    "text": "Importing pandas\n\nimport pandas as pd\n\n\nTo analyze dataframes and load these csv files, we need to make sure that we bring in the pandas library into Python.\nBefore we start writing any valuable code for loading data and doing data analysis we need to import it with the following code."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#reading-in-data",
    "href": "modules/module1/slides/module1_03.html#reading-in-data",
    "title": "What is Pandas?",
    "section": "Reading in Data",
    "text": "Reading in Data\n\ncandy = pd.read_csv('data/candybars.csv')\n\n\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\nBoth\n\n\n\n\n25 rows × 6 columns\n\n\n\n\nNext we can bring in our data named candybars which is stored as a .csv file.\nLet’s break this up:\n\npd is the short form for pandas, which we are using to manipulate our dataframe.\n\nread_csv() is the tool that does the job and, in this case, it is reading in the csv file named candybars.csv.\n\ncandy is The dataframe is now saved as an object called candy.\n\nThe dataframe is stored in an object named candy and we can inspect in by “calling” the object name.\nIn these slides we can differentiate between the code that we typed in with a light grey background and it’s output which has a dark grey background.\nFrom this dataframe, we can see that there are 25 different candy bars and 6 columns."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "href": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "title": "What is Pandas?",
    "section": "Functions/Methods and Attributes",
    "text": "Functions/Methods and Attributes\n\nAttributes\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\n\nFunctions\nIn the example of pd.read_csv(), this function does the action of reading in our data.\n\nSomething you may have noticed is that when we use pd.read_csv() we put our instructions within the parentheses, whereas, when we use .shape or .head() the object that we are operating on comes before our desired command.\nIn Python, we use functions, methods and attributes. These are special words in Python that take instructions (we call these arguments) and do something.\nAttributes can be distinguished from methods and functions as they do not have parentheses.\nThey can be thought of as nouns or adjectives that describe an object.\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\nFunctions and methods have parentheses.\nThey can be thought of as verbs that complete an action.\nIn the example of pd.read_csv(), this function does the action of reading in our data.\nThis is going to be discussed in more detail later in the course but now, simply be aware of the way we write the different instructions."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#comments",
    "href": "modules/module1/slides/module1_03.html#comments",
    "title": "What is Pandas?",
    "section": "Comments",
    "text": "Comments\n\n# This line does not execute anything. \n\n\n\ncandy.shape  # This will output the shape of the dataframe\n\n\nWhile we write code, it’s often useful to annotate it or include information for humans that we do not want to executed.\nThe easiest way to do this is with a hash (#) symbol. This creates a single line comment and prevents anything written after it from being executed by Python.\nWe use comments frequently in the exercises to help you understand what to do and what our intentions are.\nIt’s good practice to use them to explain our code so if we or someone else wants to read it at a later date, it’s easier to understand."
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\n\nLoad the pandas library into Python.\n\nDemonstrate indexing and slicing with .loc[] and .iloc[].\n\nDemonstrate Selecting columns of a dataframe using df[] notation.\n\nObtain values from a dataframe using .loc[].\n\nSort a dataframe using .sort_values().\n\nCreate simple summary statistics using .describe().\n\nConstruct simple visualizations using Altair.\n\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html",
    "href": "modules/module1/module1-32-practicing_bar_charts.html",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nYou are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOk, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "title": "12.1. Exercises",
    "section": "",
    "text": "You are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Ok, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html",
    "href": "modules/module1/module1-25-practice_sorting.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "href": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html",
    "href": "modules/module1/module1-19-practicing_selecting.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "href": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html",
    "href": "modules/module1/module1-17-practicing_selecting_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "href": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html",
    "href": "modules/module1/module1-12-slicing_columns_only.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "href": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html",
    "href": "modules/module1/module1-04-definitions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html#coding-questions",
    "href": "modules/module1/module1-04-definitions.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module_learning_outcomes.html",
    "href": "modules/module1/module1-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Programming in Python for Data Science!",
    "section": "",
    "text": "Welcome to Programming in Python for Data Science!\nThis course is part of the Key Capabilities for Data Science program and will teach you how to conduct data analysis in Python. During the course, you will work with powerful Python packages made for data-science, including Pandas for processing tabular data, Altair for data visualization and NumPy for working with numerical data types.\nYou will also learn about iteration, flow control, and the data types relevant to data exploration and analysis. You will leave this course capable of processing raw data into a format suitable for analysis, writing your own analysis functions, and deriving data-driven insights via the creation of interactive visualizations and summary tables.\nCourse prerequisites: None",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "0. Welcome!"
    ]
  },
  {
    "objectID": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "href": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "title": "1. Programming in Python for Data Science",
    "section": "",
    "text": "1. Programming in Python for Data Science\n\nVideoSlides",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "1. Programming in Python for Data Science"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\n\nDefine tidy data and explain why it is an optimal format for data analysis.\nTransform data into the tidy data format using pandas.\nDemonstrate fundamental programming concepts such as loops and conditionals.\nUnderstand the key data structures in Python.\nRead data into Python data from vanilla (e.g., .csv) and non-standard plain text files, as well as common spreadsheet file types (e.g., .xls).\nConstruct simple plots using Altair\nManipulate a single data table by:\n7.1 Filtering rows based on a criterion or combination of criteria.\n7.2 Selecting variables.\n7.3 Creating new variables and modifying pre-existing ones.\n7.4 Rearranging the observations or variables by sorting.\n\nManage and manipulate data with dates and times, missing values and categorical variables as well as renaming dataframe columns.\nProduce human-readable code that incorporates best practices of programming and coding style."
  },
  {
    "objectID": "modules/module1/module1-01-introduction_to_dataframes.html",
    "href": "modules/module1/module1-01-introduction_to_dataframes.html",
    "title": "1. Introduction to Dataframes",
    "section": "",
    "text": "1. Introduction to Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "1. Introduction to Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-introduction_to_pandas.html",
    "href": "modules/module1/module1-03-introduction_to_pandas.html",
    "title": "2. Introduction to Pandas",
    "section": "",
    "text": "2. Introduction to Pandas\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "2. Introduction to Pandas"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "href": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "title": "3. Slicing with Pandas Using .loc[]",
    "section": "",
    "text": "3. Slicing with Pandas Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "3. Slicing with Pandas Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "href": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "title": "4. Slicing Columns Using .loc[]",
    "section": "",
    "text": "4. Slicing Columns Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "4. Slicing Columns Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-13-selecting_using_.loc[].html",
    "href": "modules/module1/module1-13-selecting_using_.loc[].html",
    "title": "5. Selecting Using .loc[]",
    "section": "",
    "text": "5. Selecting Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "5. Selecting Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "href": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "title": "6. Obtaining Dataframe Values",
    "section": "",
    "text": "6. Obtaining Dataframe Values\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "6. Obtaining Dataframe Values"
    ]
  },
  {
    "objectID": "modules/module1/module1-18-selecting_a_single_column.html",
    "href": "modules/module1/module1-18-selecting_a_single_column.html",
    "title": "7. Selecting a Single Column",
    "section": "",
    "text": "7. Selecting a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "7. Selecting a Single Column"
    ]
  },
  {
    "objectID": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "href": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "title": "8. Slicing and Selecting Using df.iloc[]",
    "section": "",
    "text": "8. Slicing and Selecting Using df.iloc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "8. Slicing and Selecting Using df.iloc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-24-sorting_dataframes.html",
    "href": "modules/module1/module1-24-sorting_dataframes.html",
    "title": "9. Sorting Dataframes",
    "section": "",
    "text": "9. Sorting Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "9. Sorting Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-26-summary_statistics.html",
    "href": "modules/module1/module1-26-summary_statistics.html",
    "title": "10. Summary Statistics",
    "section": "",
    "text": "10. Summary Statistics\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "10. Summary Statistics"
    ]
  },
  {
    "objectID": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "href": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "title": "11. Frequency Tables and Writing CSVs",
    "section": "",
    "text": "11. Frequency Tables and Writing CSVs\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "11. Frequency Tables and Writing CSVs"
    ]
  },
  {
    "objectID": "modules/module1/module1-31-quick_viz_with_altair.html",
    "href": "modules/module1/module1-31-quick_viz_with_altair.html",
    "title": "12. Quick Viz with Altair",
    "section": "",
    "text": "12. Quick Viz with Altair\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "12. Quick Viz with Altair"
    ]
  },
  {
    "objectID": "modules/module1/module1-34-what_did_we_just_learn.html",
    "href": "modules/module1/module1-34-what_did_we_just_learn.html",
    "title": "13. What Did We Just Learn?",
    "section": "",
    "text": "13. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "13. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "href": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "title": "What is a dataframe?",
    "section": "What is a dataframe?",
    "text": "What is a dataframe?\n\n\nOften, the first thing we need to do in data analysis is to load in data.\nIn this case, we will be using the programming language Python.\nWhen we bring spreadsheet-like data, into Python, it is generally shaped like a rectangle (think of Microsoft Excel tables for example) it is represented as what we call a dataframe object. It is very similar to a spreadsheet."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "href": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "title": "What is a dataframe?",
    "section": "What is a CSV file?",
    "text": "What is a CSV file?\n\n\n\nThe first kind of data we will learn how to load into Python as a dataframe is the spreadsheet-like comma-separated values format (.csv for short).\nThese files have names ending in .csv, and can be opened open and saved from common spreadsheetlike programs like Microsoft Excel and Google Sheets.\nFor example, we will be importing the .csv file you saw in the first slide named “candybars.csv”.\nIf we were to open this data in a plain text editor, we would be able to see each row on its own line, and each entry in the table separated by a comma."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#cereal-data",
    "href": "modules/module1/slides/module1_07.html#cereal-data",
    "title": "Slicing with Pandas Using .loc[]",
    "section": "Cereal Data",
    "text": "Cereal Data\n\nimport pandas as pd\n  \ncereal = pd.read_csv('data/cereal.csv')\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\nAttribution:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported\n\nCongratulations on writing your first code!\nWe have read in our data, and we know the dimensions. Well, now what?\nLet’s go over how we would index, slice, and select certain columns or rows of our data.\nLet’s start by importing pandas and loading in a dataset named cereal.csv, and we will save it as cereal.\nWe can see all the columns and the first 5 rows of the dataframe using .head()\nLet’s say we only want certain rows, however, of the dataframe or certain columns.\nWe talked about how .head() will generate the first few rows of a dataframe (5 as default), but what if we wanted the rows from 5-10?\nThe first column of this dataframe is called the index.\nEach row has a label (the index) as well as a position. In this case, the index label of an observation is the same as it’s position.\nThis doesn’t always have to be the case. We can assign another column as the index; however, we will wait to discuss this in the next module."
  },
  {
    "objectID": "modules/module1/slides/module1_13.html#unordered-indexing",
    "href": "modules/module1/slides/module1_13.html#unordered-indexing",
    "title": "Selecting Using .loc[]",
    "section": "Unordered Indexing",
    "text": "Unordered Indexing\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1\n1.0\n0.67\n49.787445\n\n\n75\nWheaties\nG\nCold\n100\n...\n1\n1.0\n1.00\n51.592193\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1\n1.0\n0.75\n36.187559\n\n\n\n\n77 rows × 16 columns\n\n\n\n\nHere we have our trusty cereal dataframe.\nWhat would we do if we wanted to select columns and rows that don’t fall consecutively or if we wanted to rearrange them?"
  },
  {
    "objectID": "modules/module1/slides/module1_24.html#sorting",
    "href": "modules/module1/slides/module1_24.html#sorting",
    "title": "Sorting Dataframes",
    "section": "Sorting",
    "text": "Sorting\n\ncereal.sort_values(by='rating')\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nshelf\nweight\ncups\nrating\n\n\n\n\n10\nCap'n'Crunch\nQ\n120\n2\n1.0\n0.75\n18.042851\n\n\n12\nCinnamon Toast Crunch\nG\n120\n2\n1.0\n0.75\n19.823573\n\n\n35\nHoney Graham Ohs\nQ\n120\n2\n1.0\n1.00\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65\nShredded Wheat spoon size\nN\n90\n1\n1.0\n0.67\n72.801787\n\n\n64\nShredded Wheat 'n'Bran\nN\n90\n1\n1.0\n0.67\n74.472949\n\n\n3\nAll-Bran with Extra Fiber\nK\n50\n3\n1.0\n0.50\n93.704912\n\n\n\n\n77 rows × 7 columns\n\n\n\n\nWhen we read in our data, it is generally ordered in the same way it is stored.\nWe can easily sort the rows of a dataframe based on the values within a column.\nThe verb that we use for that is .sort_values().\nFor example, if we wanted to order the cereals based on rating, we could do so by using the argument by within the .sort_values() verb.\nThis allows us to see the cereals with lower ratings on the top."
  },
  {
    "objectID": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "href": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "title": "Frequency Tables and Writing CSVs",
    "section": "Saving a dataframe",
    "text": "Saving a dataframe\n\nmfr_freq.to_csv('data/mfr_frequency.csv', index=False)\n\n\nSometimes it is useful to save a new dataframe to a file like a csv file for future use by you or somebody else.\nWe can do this using a method called .to_csv().\nWe put our desired csv file name in quotations within the parentheses and follow it with the argument index=False so we don’t export our index column which is just a column of numbers."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#summary",
    "href": "modules/module1/slides/module1_34.html#summary",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\nLoad the pandas library into Python.\nDemonstrate indexing and slicing with .loc[] and .iloc[].\nDemonstrate Selecting columns of a dataframe using df[] notation.\nObtain values from a dataframe using .loc[].\nSort a dataframe using .sort_values().\nCreate simple summary statistics using .describe().\nConstruct simple visualizations using Altair.\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#assignment-instructions",
    "href": "modules/module1/slides/module1_34.html#assignment-instructions",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Assignment Instructions",
    "text": "Assignment Instructions\nThe assignment will concentrate not only on the learning objectives above but also\n\nNavigating a Jupyter Notebook\nUnderstanding cells\nCreating Markdown cells and coding cells"
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#attribution",
    "href": "modules/module1/slides/module1_34.html#attribution",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module4/module4-01-python_data_types.html",
    "href": "modules/module4/module4-01-python_data_types.html",
    "title": "1. Python Data Types",
    "section": "",
    "text": "1. Python Data Types\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "1. Python Data Types"
    ]
  },
  {
    "objectID": "modules/module4/module4-05-python_data_structures:_lists_tuples_and_sets.html",
    "href": "modules/module4/module4-05-python_data_structures:_lists_tuples_and_sets.html",
    "title": "2. Python Data Structures: Lists, Tuples and Sets",
    "section": "",
    "text": "2. Python Data Structures: Lists, Tuples and Sets\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "2. Python Data Structures: Lists, Tuples and Sets"
    ]
  },
  {
    "objectID": "modules/module4/module4-10-python_data_structures:_dictionaries.html",
    "href": "modules/module4/module4-10-python_data_structures:_dictionaries.html",
    "title": "3. Python Data Structures: Dictionaries",
    "section": "",
    "text": "3. Python Data Structures: Dictionaries\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "3. Python Data Structures: Dictionaries"
    ]
  },
  {
    "objectID": "modules/module4/module4-14-dataframes_series_and_column_dtypes.html",
    "href": "modules/module4/module4-14-dataframes_series_and_column_dtypes.html",
    "title": "4. Dataframes, Series and Column dtypes",
    "section": "",
    "text": "4. Dataframes, Series and Column dtypes\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "4. Dataframes, Series and Column dtypes"
    ]
  },
  {
    "objectID": "modules/module4/module4-18-python_operations.html",
    "href": "modules/module4/module4-18-python_operations.html",
    "title": "5. Python Operations",
    "section": "",
    "text": "5. Python Operations\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "5. Python Operations"
    ]
  },
  {
    "objectID": "modules/module4/module4-21-operations_with_columns.html",
    "href": "modules/module4/module4-21-operations_with_columns.html",
    "title": "6. Operations with Columns",
    "section": "",
    "text": "6. Operations with Columns\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "6. Operations with Columns"
    ]
  },
  {
    "objectID": "modules/module4/module4-23-splitting_a_column.html",
    "href": "modules/module4/module4-23-splitting_a_column.html",
    "title": "7. Splitting a Column",
    "section": "",
    "text": "7. Splitting a Column\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "7. Splitting a Column"
    ]
  },
  {
    "objectID": "modules/module4/module4-25-what_did_we_just_learn.html",
    "href": "modules/module4/module4-25-what_did_we_just_learn.html",
    "title": "8. What Did We Just Learn?",
    "section": "",
    "text": "8. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "8. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#values-and-objects",
    "href": "modules/module4/slides/module4_01.html#values-and-objects",
    "title": "Python Data Types",
    "section": "Values and Objects",
    "text": "Values and Objects\n\nWe have been working with values, which are pieces of data that a computer program works with, such as a number or text.\nWe have been assigning a lot of these values (with the assignment operator =) to objects.\n\n\npet = 'Fido' \npet\n\n'Fido'\n\n\n\n\nage = 6\nage\n\n6\n\n\n\nIn the last few sections, you may have had questions like:\n“Why are some values in quotation marks while others are not?”,\n“What are these square brackets we keep using in our verb arguments?” or\n“Why can we take the mean of some columns and not others?” .\nWe’ll be answering these questions in this module.\nPython needs to categorize things to make sense of them.\nLet’s start with some basics.\nIn these cases, pet and age are objects, and Fido and 6 are values.\nThese objects can be named anything that begins with a letter and is not “special python words” like range, for, if, else, etc. (we will talk about some of those in the next module)."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#data-types",
    "href": "modules/module4/slides/module4_01.html#data-types",
    "title": "Python Data Types",
    "section": "Data Types",
    "text": "Data Types\nHere are some data types built-in to the Python language:\n\nIntegers - int\nFloating-point numbers - float\nStrings - str\nBooleans -bool\nLists - list\nTuples - tuple\nSets - set\nDictionaries - dict\n\n\nValues, as we saw in our Fido and 6 examples, can be a variety of different things that get classified by Python as data types."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#numerical-data-types",
    "href": "modules/module4/slides/module4_01.html#numerical-data-types",
    "title": "Python Data Types",
    "section": "Numerical Data Types",
    "text": "Numerical Data Types\nInt\n\nage = 6 \ntype(age)\n\nint\n\n\n\nFloat\n\nage = 6.0\ntype(age)\n\nfloat\n\n\n\nYou’ve likely noticed that we have not needed to put any quotation marks around number values. Python recognizes numbers as one of two possible types.\nEither as an integer called an int type or a floating-point number called a float.\nAn int value is a whole number that is either positive, negative, or zero.\nWe can use the verb type() to find out how Python classifies the value that is stored in an object.\n6 is of type int.\nA float value is a real number in decimal form. That means even if we have a whole number if it contains a decimal point, it is considered a float.\nIn contrast, 6.0 is if type float."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#nan",
    "href": "modules/module4/slides/module4_01.html#nan",
    "title": "Python Data Types",
    "section": "NaN",
    "text": "NaN\n\nweather\n\n\n\n\n\n\n\n\nmonth\nseason\n31st\n\n\n\n\n0\nfebruary\nwinter\nNaN\n\n\n1\nmarch\nspring\n31.0\n\n\n2\nmarch\nspring\nNaN\n\n\n\n\n\n\n\n\n\nnan_value = weather.loc[2,'31st']\nnan_value\n\nnp.float64(nan)\n\n\n\n\ntype(nan_value)\n\nnumpy.float64\n\n\n\nSomething you may have noticed in our Pandas dataframes are NaN values.\nThis stands for Not A Number, and it is a special value used to represent missing data in pandas.\nContrary to its acronym, it is considered a numeric value, specifically of type float!\nIgnore the numpy and 64 for now and concentrate on the float classification for now. We will be discussing NumPy more in Module 8.\nUnlike other values, NaN cannot be converted to any other type other than a float."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#nonetype",
    "href": "modules/module4/slides/module4_01.html#nonetype",
    "title": "Python Data Types",
    "section": "NoneType",
    "text": "NoneType\n\nname_of_bed_monster = None\n\n\n\ntype(name_of_bed_monster)\n\nNoneType\n\n\n\nUnlike NaN which is a special float value, NoneType is its own type, with only one possible value, None.\nLet’s say we need to save the name of the monster living under my bed in an object. Unfortunately, we have yet to introduce ourselves to him, so we are not sure what his name is. We also need to keep track that we are missing this information.\nWe’ve seen this data type in our assignments when we replace the None provided with our solution. Since we still need to have the object created for the structure of our assignments, we simply use None to indicate the object exists but is devoid of information."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#booleans",
    "href": "modules/module4/slides/module4_01.html#booleans",
    "title": "Python Data Types",
    "section": "Booleans",
    "text": "Booleans\nThe Boolean (bool) type has two values: True and False.\n\ntype(False)\n\nbool\n\n\n\n\nweather\n\n\n\n\n\n\n\n\nmonth\nseason\n31st\n\n\n\n\n0\nfebruary\nwinter\nNaN\n\n\n1\nmarch\nspring\n31.0\n\n\n2\nmarch\nspring\nNaN\n\n\n\n\n\n\n\n\n\nweather['season'] == 'winter'\n\n0     True\n1    False\n2    False\nName: season, dtype: bool\n\n\n\nThe Boolean type has two values: True and False. As you can see at the top, the value False is of type bool for Boolean.\nWe have seen this data type when we were filtering our dataframes with conditions.\nIn pandas, a condition is evaluated and produces a column indicating whether the condition was met or not for each row.\nThis column is a Boolean type."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#strings",
    "href": "modules/module4/slides/module4_01.html#strings",
    "title": "Python Data Types",
    "section": "Strings",
    "text": "Strings\n\nSingle quotes, e.g., 'Hello'\nDouble quotes, e.g., \"Goodbye\"\nTriple single quotes, e.g., '''Yesterday'''\nTriple double quotes, e.g., \"\"\"Tomorrow\"\"\"\n\n\nname_of_bed_monster = 'Mike Wazowski'\nname_of_bed_monster\n\n'Mike Wazowski'\n\n\n\n\nname_of_bed_monster = \"Mike Wazowski\"\nname_of_bed_monster\n\n'Mike Wazowski'\n\n\n\n\nname_of_bed_monster = \"\"\"Mike Wazowski\"\"\"\nname_of_bed_monster\n\n'Mike Wazowski'\n\n\n\nText is stored as a data type called a string (str).\nWe think of a string as a sequence of characters enclosed in some form of quotations.\nWe’ve been mostly using single quotations for strings up until this point, but you can enclose them with different types of quotation marks, as shown here."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#string-verbs",
    "href": "modules/module4/slides/module4_01.html#string-verbs",
    "title": "Python Data Types",
    "section": "String Verbs",
    "text": "String Verbs\nThere are A variety of different methods to transform strings or extract information from them.\n\nname_of_bed_monster = 'Mike Wazowski'\n\n\nlen():\n\n\nlen(name_of_bed_monster)\n\n13\n\n\n\n.upper():\n\n\nname_of_bed_monster.upper()\n\n'MIKE WAZOWSKI'\n\n\n\n.lower():\n\n\nname_of_bed_monster.lower()\n\n'mike wazowski'\n\n\n\nThere are A variety of different methods to transform strings or extract information from them. Here are a few of them.\n\nWe can obtain the number of characters in a string with len().\nWe can change the cases to capitals with .upper().\nOr change the cases to lower case with .lower()."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#casting",
    "href": "modules/module4/slides/module4_01.html#casting",
    "title": "Python Data Types",
    "section": "Casting",
    "text": "Casting\n\nint to float:\n\n\nnumber_of_floating_balloons = float(5)\ntype(number_of_floating_balloons)\n\nfloat\n\n\n\nAn int to a str:\n\n\nnumber_of_balloon_strings = str(5)\ntype(number_of_balloon_strings)\n\nstr\n\n\n\nfloat to an int (it will round down to the nearest full integer).\n\n\nnumber_of_balloons = int(4.99)\nnumber_of_balloons\n\n4\n\n\n\nSometimes we need to explicitly transform an object from one type to another, which is called casting.\nWe can do this for some types, but not all.\nTo cast an object to a new type, we use verbs corresponding to the desired type, such as int(), float(), bool() or str()."
  },
  {
    "objectID": "modules/module4/slides/module4_10.html#dictionaries",
    "href": "modules/module4/slides/module4_10.html#dictionaries",
    "title": "Python Data Structures: Dictionaries",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is a map between key-value pairs.\n\nFor example:\nA house can have 3 bedrooms.\n‘bedrooms’ is the key, and the number of bedrooms is the value.\n\nHow does this look in terms of a data structure?\n\nhouse = {'bedrooms': 3}\nhouse\n\n{'bedrooms': 3}\n\n\n\nDictionaries are used in different languages to look up definitions of words.\nPython has a data structure by the same name that replicates this “lookup” action.\nFor example:\nA house can have 3 bedrooms. Bedroom is called the key, and the number of bedrooms is called the value.\nHow does this look in terms of a data structure?\nWe use curly brackets and a colon that separates the key and its value."
  },
  {
    "objectID": "modules/module4/slides/module4_10.html#dictionaries-to-dataframes",
    "href": "modules/module4/slides/module4_10.html#dictionaries-to-dataframes",
    "title": "Python Data Structures: Dictionaries",
    "section": "Dictionaries to Dataframes",
    "text": "Dictionaries to Dataframes\n\n\n\n\n\n\nname\nheight\ndiameter\nflowering\n\n\n\n\n0\nCherry\n7\n12\nTrue\n\n\n1\nOak\n20\n89\nFalse\n\n\n2\nWillow\n12\n30\nTrue\n\n\n3\nFir\n16\n18\nFalse\n\n\n\n\n\n\ndata = { 'name': ['Cherry', 'Oak', 'Willow', 'Fir'], \n         'height': [7, 20, 12, 16], \n         'diameter': [12, 89, 30, 18], \n         'flowering': [True, False, True, False]}\n         \nforest = pd.DataFrame.from_dict(data)\nforest\n\n\n\n\n\n\n\n\nname\nheight\ndiameter\nflowering\n\n\n\n\n0\nCherry\n7\n12\nTrue\n\n\n1\nOak\n20\n89\nFalse\n\n\n2\nWillow\n12\n30\nTrue\n\n\n3\nFir\n16\n18\nFalse\n\n\n\n\n\n\n\n\nWhat about making dataframes from dictionaries?\nWe are lucky enough to have two ways of making data from a dictionary using the verb pd.DataFrame.from_dict().\nFirst, let’s try making this table into a dataframe where we insert our data column-wise.\nWe can use the dictionary keys to represent the column names and the dictionary values for the column values stored in a list."
  },
  {
    "objectID": "modules/module4/slides/module4_10.html#lets-add-what-we-learned-to-our-table",
    "href": "modules/module4/slides/module4_10.html#lets-add-what-we-learned-to-our-table",
    "title": "Python Data Structures: Dictionaries",
    "section": "Let’s add what we learned to our table",
    "text": "Let’s add what we learned to our table\n\n\n\n\n\n\n\n\n\n\n\nData Structure\npreserves order\nMutable\nSymbol\nCan contain duplicates\n\n\n\n\nstr\n✓\n☓\n'' or \"\"\n✓\n\n\nlist\n✓\n✓\n[]\n✓\n\n\ntuple\n✓\n☓\n()\n✓\n\n\nset\n☓\n✓\n{}\n☓\n\n\ndict\n✓\n✓\n{:}\nkeys: ☓ , values: ✓\n\n\n\n\nLet’s add the dictionary data structure to our data structure summary table."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#numeric-operations",
    "href": "modules/module4/slides/module4_18.html#numeric-operations",
    "title": "Python Operations",
    "section": "Numeric Operations",
    "text": "Numeric Operations\n\n6 + 5.7\n\n11.7\n\n\n\n\n15 - 7\n\n8\n\n\n\n\n4.5 * 4\n\n18.0\n\n\n\n\n2 ** 3\n\n8\n\n\n\n\n2.2 ** 5\n\n51.53632000000002\n\n\n\nLet’s apply these to the Python types we have learned and observe the results.\nThese operators act as expected on numeric types.\nAn int plus a float results in a float.\nAnd the subtraction of 2 values of type int results with a type int.\nMultiplication with a float and an int will result in a float as well.\nExponents can be calculated with ** and applied with int as well as float data types."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#bool",
    "href": "modules/module4/slides/module4_18.html#bool",
    "title": "Python Operations",
    "section": "Bool",
    "text": "Bool\n\nTrue + True \n\n2\n\n\n\n\nTrue * 4\n\n4\n\n\n\n\nFalse * 2 + True\n\n1\n\n\n\n\nFalse + 4\n\n4\n\n\n\nWe saw that addition, subtraction, multiplication, and exponential operations work as expected with numeric values but let’s check out what happens with the other data types.\nWhat happens when we try to add up bool values?\nWe see that True values are cast as a value of 1, and False values are cast as 0 when they are added together."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#str",
    "href": "modules/module4/slides/module4_18.html#str",
    "title": "Python Operations",
    "section": "Str",
    "text": "Str\n\n'The monster under my bed' + ' is named Mike' \n\n'The monster under my bed is named Mike'\n\n\n\n'The monster under my bed' - ' is named Mike' \nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\n'The monster under my bed' / ' is named Mike' \nTypeError: unsupported operand type(s) for /: 'str' and 'str'\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\nStrings react rather interestingly with the addition operator.\nFor instance, when we add strings, we add the sequence from one end to the other. This is also called concatenation.\nAnd we cannot multiply, divide or subtract two strings."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#list",
    "href": "modules/module4/slides/module4_18.html#list",
    "title": "Python Operations",
    "section": "List",
    "text": "List\n\nlist1 = [1, 2.0, 3, 4.5] + ['nine', 'ten', 'eleven', 'twelve']\nlist1\n\n[1, 2.0, 3, 4.5, 'nine', 'ten', 'eleven', 'twelve']\n\n\n\n[1, 2.0, 3, 4.5] - [3, 5, 2, 1]\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\n\n[1, 2.0, 3, 4.5] * [5, 6, 7, 8]\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[15], line 1\n----&gt; 1 [1, 2.0, 3, 4.5] * [5, 6, 7, 8]\n\nTypeError: can't multiply sequence by non-int of type 'list'\n\n\n\n\nHow about with other data types like lists, tuples and dictionaries?\nIf we add lists, similarly to strings, the lists concatenate together to create a single list containing the elements of both lists.\nOther operators, like subtraction and multiplication, are not supported when working with lists."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#boolean-operators",
    "href": "modules/module4/slides/module4_18.html#boolean-operators",
    "title": "Python Operations",
    "section": "Boolean Operators",
    "text": "Boolean Operators\n\n\n\nOperator\nDescription\n\n\n\n\nx == y\nis x equal to y?\n\n\nx != y\nis x not equal to y?\n\n\nx &gt; y\nis x greater than y?\n\n\nx &gt;= y\nis x greater than or equal to y?\n\n\nx &lt; y\nis x less than y?\n\n\nx &lt;= y\nis x less than or equal to y?\n\n\nx is y\nis x the same object as y?\n\n\nx and y\nare x and y both true?\n\n\nx or y\nis at least one of x and y true?\n\n\nnot x\nis x false?\n\n\n\n\nWhen we’ve filtered our data, we’ve seen different Boolean operators, but we have some new ones here for you.\nLet’s explore them."
  },
  {
    "objectID": "modules/module4/slides/module4_23.html#string-split",
    "href": "modules/module4/slides/module4_23.html#string-split",
    "title": "Splitting a Column",
    "section": "String Split",
    "text": "String Split\n\ncereal_amended\n\n\n\n\n\n\n\n\nname\nmfr_type\ncalories\nprotein\n...\nfat\ncarbo\nrating\nhot\n\n\n\n\n0\n100% Bran\nN-Cold\n70\n4\n...\n1\n5.0\n68.402973\nFalse\n\n\n1\n100% Natural Bran\nQ-Cold\n120\n3\n...\n5\n8.0\n33.983679\nFalse\n\n\n2\nAll-Bran\nK-Cold\n70\n4\n...\n1\n7.0\n59.425505\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR-Cold\n100\n3\n...\n1\n17.0\n49.787445\nFalse\n\n\n75\nWheaties\nG-Cold\n100\n3\n...\n1\n17.0\n51.592193\nFalse\n\n\n76\nWheaties Honey Gold\nG-Cold\n110\n2\n...\n1\n16.0\n36.187559\nFalse\n\n\n\n\n77 rows × 9 columns\n\n\n\n\nHere is a new cereal dataframe.\nYou’ll notice that our column mfr_type contains two variables.\nIt is displaying both the manufacturer (N, Q, etc.) of the cereal and the cereal type (Cold, Hot).\nTo convert this into tidier data, we will need to split up this column into two separate columns, but how?"
  }
]