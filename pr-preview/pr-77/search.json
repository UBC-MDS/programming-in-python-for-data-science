[
  {
    "objectID": "modules/module6/slides/module6_26.html#summary",
    "href": "modules/module6/slides/module6_26.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 6",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nEvaluate the readability, complexity and performance of a function.\nWrite docstrings for functions following the NumPy/SciPy format.\nWrite comments within a function to improve readability.\nWrite and design functions with default arguments.\nExplain the importance of scoping and environments in Python as they relate to functions.\nFormulate test cases to prove a function design specification.\nUse assert statements to formulate a test case to prove a function design specification.\nUse test-driven development principles to define a function that accepts parameters, returns values and passes all tests.\nHandle errors gracefully via exception handling.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module6/slides/module6_26.html#attribution",
    "href": "modules/module6/slides/module6_26.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 6",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module6/slides/module6_17.html#assert-statements",
    "href": "modules/module6/slides/module6_17.html#assert-statements",
    "title": "Unit tests, corner cases",
    "section": "Assert Statements",
    "text": "Assert Statements\nassert 1 == 2 , \"1 is not equal to 2.\"\nAssertionError: 1 is not equal to 2.\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\n\nassert statements can be used as sanity checks for our program.\nWe implement them as a “debugging” tactic to make sure our code runs as we expect it to.\nWhen Python reaches an assert statement, it evaluates the condition to a Boolean value.\nIf the statement is True, Python will continue to run. However, if the Boolean is False, the code stops running, and an error message is printed.\nLet’s take a look at one.\nHere we have the keyword assert that checks if 1==2. Since this is False, an error is thrown, and the message beside the condition \"1 is not equal to 2.\" is outputted."
  },
  {
    "objectID": "modules/module6/slides/module6_17.html#why",
    "href": "modules/module6/slides/module6_17.html#why",
    "title": "Unit tests, corner cases",
    "section": "Why?",
    "text": "Why?\n\n\nWhere do assert statements come in handy?\nUp to this point, we have been creating functions, and only after we have written them, we’ve tested if they work.\nSome programmers use a different approach: writing tests before the actual function. This is called Test-Driven Development.\nThis may seem a little counter-intuitive, but we’re creating the expectations of our function before the actual function code.\nOften we have an idea of what our function should be able to do and what output is expected.\nIf we write our tests before the function, it helps understand exactly what code we need to write and it avoids encountering large time-consuming bugs down the line.\nOnce we have a serious of tests for the function, we can put them into assert statements as an easy way of checking that all the tests pass."
  },
  {
    "objectID": "modules/module6/slides/module6_17.html#what-to-test",
    "href": "modules/module6/slides/module6_17.html#what-to-test",
    "title": "Unit tests, corner cases",
    "section": "What to test?",
    "text": "What to test?\n\ndef exponent_a_list(numerical_list, exponent=2):\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n\n\n\nassert exponent_a_list([1, 2, 4, 7], 2) == [1, 4, 16, 49], \"incorrect output for exponent = 2\"\n\n\n\nassert exponent_a_list([1, 2, 3], 3) == [1, 8, 27], \"incorrect output for exponent = 3\"\n\n\n\nassert type(exponent_a_list([1,2,4], 2)) == list, \"output type not a list\"\n\n\nSo, what kind of tests do we want?\nWe want to keep these tests simple - things that we know are true or could be easily calculated by hand.\nFor example, let’s look at our exponent_a_list() function.\nEasy cases for this function would be lists containing numbers that we can easily square or cube.\nFor example, we expect the square output of [1, 2, 4, 7] to be [1, 4, 16, 49].\nThe test for this would look like the one shown here.\nIt is recommended to write multiple tests.\nLet’s write another test for a differently sized list as well as different values for both input arguments numerical_list and exponent.\nLet’s make another test for exponent = 3. Again, we use numbers that we know the cube of.\nWe can also test that the type of the returned object is correct."
  },
  {
    "objectID": "modules/module6/slides/module6_17.html#false-positives",
    "href": "modules/module6/slides/module6_17.html#false-positives",
    "title": "Unit tests, corner cases",
    "section": "False Positives",
    "text": "False Positives\n\ndef bad_function(numerical_list, exponent=2):\n    new_exponent_list = [numerical_list[0] ** exponent] # seed list with first element\n    for number in numerical_list[1:]:\n        new_exponent_list.append(number ** exponent)\n    return new_exponent_list\n\n\n\nassert bad_function([1, 2, 4, 7], 2) == [1, 4, 16, 49], \"incorrect output for exponent = 2\"\nassert bad_function([2, 1, 3], 3) == [8, 1, 27], \"incorrect output for exponent = 3\"\n\n\n\nbad_function([], 2)\n\nIndexError: list index out of range\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 2, in bad_function\n\nJust because all our tests pass, this does not mean our program is necessarily correct.\nIt’s common that our tests can pass, but our code contains errors.\nLet’s take a look at the function bad_function(). It’s very similar to exponent_a_list except that it separately computes the first entry before doing the rest in the loop.\nThis function looks like it would work perfectly fine, but what happens if we get an input argument for numerical_list that cannot be sliced?\nLet’s write some unit tests using assert statements and see what happens.\nHere, it looks like our tests pass at first.\nBut what happens if we try our function with an empty list?\nWe get an unexpected error! How do we avoid this?\nWrite a lot of tests and don’t be overconfident, even after writing a lot of tests!\nChecking an empty list in our bad_function() function is an example of checking a corner case.\nA corner case is an input that is reasonable but a bit unusual and may trip up our code."
  },
  {
    "objectID": "modules/module6/slides/module6_17.html#testing-functions-that-work-with-data",
    "href": "modules/module6/slides/module6_17.html#testing-functions-that-work-with-data",
    "title": "Unit tests, corner cases",
    "section": "Testing Functions that Work with Data",
    "text": "Testing Functions that Work with Data\n\ndef column_stats(df, column):\n   stats_dict = {'max': df[column].max(),\n                 'min': df[column].min(),\n                 'mean': round(df[column].mean()),\n                 'range': df[column].max() - df[column].min()}\n   return stats_dict\n\n\nOften, we will be making functions that work on data.\nFor example, perhaps we want to write a function called column_stats that returns some summary statistics in the form of a dictionary.\nThe function here is something we might have envisioned. (Note that if we’re using test-driven development, this function will just be an idea, not completed code.)\nIn these situations, we need to invent some sort of data so that we can easily calculate the max, min, range, and mean and write unit tests to check that our function does the correct operations.\nThe data can be made from scratch using functions such as pd.DataFrame() or pd.DataFrame.from_dict() which we learned about in module 4.\nYou can also upload a very small slice of an existing dataframe."
  },
  {
    "objectID": "modules/module6/slides/module6_17.html#systematic-approach",
    "href": "modules/module6/slides/module6_17.html#systematic-approach",
    "title": "Unit tests, corner cases",
    "section": "Systematic Approach",
    "text": "Systematic Approach\nWe use a systematic approach to design our function using a general set of steps to follow when writing programs.\n1. Write the function stub: a function that does nothing but accepts all input parameters and returns the correct datatype.\ndef exponent_a_list(numerical_list, exponent=2):\n    return list()\n\nWe use a systematic approach to design our function using a general set of steps to follow when writing programs.\nThe approach we recommend includes 5 steps:\n1. Write the function stub: a function that does nothing but accepts all input parameters and returns the correct datatype.\nThis means we are writing the skeleton of a function.\nWe include the line that defines the function with the input arguments and the return statement returning the object with the desired data type.\nUsing our exponent_a_list() function as an example, we include the function’s first line and the return statement."
  },
  {
    "objectID": "modules/module6/slides/module6_09.html#numpy-format",
    "href": "modules/module6/slides/module6_09.html#numpy-format",
    "title": "Function Docstrings",
    "section": "NumPy Format",
    "text": "NumPy Format\n\ndef squares_a_list(numerical_list):\n    \"\"\"\n    Squared every element in a list.\n    \n    Parameters\n    ----------\n    numerical_list : list\n        The list from which to calculate squared values \n        \n    Returns\n    -------\n    list\n        A new list containing the squared value of each of the elements from the input list \n        \n    Examples\n    --------\n    &gt;&gt;&gt; squares_a_list([1, 2, 3, 4])\n    [1, 4, 9, 16]\n    \"\"\"\n    new_squared_list = list()\n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    return new_squared_list\n\n\nWriting documentation for squares_a_list() using the NumPy style takes the following format.\nWe can identify the brief description of the function at the top, the parameters that it takes in, and what object type they should be, as well as what to expect as an output.\nHere we can even see examples of how to run it and what is returned."
  },
  {
    "objectID": "modules/module6/slides/module6_09.html#default-arguments",
    "href": "modules/module6/slides/module6_09.html#default-arguments",
    "title": "Function Docstrings",
    "section": "Default Arguments",
    "text": "Default Arguments\n\ndef exponent_a_list(numerical_list, exponent=2):\n    \"\"\"\n    Creates a new list containing specified exponential values of the input list. \n    \n    Parameters\n    ----------\n    numerical_list : list\n        The list from which to calculate exponential values from\n    exponent: int or float, optional\n        The exponent value (the default is 2, which implies the square).\n        \n    Returns\n    -------\n    new_exponent_list : list\n        A new list containing the exponential value specified of each \n        of the elements from the input list \n        \n    Examples\n    --------\n    &gt;&gt;&gt; exponent_a_list([1, 2, 3, 4])\n    [1, 4, 9, 16]\n    \"\"\"\n\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n\n\nIf our function contains optional arguments, we need to communicate this in our docstring.\nUsing exponent_a_list(), a function from the previous section as an example, we include an optional note in the parameter definition and an explanation of the default value in the parameter description."
  },
  {
    "objectID": "modules/module6/slides/module6_09.html#side-effects",
    "href": "modules/module6/slides/module6_09.html#side-effects",
    "title": "Function Docstrings",
    "section": "Side Effects",
    "text": "Side Effects\n\ndef function_name(param1, param2):\n    \"\"\"The first line is a short description of the function. \n    \n    If your function includes side effects, explain it clearly here.\n    \n    \n    Parameters\n    ----------\n    param1 : datatype\n        A description of param1.\n    \n    .\n    .\n    .\n    Etc.\n    \"\"\"\n\n\nAh, remember how we talked about side effects back at the beginning of this module?\nAlthough we recommend avoiding side effects in your functions, there may be occasions where they’re unavoidable or required.\nIn these cases, we must make it clear in the documentation so that the user of the function knows that their objects are going to be modified. (As an analogy: If someone wants you to babysit their cat, you would probably tell them first if you were going to paint it red while you had it!)\nSo how we include side effects in our docstrings?\nIt’s best to include your function side effects in the first sentence of the docstring."
  },
  {
    "objectID": "modules/module6/slides/module6_09.html#how-to-read-a-docstring",
    "href": "modules/module6/slides/module6_09.html#how-to-read-a-docstring",
    "title": "Function Docstrings",
    "section": "How to read a docstring",
    "text": "How to read a docstring\n?function_name\n\nFor example, if we want the docstring for the function len():\n?len\nSignature: len(obj, /)\nDocstring: Return the number of items in a container.\nType:      builtin_function_or_method\n\nOk great! Now that we’ve written and explained our functions with a standardized format, we can read it in our file easily, but what if our function is located in a different file?\nHow can we learn what it does when reading our code?\nWe learned in the first assignment that we can read more about built-in functions using the question mark before the function name.\nThis returns the docstring of the function."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#scoping",
    "href": "modules/module6/slides/module6_01.html#scoping",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "Scoping",
    "text": "Scoping\n\ndef squares_a_list(numerical_list):\n    new_squared_list = list()\n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n        print(new_squared_list)\n    return new_squared_list\n\n\n\nsquares_a_list(numbers)\n\n[4]\n[4, 9]\n[4, 9, 25]\n\n\n[4, 9, 25]\n\n\n\nnew_squared_list\nNameError: name 'new_squared_list' is not defined\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\nIt’s important to know what exactly is going on inside and outside of a function.\nIn our function squares_a_list() we saw that we created a variable named new_squared_list.\nWe can print this variable and watch all the elements be appended to it as we loop through the input list.\nBut what happens if we try and print this variable outside of the function?\nYikes! Where did new_squared_list go?\nIt doesn’t seem to exist! That’s not entirely true.\nIn Python, new_squared_list is something we call a local variable.\nLocal variables are any objects that have been created within a function and only exist inside the function where they are made.\nCode within a function is described as a local environment.\nSince we called new_squared_list outside of the function’s body, Python fails to recognize it."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#global-and-local-variables",
    "href": "modules/module6/slides/module6_01.html#global-and-local-variables",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "Global and Local Variables",
    "text": "Global and Local Variables\n\ndef squares_a_list(numerical_list):\n\n    print(a_new_variable)\n    \n    new_squared_list = list()\n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    return new_squared_list\n\n\n\nsquares_a_list([12, 5, 7, 99999])\n\nPeek-a-boo\n\n\n[144, 25, 49, 9999800001]\n\n\n\nGlobal variables differ from local variables as they are not only recognized outside of any function but also recognized inside functions.\nLet’s take a look at what happens when we add a_new_variable, which is a global variable,e and refer to it in the squares_a_list function.\nThe function recognizes the global variable!\nIt’s important to note that, although functions recognize global variables, it’s not good practice to have functions reference objects outside of it.\nWe will learn more about this later in the module."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#when-things-get-tricky",
    "href": "modules/module6/slides/module6_01.html#when-things-get-tricky",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "When things get tricky",
    "text": "When things get tricky\n\na_new_variable = \"Peek-a-boo\"\n\n\n\ndef squares_a_list(numerical_list):\n    a_new_variable = \"Ta-Da!\"\n    print(a_new_variable)\n    \n    new_squared_list = list()\n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    return new_squared_list\n\n\n\nsquares_a_list([1, 2])\n\nTa-Da!\n\n\n[1, 4]\n\n\n\nThings can get unclear when we have variables that are named the same way but come from two different environments.\nWhat happens when 2 different objects share the same name, where one was defined inside the function and the other in the global environment?\nFor instance, let’s say we defined a variable a_new_variable in our global environment, and we’ve made a variable in a local environment with the same name a_new_variable but with different values within our squares_a_list function.\nWe can see that the locally created a_new_variable variable was printed instead of the global object with the same name."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#modifying-global-variables",
    "href": "modules/module6/slides/module6_01.html#modifying-global-variables",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "Modifying global variables",
    "text": "Modifying global variables\n\nglobal_list = [50, 51, 52]\n\n\n\ndef squares_a_list(numerical_list):\n    global_list.append(99)\n    print(\"print global_list:\", global_list)\n    \n    new_squared_list = list()\n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    return new_squared_list\n\n\n\nsquares_a_list([1, 2])\nglobal_list\n\nprint global_list: [50, 51, 52, 99]\n\n\n[50, 51, 52, 99]\n\n\n\nSo global variables are accessible inside functions - but what about modifying them?\nLet’s take a list that we define in our global environment called global_list and add 99 to the list in the local environment.\nThe list that we defined globally was able to be modified inside the function and have the changes reflected back in the global environment!\nWhat is going on?\nModifying objects like this within a function without returning them is called a function side effect."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#function-side-effects",
    "href": "modules/module6/slides/module6_01.html#function-side-effects",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "Function Side Effects",
    "text": "Function Side Effects\n\ncereal = pd.read_csv('data/cereal.csv')\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\n\n.drop()\n.assign()\n.sort_values()\n.rename()\n\n\nFor this next concept, we are going to bring back our trusty cereal dataframe.\nSince the beginning of this course, we have been using verbs such as;\n\n.drop()\n.assign()\n.sort_values()\n.rename()\n\nWhere we modify a dataframe and save the modification as a new dataframe object."
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#side-effect-documentation",
    "href": "modules/module6/slides/module6_01.html#side-effect-documentation",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "Side Effect Documentation",
    "text": "Side Effect Documentation\n\nIf your functions have side-effects, they should be documented.\n\n\nAlthough side effects are not recommended, there are cases where either we must have side-effects in our functions, or there is no way to avoid it. In these cases, it is extremely important that we document it.\nThis leads to the next question of How? Good news - the answer is coming later on in this module!"
  },
  {
    "objectID": "modules/module6/slides/module6_01.html#the-deal-with-print",
    "href": "modules/module6/slides/module6_01.html#the-deal-with-print",
    "title": "DRY Revisited and Function Fundamentals",
    "section": "The deal with print()",
    "text": "The deal with print()\n\nprint('A regular string')\n\nA regular string\n\n\n\n\na_number_variable = 54.346\n\nprint(a_number_variable)\n\n54.346\n\n\n\nWhat is print()?\nWe have not talked about this function in large detail but we do know print() will print whatever variable or item you call in it. It can be an especially handy one when debugging.\nWe can use it to print some code directly or from a variable like we see here.\nIt’s important that we address using the print statement vs using return in a function as they are quite different.\nLet’s see why."
  },
  {
    "objectID": "modules/module6/module6-26-what_did_we_just_learn.html",
    "href": "modules/module6/module6-26-what_did_we_just_learn.html",
    "title": "7. What Did We Just Learn?",
    "section": "",
    "text": "7. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "7. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module6/module6-22-good_function_design_choices.html",
    "href": "modules/module6/module6-22-good_function_design_choices.html",
    "title": "6. Good Function Design Choices",
    "section": "",
    "text": "6. Good Function Design Choices\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "6. Good Function Design Choices"
    ]
  },
  {
    "objectID": "modules/module6/module6-17-unit_tests.html",
    "href": "modules/module6/module6-17-unit_tests.html",
    "title": "5. Unit tests",
    "section": "",
    "text": "5. Unit tests\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "5. Unit tests"
    ]
  },
  {
    "objectID": "modules/module6/module6-13-defensive_programming_using_exceptions.html",
    "href": "modules/module6/module6-13-defensive_programming_using_exceptions.html",
    "title": "4. Defensive Programming using Exceptions",
    "section": "",
    "text": "4. Defensive Programming using Exceptions\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "4. Defensive Programming using Exceptions"
    ]
  },
  {
    "objectID": "modules/module6/module6-09-function_docstrings.html",
    "href": "modules/module6/module6-09-function_docstrings.html",
    "title": "3. Function Docstrings",
    "section": "",
    "text": "3. Function Docstrings\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "3. Function Docstrings"
    ]
  },
  {
    "objectID": "modules/module6/module6-05-default_arguments.html",
    "href": "modules/module6/module6-05-default_arguments.html",
    "title": "2. Default Arguments",
    "section": "",
    "text": "2. Default Arguments\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "2. Default Arguments"
    ]
  },
  {
    "objectID": "modules/module6/module6-01-dry_revisited_and_function_fundamentals.html",
    "href": "modules/module6/module6-01-dry_revisited_and_function_fundamentals.html",
    "title": "1. DRY Revisited and Function Fundamentals",
    "section": "",
    "text": "1. DRY Revisited and Function Fundamentals\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "1. DRY Revisited and Function Fundamentals"
    ]
  },
  {
    "objectID": "modules/module6/module6-00-module_learning_outcomes.html",
    "href": "modules/module6/module6-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-questions_on_scoping.html",
    "href": "modules/module6/module6-02-questions_on_scoping.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "toy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\ntoy\n\n\n\n\ntoy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\nplaytime()\n\n\n\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\ntoy\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntoy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    print(toy) \n\nplaytime()\n\n\n\n\ntoy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\nplaytime()\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nThe function kg_to_lb() is used to convert a list of elements with kg units into a list of elements with lbs units. Unfortunate this function includes a side effect that edits one of the global variables.\n\n\n\n\n\n\nTasks:\n\nWrite a new function named better_kg_to_lb that no longer contains a side effect.\nTest your new function on the weight_kg list and save the results in an object named weight_lb_again.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you putting weight_lb inside the function now?\nAre you returning weight_lb?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-questions_on_scoping.html#questions-on-scoping",
    "href": "modules/module6/module6-02-questions_on_scoping.html#questions-on-scoping",
    "title": "1.1. Exercises",
    "section": "",
    "text": "toy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\ntoy\n\n\n\n\ntoy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\nplaytime()\n\n\n\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\ntoy",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-questions_on_scoping.html#side-effects",
    "href": "modules/module6/module6-02-questions_on_scoping.html#side-effects",
    "title": "1.1. Exercises",
    "section": "",
    "text": "toy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    print(toy) \n\nplaytime()\n\n\n\n\ntoy = \"ball\"\n\ndef playtime():\n    toy = \"truck\"\n    return toy \n\nplaytime()",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-02-questions_on_scoping.html#writing-functions-without-side-effects",
    "href": "modules/module6/module6-02-questions_on_scoping.html#writing-functions-without-side-effects",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nThe function kg_to_lb() is used to convert a list of elements with kg units into a list of elements with lbs units. Unfortunate this function includes a side effect that edits one of the global variables.\n\n\n\n\n\n\nTasks:\n\nWrite a new function named better_kg_to_lb that no longer contains a side effect.\nTest your new function on the weight_kg list and save the results in an object named weight_lb_again.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you putting weight_lb inside the function now?\nAre you returning weight_lb?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-will_it_output.html",
    "href": "modules/module6/module6-06-will_it_output.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "def name_initials(first_name, last_name, year_of_birth = None):\n    if year_of_birth is not None: \n        initials = first_name[0].upper() + middle_name[0].upper() + str(year_of_birth)\n    else:\n        initials = first_name[0].upper() + last_name[0].upper()\n    return initials\n\n\n\n\n\n\n\nGiven the function below:\ndef employee_wage(employee_id, position, experience = 3):\n    if position == \"doctor\": \n        wage = 150000\n    elif position == \"teacher\":\n        wage = 60000\n    elif position == \"lawyer\":\n        wage = 100000\n    elif position == \"server\":\n        wage = 50000\n    else: \n        wage = 70000\n    return wage * (1 + (0.1 * experience)) \n\n\n\n\nmenu_item_id = 42\nmenu_item_name = \"Green Curry\"\nspice_level = \"Medium\"\nmeat = \"Tofu\"\nrice = True\n\nthai_food(menu_item_id, menu_item_name, spice_level, meat, rice)\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nWeight and mass are 2 very different measurements, although they are used interchangeably in everyday conversations. Mass is defined by NASA as the amount of matter in an object, whereas, weight is defined as the vertical force exerted by a mass as a result of gravity (with units of Newtons). The function earth_weight() converts an object’s mass to Weight by multiplying it by the gravitational force acting on it. On Earth, the gravitational force is measured as 9.8 m/s2.\n\n\n\n\n\n\nWe want to make a more versatile function by having the ability to calculate the Weight of any object on any particular planet and not just Earth. Redefine the function earth_weight() to take an argument with a default gravitational force of 9.8.\nTasks:\n\nCreate a new function named mass_to_weight and give it an additional argument named g, which has a default value of 9.8.\nTest your new function by converting the mass of 76 kg to weight on Earth and save the results in an object named earth_weight.\nTest your function again but this time, calculate the weight of the 76 kg object on the moon using a gravitational force of 1.62 m/s2 and save your function call to an object named moon_weight.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you putting g=9.8 inside the function named mass_to_weight?\nAre you calling mass_to_weight(76) and saving it in an object named earth_weight?\nAre you calling mass_to_weight(76, 1.62) and saving it in an object named moon_weight?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-will_it_output.html#questions-on-scoping",
    "href": "modules/module6/module6-06-will_it_output.html#questions-on-scoping",
    "title": "2.1. Exercises",
    "section": "",
    "text": "def name_initials(first_name, last_name, year_of_birth = None):\n    if year_of_birth is not None: \n        initials = first_name[0].upper() + middle_name[0].upper() + str(year_of_birth)\n    else:\n        initials = first_name[0].upper() + last_name[0].upper()\n    return initials",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-will_it_output.html#default-arguments",
    "href": "modules/module6/module6-06-will_it_output.html#default-arguments",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Given the function below:\ndef employee_wage(employee_id, position, experience = 3):\n    if position == \"doctor\": \n        wage = 150000\n    elif position == \"teacher\":\n        wage = 60000\n    elif position == \"lawyer\":\n        wage = 100000\n    elif position == \"server\":\n        wage = 50000\n    else: \n        wage = 70000\n    return wage * (1 + (0.1 * experience)) \n\n\n\n\nmenu_item_id = 42\nmenu_item_name = \"Green Curry\"\nspice_level = \"Medium\"\nmeat = \"Tofu\"\nrice = True\n\nthai_food(menu_item_id, menu_item_name, spice_level, meat, rice)",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-06-will_it_output.html#default-argument-practice",
    "href": "modules/module6/module6-06-will_it_output.html#default-argument-practice",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nWeight and mass are 2 very different measurements, although they are used interchangeably in everyday conversations. Mass is defined by NASA as the amount of matter in an object, whereas, weight is defined as the vertical force exerted by a mass as a result of gravity (with units of Newtons). The function earth_weight() converts an object’s mass to Weight by multiplying it by the gravitational force acting on it. On Earth, the gravitational force is measured as 9.8 m/s2.\n\n\n\n\n\n\nWe want to make a more versatile function by having the ability to calculate the Weight of any object on any particular planet and not just Earth. Redefine the function earth_weight() to take an argument with a default gravitational force of 9.8.\nTasks:\n\nCreate a new function named mass_to_weight and give it an additional argument named g, which has a default value of 9.8.\nTest your new function by converting the mass of 76 kg to weight on Earth and save the results in an object named earth_weight.\nTest your function again but this time, calculate the weight of the 76 kg object on the moon using a gravitational force of 1.62 m/s2 and save your function call to an object named moon_weight.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you putting g=9.8 inside the function named mass_to_weight?\nAre you calling mass_to_weight(76) and saving it in an object named earth_weight?\nAre you calling mass_to_weight(76, 1.62) and saving it in an object named moon_weight?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-10-docstring_questions.html",
    "href": "modules/module6/module6-10-docstring_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "def factor_of_10(number):\n    \"\"\"\n    Takes a number and determines if it is a factor of 10 \n    Parameters\n    ----------\n    number : int\n        the value to check\n      \n    Returns\n    -------\n    bool\n        Returns True if numbers are a multiple of 10 and False otherwise\n      \n    Examples\n    --------\n    &gt;&gt;&gt; factor_of_10(72)\n    False\n    \"\"\"\n\n    if number % 10 == 0: \n        factor = True\n    else:\n        factor = False\n        \n    return factor\n\n\n\n\ndef add_stars(name):\n  \"\"\"\n  This will return your input string between a pair of stars. \n  Parameters\n    ----------\n    name: str\n        a sentence or word\n        \n    Returns\n    -------\n    str\n        The initial string beginning and ending with a pair of stars \n        \n    Examples\n    --------\n    &gt;&gt;&gt; add_stars('Good Job')\n    'Good Job'\n    \"\"\"\n\n    name = '**' + name + '**'\n    return\n\n\n\n\n\n\n\nGiven the function below:\ndef acronym_it(sentence):\n    words = sentence.split()\n    first_letters = [word[0].upper() for word in words]\n    acronym =  \"\".join(first_letters)\n    return acronym\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\nInput\n------\nstr : sentence\n   The string to obtain the first letters from\n    \nOutput\n-------\nstr\n    A string of the first letters of each word in an uppercase format\n    \nSample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\nInput \n------\nsome_words : str\n   The string to obtain the first letters from\n    \nOutput \n-------\nlist \n    A list of the first letters of each word from the input string\n\nExample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\nParameters\n----------\nsentence : str\n   The string to obtain the first letters from\n    \nReturns\n-------\nstr\n    a string of just first letters in an uppercase format\n\nExample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\n\nReturns\n-------\nlist :\n    A list of the first letters of each word from the input string\n    \nParameters\n----------\nstr : sentence\n   The string to obtain the first letters from\n    \nExample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nIn module 5, we wrote a function that returns the BMI given a person’s weight and height. Let’s write a docstring for it now!\ndef bmi_calculator(height, weight):\n    return (weight / (height ** 2)) * 702\nTasks:\n\nWrite a NumPy style docstring for the function provided.\nFor this question, we want you to write your docstring between 3 single quotations ''' instead of the normal double quotations \"\"\". This will allow us to test the solution provided.\nMake sure to include a brief description, parameters, return, and example sections.\nView the documentation of the function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using ''' to contain your docstring?\nAre you including all the sections?\nAre you getting the documentation of the docstring using ?bmi_calculator\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-10-docstring_questions.html#docstring-questions",
    "href": "modules/module6/module6-10-docstring_questions.html#docstring-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "def factor_of_10(number):\n    \"\"\"\n    Takes a number and determines if it is a factor of 10 \n    Parameters\n    ----------\n    number : int\n        the value to check\n      \n    Returns\n    -------\n    bool\n        Returns True if numbers are a multiple of 10 and False otherwise\n      \n    Examples\n    --------\n    &gt;&gt;&gt; factor_of_10(72)\n    False\n    \"\"\"\n\n    if number % 10 == 0: \n        factor = True\n    else:\n        factor = False\n        \n    return factor\n\n\n\n\ndef add_stars(name):\n  \"\"\"\n  This will return your input string between a pair of stars. \n  Parameters\n    ----------\n    name: str\n        a sentence or word\n        \n    Returns\n    -------\n    str\n        The initial string beginning and ending with a pair of stars \n        \n    Examples\n    --------\n    &gt;&gt;&gt; add_stars('Good Job')\n    'Good Job'\n    \"\"\"\n\n    name = '**' + name + '**'\n    return",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-10-docstring_questions.html#which-docstring-is-most-appropriate",
    "href": "modules/module6/module6-10-docstring_questions.html#which-docstring-is-most-appropriate",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Given the function below:\ndef acronym_it(sentence):\n    words = sentence.split()\n    first_letters = [word[0].upper() for word in words]\n    acronym =  \"\".join(first_letters)\n    return acronym\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\nInput\n------\nstr : sentence\n   The string to obtain the first letters from\n    \nOutput\n-------\nstr\n    A string of the first letters of each word in an uppercase format\n    \nSample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\nInput \n------\nsome_words : str\n   The string to obtain the first letters from\n    \nOutput \n-------\nlist \n    A list of the first letters of each word from the input string\n\nExample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\nParameters\n----------\nsentence : str\n   The string to obtain the first letters from\n    \nReturns\n-------\nstr\n    a string of just first letters in an uppercase format\n\nExample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"\n\n\n\n\"\"\"\nA function that converts a string into an acronym of capital\nletters\n\n\nReturns\n-------\nlist :\n    A list of the first letters of each word from the input string\n    \nParameters\n----------\nstr : sentence\n   The string to obtain the first letters from\n    \nExample\n-------\n&gt;&gt;&gt; acronym_it(\"Let's make this an acronym\")\n\"LMTAA\"\n\"\"\"",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-10-docstring_questions.html#practice-writing-a-docstring",
    "href": "modules/module6/module6-10-docstring_questions.html#practice-writing-a-docstring",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nIn module 5, we wrote a function that returns the BMI given a person’s weight and height. Let’s write a docstring for it now!\ndef bmi_calculator(height, weight):\n    return (weight / (height ** 2)) * 702\nTasks:\n\nWrite a NumPy style docstring for the function provided.\nFor this question, we want you to write your docstring between 3 single quotations ''' instead of the normal double quotations \"\"\". This will allow us to test the solution provided.\nMake sure to include a brief description, parameters, return, and example sections.\nView the documentation of the function.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using ''' to contain your docstring?\nAre you including all the sections?\nAre you getting the documentation of the docstring using ?bmi_calculator\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-14-exceptions.html",
    "href": "modules/module6/module6-14-exceptions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "def factor_of_10(number):\n    \"\"\"\n    Takes a number and determines if it is a factor of 10 \n    Parameters\n    ----------\n    number : int\n        the value to check\n      \n    Returns\n    -------\n    bool\n        Returns True if number is a multiple of 10 and False otherwise\n        \n    Raises\n    ------\n    TypeError\n        If the input argument number is not of type int \n      \n    Examples\n    --------\n    &gt;&gt;&gt; factor_of_10(72)\n    False\n    \"\"\"\n    if not isinstance(number, int): \n        raise TypeError(\"the input value of number is not of type int\")\n        \n    if number % 10 == 0: \n        factor = True\n    else:\n        factor = False\n        \n    return factor\n\n\n\ndef factor_of_10(number):\n    \"\"\"\n    Takes a number and determines if it is a factor of 10 \n    Parameters\n    ----------\n    number : int\n        the value to check\n      \n    Returns\n    -------\n    bool\n        Returns True if number is a multiple of 10 and False otherwise\n        \n    Exceptions\n    ------\n    TypeError\n        If the input argument number is not of type int \n      \n    Examples\n    --------\n    &gt;&gt;&gt; factor_of_10(72)\n    False\n    \"\"\"\n    if not isinstance(number, int): \n        raise TypeError(\"the input value of number is not of type int\")\n        \n    if number % 10 == 0: \n        factor = True\n    else:\n        factor = False\n        \n    return factor\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s build on the BMI function we made in module 5. This time we want to raise 2 exceptions.\ndef bmi_calculator(height, weight):\n    return (weight / (height ** 2)) * 702\nTasks:\n\nWrite an exception that checks if height is of type float.\nWrite a second exception that raises an error if weight is 0 or less.\nTest your function with the values given in variable tall and mass.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using TypeError and Exception respectively for the exception messages?\nAre you checking the height type with if type(height) is not float:?\nAre you checking if weight is greater than 0 with if weight &lt;= 0:?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-14-exceptions.html#documenting-exceptions",
    "href": "modules/module6/module6-14-exceptions.html#documenting-exceptions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "def factor_of_10(number):\n    \"\"\"\n    Takes a number and determines if it is a factor of 10 \n    Parameters\n    ----------\n    number : int\n        the value to check\n      \n    Returns\n    -------\n    bool\n        Returns True if number is a multiple of 10 and False otherwise\n        \n    Raises\n    ------\n    TypeError\n        If the input argument number is not of type int \n      \n    Examples\n    --------\n    &gt;&gt;&gt; factor_of_10(72)\n    False\n    \"\"\"\n    if not isinstance(number, int): \n        raise TypeError(\"the input value of number is not of type int\")\n        \n    if number % 10 == 0: \n        factor = True\n    else:\n        factor = False\n        \n    return factor\n\n\n\ndef factor_of_10(number):\n    \"\"\"\n    Takes a number and determines if it is a factor of 10 \n    Parameters\n    ----------\n    number : int\n        the value to check\n      \n    Returns\n    -------\n    bool\n        Returns True if number is a multiple of 10 and False otherwise\n        \n    Exceptions\n    ------\n    TypeError\n        If the input argument number is not of type int \n      \n    Examples\n    --------\n    &gt;&gt;&gt; factor_of_10(72)\n    False\n    \"\"\"\n    if not isinstance(number, int): \n        raise TypeError(\"the input value of number is not of type int\")\n        \n    if number % 10 == 0: \n        factor = True\n    else:\n        factor = False\n        \n    return factor",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-14-exceptions.html#raising-exceptions",
    "href": "modules/module6/module6-14-exceptions.html#raising-exceptions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s build on the BMI function we made in module 5. This time we want to raise 2 exceptions.\ndef bmi_calculator(height, weight):\n    return (weight / (height ** 2)) * 702\nTasks:\n\nWrite an exception that checks if height is of type float.\nWrite a second exception that raises an error if weight is 0 or less.\nTest your function with the values given in variable tall and mass.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using TypeError and Exception respectively for the exception messages?\nAre you checking the height type with if type(height) is not float:?\nAre you checking if weight is greater than 0 with if weight &lt;= 0:?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-18-assert_questions.html",
    "href": "modules/module6/module6-18-assert_questions.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "def acronym_it(sentence):\n    words = sentence.split()\n    first_letters = [word[0].upper() for word in words]\n    acronym =  \"\".join(first_letters)\n    return acronym\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nGiven our BMI function from the previous few questions, let’s write some unit tests.\nTasks:\n\nWrite at least 4 unit tests and check that at least 2 of them are testing edge cases.\nFor this exercsie, use single quotes '' instead of double quotes \"\" for the assert messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using Assert statements?\nAre you checking that they equal a correct value?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-18-assert_questions.html#unit-tests-questions",
    "href": "modules/module6/module6-18-assert_questions.html#unit-tests-questions",
    "title": "5.1. Exercises",
    "section": "",
    "text": "def acronym_it(sentence):\n    words = sentence.split()\n    first_letters = [word[0].upper() for word in words]\n    acronym =  \"\".join(first_letters)\n    return acronym",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-18-assert_questions.html#writing-tests",
    "href": "modules/module6/module6-18-assert_questions.html#writing-tests",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nGiven our BMI function from the previous few questions, let’s write some unit tests.\nTasks:\n\nWrite at least 4 unit tests and check that at least 2 of them are testing edge cases.\nFor this exercsie, use single quotes '' instead of double quotes \"\" for the assert messages.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using Assert statements?\nAre you checking that they equal a correct value?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-23-function_design_questions.html",
    "href": "modules/module6/module6-23-function_design_questions.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def give_me_facts(myinfo):\n    max_val = max(myinfo)\n    min_val = min(myinfo)\n    range_val = max_val - min_val\n    return max_val, min_val, range_val\n\n\n\n\n\n\n\n\ndef count_the_sevens(mylist): \n    number_of_occurances  = mylist.count(7)\n    return number_of_occurances\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nGiven the function below, improve it so that it follows good function design principles.\n\n\n\n\n\n\nTasks:\n\nGiven the function above, improve it using to the new function new_wage(). We have provided you with the function stub and the docstring to guide you.\n\nMake sure it follows good function design practices by not looping over a function, avoiding hard-coding and not returning multiple values.\nTest your new function on a person with a salary of $84000 and an expected raise of 12%.\nSave this in an object named person1_new_wage.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you removing the hardcoded values in the function?\nAre removing the return of 2 variables?\nAre you removing the loop from inside the function?\nAre you multiplying the salary by (1 + (0.01 * percent_raise)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-23-function_design_questions.html#function-design-questions",
    "href": "modules/module6/module6-23-function_design_questions.html#function-design-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def give_me_facts(myinfo):\n    max_val = max(myinfo)\n    min_val = min(myinfo)\n    range_val = max_val - min_val\n    return max_val, min_val, range_val",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-23-function_design_questions.html#improve-it",
    "href": "modules/module6/module6-23-function_design_questions.html#improve-it",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def count_the_sevens(mylist): \n    number_of_occurances  = mylist.count(7)\n    return number_of_occurances",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/module6-23-function_design_questions.html#function-design",
    "href": "modules/module6/module6-23-function_design_questions.html#function-design",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nGiven the function below, improve it so that it follows good function design principles.\n\n\n\n\n\n\nTasks:\n\nGiven the function above, improve it using to the new function new_wage(). We have provided you with the function stub and the docstring to guide you.\n\nMake sure it follows good function design practices by not looping over a function, avoiding hard-coding and not returning multiple values.\nTest your new function on a person with a salary of $84000 and an expected raise of 12%.\nSave this in an object named person1_new_wage.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you removing the hardcoded values in the function?\nAre removing the return of 2 variables?\nAre you removing the loop from inside the function?\nAre you multiplying the salary by (1 + (0.01 * percent_raise)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 6: Functions Fundamentals and Best Practices**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module6/slides/module6_00.html#module-learning-outcomes",
    "href": "modules/module6/slides/module6_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nEvaluate the readability, complexity and performance of a function.\nWrite docstrings for functions following the NumPy/SciPy format.\nWrite comments within a function to improve readability.\nWrite and design functions with default arguments.\nExplain the importance of scoping and environments in Python as they relate to functions.\nFormulate test cases to prove a function design specification.\nUse assert statements to formulate a test case to prove a function design specification.\nUse test-driven development principles to define a function that accepts parameters, returns values and passes all tests.\nHandle errors gracefully via exception handling."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#default-values-for-arguments",
    "href": "modules/module6/slides/module6_05.html#default-values-for-arguments",
    "title": "Function Arguments",
    "section": "Default Values for Arguments",
    "text": "Default Values for Arguments\n\ndef exponent_a_list(numerical_list, exponent=2):\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n\n\n\nnumbers = [2, 3, 5]\nexponent_a_list(numbers)\n\n[4, 9, 25]\n\n\n\nPython allows for default values in the event that an argument is not provided to the function.\nFor example, in a new version of exponent_a_list(), the function uses a default value of 2 for exponent.\nSince we do not specify the exponent argument when we call our function, it defaults to an exponent of 2.\nThese arguments with default values are also called optional arguments (because you don’t have to specify them), or “keyword arguments”."
  },
  {
    "objectID": "modules/module6/slides/module6_05.html#argument-ordering",
    "href": "modules/module6/slides/module6_05.html#argument-ordering",
    "title": "Function Arguments",
    "section": "Argument Ordering",
    "text": "Argument Ordering\n\ndef exponent_a_list(numerical_list, exponent=2):\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n\n\n\nexponent_a_list([2, 3, 5], 5)\n\n[32, 243, 3125]\n\n\n\nUp to this point, we have been calling functions with multiple arguments in a single way.\nWhen we call our function, we have been ordering the arguments in the order the function defined them in.\nSo, in exponent_a_list(), the argument numerical_list is defined first, followed by the argument exponent.\nNaturally, we have been calling our function with the arguments in this order as well."
  },
  {
    "objectID": "modules/module6/slides/module6_13.html#exceptions",
    "href": "modules/module6/slides/module6_13.html#exceptions",
    "title": "Defensive Programming using Exceptions",
    "section": "Exceptions",
    "text": "Exceptions\n\ndef exponent_a_list(numerical_list, exponent=2):\n\n    if type(numerical_list) is not list:\n        raise Exception(\"You are not using a list for the numerical_list input.\")\n\n    new_exponent_list = list()\n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    return new_exponent_list\n\n\n\nnumerical_string = \"123\"\nexponent_a_list(numerical_string)\n\nException: You are not using a list for the numerical_list input.\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"&lt;string&gt;\", line 4, in exponent_a_list\n(Note that in the interest of avoiding new syntax, we are using a simple way of checking if an object is of a certain data type. For a more robust approach see here.)\n\nExceptions disrupt the regular execution of our code. When we raise an Exception, we are forcing our own error with our own message.\nIf we wanted to raise an exception to solve the problem on the last slide, we could do the following."
  },
  {
    "objectID": "modules/module6/slides/module6_13.html#why-raise-exceptions",
    "href": "modules/module6/slides/module6_13.html#why-raise-exceptions",
    "title": "Defensive Programming using Exceptions",
    "section": "Why raise Exceptions",
    "text": "Why raise Exceptions\nif type(numerical_list) is not list:\n    raise Exception(\"You are not using a list for the numerical_list input.\")\n\nHere we check if numerical_list is of the type we expect it to be, in this case, a list.\nChecking the datatype is a helpful exception since the user can quickly correct for a simple mistake."
  },
  {
    "objectID": "modules/module6/slides/module6_13.html#exception-types",
    "href": "modules/module6/slides/module6_13.html#exception-types",
    "title": "Defensive Programming using Exceptions",
    "section": "Exception types",
    "text": "Exception types\nif type(numerical_list) is not list:\n    raise Exception(\"You are not using a list for the numerical_list input.\")\n Here is a full list containing other types of exceptions available.\n\nLet’s now learn more about the possible different types of Exceptions.\nThe exception type called Exception is a generic, catch-all exception type.\nThere are also many other exception types; for example, you may have encountered ValueError or a TypeError at some point.\nException, which is used in our previous examples, may not be the best option for the raises we made."
  },
  {
    "objectID": "modules/module6/slides/module6_13.html#exception-documentation",
    "href": "modules/module6/slides/module6_13.html#exception-documentation",
    "title": "Defensive Programming using Exceptions",
    "section": "Exception Documentation",
    "text": "Exception Documentation\n\ndef exponent_a_list(numerical_list, exponent=2):\n    \"\"\"\n    Creates a new list containing specified exponential values of the input list. \n    \n    Parameters\n    ----------\n    numerical_list : list\n        The list from which to calculate exponential values from\n    exponent : int or float, optional\n        The exponent value (the default is 2, which implies the square).\n        \n    Returns\n    -------\n    new_exponent_list : list\n        A new list containing the exponential value specified of each \n        of the elements from the input list \n        \n    Raises\n    ------\n    TypeError\n        If the input argument numerical_list is not of type list\n        \n    Examples\n    --------\n    &gt;&gt;&gt; exponent_a_list([1, 2, 3, 4])\n    [1, 4, 9, 16]\n    \"\"\"\n\n\nNow that we can write exceptions, it’s important to document them.\nIt’s a good idea to include details of any included exceptions in our function’s docstring.\nUnder the NumPy docstring format, we explain our raised exception after the “Returns” section.\nWe first specify the exception type and then an explanation of what causes the exception to be raised.\nFor example, we’ve added a “Raises” section in our exponent_a_list docstring here."
  },
  {
    "objectID": "modules/module6/slides/module6_22.html#how-to-write-good-functions",
    "href": "modules/module6/slides/module6_22.html#how-to-write-good-functions",
    "title": "Good Function Design Choices",
    "section": "How to write good functions",
    "text": "How to write good functions\nWhat makes a function useful?\nIs a function more useful when it does more operations?\nDo adding parameters make your functions more or less functional?\nThese are all questions we need to think about when writing functions.\n\nThis has been quite a full module!\nWe’ve learned how to make functions, how to handle errors gracefully, how to test our functions, and write the necessary documentation to keep our code comprehensible.\nThese skills will all contribute to writing effective code.\nOne thing we have not discussed yet is the actual code within a function.\nWhat makes a function useful?\nIs a function more useful when it performs more operations?\nDoes adding parameters make your functions more or less useful?\nThese are all questions we need to think about when writing functions.\nWe are going to list some habits to adopt when writing and designing your functions."
  },
  {
    "objectID": "modules/module6/slides/module6_22.html#avoid-hard-coding.",
    "href": "modules/module6/slides/module6_22.html#avoid-hard-coding.",
    "title": "Good Function Design Choices",
    "section": "1. Avoid “hard coding.”",
    "text": "1. Avoid “hard coding.”\nHard coding is the process of embedding values directly into your code without saving them in objects.\n\ndef squares_a_list(numerical_list):\n    new_squared_list = list()\n    \n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    \n    return new_squared_list\n\n\n\ndef exponent_a_list(numerical_list, exponent):\n    new_exponent_list = list()\n    \n    for number in numerical_list:\n        new_exponent_list.append(number ** exponent)\n    \n    return new_exponent_list\n\n\nHard coding is the process of embedding values directly into your code without saving them in variables\nWhen we hardcode values into our code, it decreases flexibility.\nBeing inflexible can cause you to end up writing more functions and/or violating the DRY principle.\nThis, in turn, can decrease the readability and makes code problematic to maintain. In short, hard coding is a breeding ground for bugs.\nRemember our function squares_a_list()?\nIn this function, we “hard-coded” in 2 when we calculated number ** 2.\nThere are a couple of approaches to improving the situation. One is to assign 2 to a variable in the function before doing this calculation. That way, if you need to reuse that number, later on, you can just refer to the variable; and if you need to change the 2 to a 3, you only need to change it in one place. Another benefit is that you’re giving it a variable name, which acts as a little bit of documentation.\nThe other approach is to turn the value into an argument like we did when we made exponent_a_list().\nThis new function now gives us more flexibility with our code.\nIf we now encounter a situation where we need to calculate each element to a different exponent like 4 or 0, we can do so without writing new code and potentially making a new error in doing so.\nWe reduce our long term workload.\nThis version is more maintainable code, but it doesn’t give the function caller any flexibility. What you decide depends on how you expect your function to be used."
  },
  {
    "objectID": "modules/module6/slides/module6_22.html#less-is-more",
    "href": "modules/module6/slides/module6_22.html#less-is-more",
    "title": "Good Function Design Choices",
    "section": "2. Less is More",
    "text": "2. Less is More\n\ndef load_filter_and_average(file, grouping_column, ploting_column):\n    df = pd.read_csv(\"data/\" + file)\n    source = df.groupby(grouping_column).mean().reset_index()\n    chart = alt.Chart(source, width = 500, height = 300).mark_bar().encode(\n                      x=alt.X(grouping_column),\n                      y=alt.Y(ploting_column)\n            )\n    return chart\n\n\n\nbad_idea = load_filter_and_average('cereal.csv', 'mfr', 'rating')\nbad_idea\n\n\n\n\nAlthough it may seem useful when a function acts as a one-stop-shop that does everything you want in a single function, this also limits your ability to reuse code that lies within it.\nIdeally, functions should serve a single purpose.\nFor example, let’s say we have a function that reads in a csv, finds the mean of each group in a column, and plots a specified variable.\nAlthough this may seem nice, we may want to break this up into multiple smaller functions. For example, what if we don’t want the plot? Perhaps the plot is just something we wanted a single time, and now we are committed to it for each time we use the function.\nAnother problem with this function is that the means are only printed and not returned. Thus, we have no way of accessing the statistics to use further in our code (we would have to repeat ourselves and rewrite it)."
  },
  {
    "objectID": "modules/module6/slides/module6_22.html#return-a-single-object",
    "href": "modules/module6/slides/module6_22.html#return-a-single-object",
    "title": "Good Function Design Choices",
    "section": "3. Return a single object",
    "text": "3. Return a single object\n\ndef load_filter_and_average(file, grouping_column, ploting_column):\n    df = pd.read_csv(\"data/\" + file)\n    source = df.groupby(grouping_column).mean().reset_index()\n    chart = alt.Chart(source, width = 500, height = 300).mark_bar().encode(\n                      x=alt.X(grouping_column),\n                      y=alt.Y(ploting_column)\n            )\n    return chart, source\n\n\n\nanother_bad_idea = load_filter_and_average('cereal.csv', 'mfr', 'rating')\nanother_bad_idea\n\n(alt.Chart(...),\n    mfr    calories   protein  ...    weight      cups     rating\n 0    A  100.000000  4.000000  ...  1.000000  1.000000  54.850917\n 1    G  111.363636  2.318182  ...  1.049091  0.875000  34.485852\n 2    K  108.695652  2.652174  ...  1.077826  0.796087  44.038462\n ..  ..         ...       ...  ...       ...       ...        ...\n 4    P  108.888889  2.444444  ...  1.064444  0.714444  41.705744\n 5    Q   95.000000  2.625000  ...  0.875000  0.823750  42.915990\n 6    R  115.000000  2.500000  ...  1.000000  0.871250  41.542997\n \n [7 rows x 14 columns])\n\n\n\nFor the most part, we have only lightly touched on the fact that functions can return multiple objects, and it’s with good reason.\nAlthough functions are capable of returning multiple objects, that doesn’t mean that it’s the best option.\nFor instance, what if we converted our function load_filter_and_average() so that it returns a dataframe and a plot."
  },
  {
    "objectID": "modules/module6/slides/module6_22.html#keep-global-variables-in-their-global-environment",
    "href": "modules/module6/slides/module6_22.html#keep-global-variables-in-their-global-environment",
    "title": "Good Function Design Choices",
    "section": "4. Keep global variables in their global environment",
    "text": "4. Keep global variables in their global environment\n\ndef grouped_means(df, grouping_column):\n    grouped_mean = df.groupby(grouping_column).mean().reset_index()\n    return grouped_mean\n\n\n\ncereal = pd.read_csv('data/cereal.csv')\n\ndef bad_grouped_means(grouping_column):\n    grouped_mean = cereal.groupby(grouping_column).mean().reset_index()\n    return grouped_mean\n\n\nIt’s generally bad form to include objects in a function that were created outside of it.\nTake our grouped_means() function.\nWhat if instead of including df as an input argument, we just used cereal that we loaded earlier?\nThe number one problem with doing this is now our function only works on the cereal data - it’s not usable on other data."
  }
]