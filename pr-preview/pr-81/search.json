[
  {
    "objectID": "modules/module9/slides/module9_00.html#you-did-it",
    "href": "modules/module9/slides/module9_00.html#you-did-it",
    "title": "Congratulations on completing Programming in Python for Data Science!",
    "section": "You did it!",
    "text": "You did it!\nWe covered a lot of ground but you managed to finished all 8 Modules. It’s important to celebrate this success."
  },
  {
    "objectID": "modules/module9/slides/module9_00.html#attribution",
    "href": "modules/module9/slides/module9_00.html#attribution",
    "title": "Congratulations on completing Programming in Python for Data Science!",
    "section": "Attribution",
    "text": "Attribution\n\nMaterial from UBC’s DSCI 511: Python Programming for Data Science by  Tom Beuzen.\nThe cereal dataset: 80 Cereals(c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported."
  },
  {
    "objectID": "modules/module9/slides/module9_00.html#special-thanks",
    "href": "modules/module9/slides/module9_00.html#special-thanks",
    "title": "Congratulations on completing Programming in Python for Data Science!",
    "section": "Special Thanks",
    "text": "Special Thanks\nNot only did you put in a lot of work by completing this course, but many people did too by helping make this course possible.\nSpecial thanks must be attributed to the following individuals and organizations (in alphabetical order):\n\n Tom Beuzen\nTim Head\n\nInes Montani\nJoel Ostblom\nElijah Willie\nThe Master of Data Science Program at UBC\nOur friends, family and colleagues for supporting us and cheering us on!"
  },
  {
    "objectID": "modules/module9/slides/module9_00.html#about-us",
    "href": "modules/module9/slides/module9_00.html#about-us",
    "title": "Congratulations on completing Programming in Python for Data Science!",
    "section": "About Us",
    "text": "About Us\n\nMike Gelbart\n\nWebsite: www.mikegelbart.com\nTwitter: @MikeGelbart  \n\nTiffany Timbers\n\nWebsite: www.tiffanytimbers.com\nTwitter: @TiffanyTimbers  \n\nHayley Boyce\n\nWebsite: www.hayleyfboyce.com\nTwitter: @HayleyFBoyce"
  },
  {
    "objectID": "modules/module8/slides/module8_27.html#summary",
    "href": "modules/module8/slides/module8_27.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 8",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nUse NumPy to create ndarrays with np.array() and from functions such as np.arange(), np.linspace() and np.ones().\nDescribe the shape, dimension and size of an array.\nIdentify null values in a dataframe and manage them by removing them using .dropna() or replacing them using .fillna().\nManipulate non-standard date/time formats into standard Pandas datetime using pd.to_datetime().\nFind, and replace text from a dataframe using verbs such as .replace().\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module8/slides/module8_27.html#attribution",
    "href": "modules/module8/slides/module8_27.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 8",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module8/slides/module8_19.html#recap",
    "href": "modules/module8/slides/module8_19.html#recap",
    "title": "Introduction to Working with Strings",
    "section": "Recap",
    "text": "Recap\nLet’s first remind ourselves of some of the methods we’ve already learned such as:\n\n.upper()\n.lower()\n.count()\n.split()\n\n\ninstrument = 'Violin'\ninstrument\n\n'Violin'\n\n\n\n\ninstrument.upper()\n\n'VIOLIN'\n\n\n\nAlthough we have already introduced you to strings to a certain degree, processing and working with this data type is an area that will require a substantial amount of learning.\nIn this course, we will only scratch the surface when it comes to strings.\nThat being said, we do hope to provide you with an adequate foundation in string processing.\nLet’s first remind ourselves of some of the methods we’ve already learned such as:\n\n.upper()\n.lower()\n.uppercase()\n.count()\n.split()\n\nWhen we work with just a general string, we can just use the function at the end of the object name.\nFor example, if our string object name was instrument.\nWe could convert to all uppercase characters with instrument.upper()."
  },
  {
    "objectID": "modules/module8/slides/module8_19.html#processing-string-columns",
    "href": "modules/module8/slides/module8_19.html#processing-string-columns",
    "title": "Introduction to Working with Strings",
    "section": "Processing String Columns",
    "text": "Processing String Columns\n\ncycling\n\n\n\n\n\n\n\n\nDate\nName\nType\nTime\nDistance\nComments\n\n\n\n\n0\nSep-10-2019 17:13\nAfternoon Ride\nRide\n2084\n12.62\nRain\n\n\n1\nSep-11-2019 06:52\nMorning Ride\nRide\n2531\n13.03\nrain\n\n\n2\nSep-11-2019 17:23\nAfternoon Ride\nRide\n1863\n12.52\nWet road but nice whether\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n30\nOct-10-2019 18:10\nAfternoon Ride\nRide\n1841\n12.59\nFeeling good after a holiday break!\n\n\n31\nOct-11-2019 07:47\nMorning Ride\nRide\n2463\n12.79\nStopped for photo of sunrise\n\n\n32\nOct-11-2019 18:16\nAfternoon Ride\nRide\n1843\n11.79\nBike feeling tight, needs an oil and pump\n\n\n\n\n33 rows × 6 columns\n\n\n\n\nThe only problem is that when we work with data, we will be applying these transformations, not to a single string, but to a whole column of them.\nWe saw back in Module 4 that string data is represented in a pandas dataframe using the dtype object.\nThis is the default dtype given to columns that have a mix of different data types or if pandas cannot identify the column as any other dtype.\nLet’s bring back our cycling dataframe to demonstrate how to work with columns of this dtype."
  },
  {
    "objectID": "modules/module8/slides/module8_19.html#strip",
    "href": "modules/module8/slides/module8_19.html#strip",
    "title": "Introduction to Working with Strings",
    "section": "Strip",
    "text": "Strip\n.strip() .\n\n\"Sunshine\" == \" Sunshine \"\n\nFalse\n\n\n\n\nstring1 = \" Sunshine \" \nnew_string1 = string1.strip()\nnew_string1\n\n'Sunshine'\n\n\n\n\n\"Sunshine\" == new_string1\n\nTrue\n\n\n\nOne function that might not seem that pertinent but is extremely useful is .strip() .\nstrip() removes characters starting or ending a string, with the default being spaces.\nFor Example:\nTo us, reading “Sunshine” and ” Sunshine ” are the same thing, but to Python, they are quite different because of the blank space surrounding it.\nThe blank space on either side of a string often needs to be removed depending on the analysis.\nWe can remove them in the example above using strip()."
  },
  {
    "objectID": "modules/module8/slides/module8_11.html#info-on-missing-values",
    "href": "modules/module8/slides/module8_11.html#info-on-missing-values",
    "title": "Working with Null Values",
    "section": "Info on missing values",
    "text": "Info on missing values\n\ncereal.info()\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 77 entries, 0 to 76\nData columns (total 6 columns):\n #   Column    Non-Null Count  Dtype  \n---  ------    --------------  -----  \n 0   name      77 non-null     object \n 1   mfr       77 non-null     object \n 2   calories  77 non-null     int64  \n 3   fat       77 non-null     int64  \n 4   fiber     77 non-null     float64\n 5   rating    77 non-null     float64\ndtypes: float64(2), int64(2), object(2)\nmemory usage: 3.7+ KB\n\n\n\nA good rule of thumb when conducting an analysis is to check early on how complete the dataset is.\n.info() is similar to .dtypes, but in addition to the dtype of each column, it includes the total number of non-null values contained in each column.\nLet’s try it out on a subset of our cereal dataset.\nHere we see the total number of rows at the top with RangeIndex: 77 entries, 0 to 76.\nThe Non-Null Count column specifies the number of non-null values.\nIn this case, we have a complete dataframe with zero null values for each column."
  },
  {
    "objectID": "modules/module8/slides/module8_11.html#dropping-null-values",
    "href": "modules/module8/slides/module8_11.html#dropping-null-values",
    "title": "Working with Null Values",
    "section": "Dropping Null Values",
    "text": "Dropping Null Values\n\ntrips_removed = cycling.dropna()\ntrips_removed\n\n\n\n\n\n\n\n\nDate\nName\nType\nTime\nDistance\nComments\n\n\n\n\n0\n2019-09-09 07:13:00\nMorning Ride\nRide\n2084\n12.62\nRain\n\n\n1\n2019-09-09 20:52:00\nAfternoon Ride\nRide\n2531\n13.03\nrain\n\n\n3\n2019-09-10 21:06:00\nAfternoon Ride\nRide\n2192\n12.84\nStopped for photo of sunrise\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n30\n2019-10-09 07:10:00\nMorning Ride\nRide\n1841\n12.59\nFeeling good after a holiday break!\n\n\n31\n2019-10-09 20:47:00\nAfternoon Ride\nRide\n2463\n12.79\nStopped for photo of sunrise\n\n\n32\n2019-10-10 07:16:00\nMorning Ride\nRide\n1843\n11.79\nBike feeling tight, needs an oil and pump\n\n\n\n\n30 rows × 6 columns\n\n\n\n\nThe easiest and simplest way of handling nulls values is to remove those rows from the dataset.\nIn a fashion similar to dropping columns, we can drop rows if they contain a NaN value.\nIt’s important that we take some necessary precautions and not drop a large portion of the data.\nIn our example above, if we were to remove the 3 rows we identified to contain NaN values, we do it in the following way.\nNotice that index 2 was removed, and we only have 30 rows in our dataframe now."
  },
  {
    "objectID": "modules/module8/slides/module8_11.html#replacing-null-values",
    "href": "modules/module8/slides/module8_11.html#replacing-null-values",
    "title": "Working with Null Values",
    "section": "Replacing Null Values",
    "text": "Replacing Null Values\n\ncycling_zero_fill = cycling.fillna(value=0)\ncycling_zero_fill\n\n\n\n\n\n\n\n\nDate\nName\nType\nTime\nDistance\nComments\n\n\n\n\n0\n2019-09-09 07:13:00\nMorning Ride\nRide\n2084\n12.62\nRain\n\n\n1\n2019-09-09 20:52:00\nAfternoon Ride\nRide\n2531\n13.03\nrain\n\n\n2\n2019-09-10 07:23:00\nMorning Ride\nRide\n1863\n0.00\nWet road but nice weather\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n30\n2019-10-09 07:10:00\nMorning Ride\nRide\n1841\n12.59\nFeeling good after a holiday break!\n\n\n31\n2019-10-09 20:47:00\nAfternoon Ride\nRide\n2463\n12.79\nStopped for photo of sunrise\n\n\n32\n2019-10-10 07:16:00\nMorning Ride\nRide\n1843\n11.79\nBike feeling tight, needs an oil and pump\n\n\n\n\n33 rows × 6 columns\n\n\n\n\nAlternately, if we have a small dataset and we don’t want to rid ourselves of any data, we may prefer to replace NaN with a particular value.\nWe can do so with .fillna().\nPerhaps it’s missing from the data because he didn’t cycle that particular day. Replacing the NaN value with 0, in this case, would make sense.\nNow index 2 now has a Distance of 0.00."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#what-is-numpy",
    "href": "modules/module8/slides/module8_01.html#what-is-numpy",
    "title": "NumPy and 1D Arrays",
    "section": "What is NumPy?",
    "text": "What is NumPy?\nNumPy -&gt; “Numerical Python extensions”.\nNumPy offers:\n\nArrays\nMathematical Constants\nMathematical Functions\n\n\nThe name NumPy is derived from “Numerical Python extensions”.\nNumPy is a Python library used primarily for computing involving numbers. It is especially useful as it provides a multidimensional array object, called an array.\nIn addition, NumPy also offers numerous other mathematical functions used in the domain of Linear Algebra and Calculus."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#so-what-is-an-array",
    "href": "modules/module8/slides/module8_01.html#so-what-is-an-array",
    "title": "NumPy and 1D Arrays",
    "section": "So What is an Array?",
    "text": "So What is an Array?\n\nmy_list = [1, 2, 3, 4, 5]\nmy_list\n\n[1, 2, 3, 4, 5]\n\n\n\n\nmy_array = np.array((1, 2, 3, 4, 5))\nmy_array\n\narray([1, 2, 3, 4, 5])\n\n\n\n\ntype(my_array)\n\nnumpy.ndarray\n\n\n\nA NumPy array is somewhat like a list.\nThey are considered their own data type.\nWe can see this by using type on an array."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#creating-1d-arrays",
    "href": "modules/module8/slides/module8_01.html#creating-1d-arrays",
    "title": "NumPy and 1D Arrays",
    "section": "Creating 1D Arrays",
    "text": "Creating 1D Arrays\n\nmy_array = np.array([1, 2, 3, 4])\nmy_array\n\narray([1, 2, 3, 4])\n\n\n\n\nnp.zeros(10)\n\narray([0., 0., 0., 0., 0., 0., 0., 0., 0., 0.])\n\n\n\n\nnp.ones(4)\n\narray([1., 1., 1., 1.])\n\n\n\nWe can make arrays from lists as well as tuples.\nThere are also several built-in NumPy functions that create different arrays with patterns and requirements.\nnp.zeros() will create an array containing 0 for each element, and the input argument specifies the size.\nHere we specified 10, so our array has 10 elements.\nSimilarly, np.ones() does the same thing except with an array of elements with 1 values.\nNow we’ve specified 4 as the input, and so this array has 4 elements."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#elementwise-operations",
    "href": "modules/module8/slides/module8_01.html#elementwise-operations",
    "title": "NumPy and 1D Arrays",
    "section": "Elementwise operations",
    "text": "Elementwise operations\n\narray1 = np.ones(4)\narray1\n\narray([1., 1., 1., 1.])\n\n\n\n\narray2 = array1 + 1\narray2\n\narray([2., 2., 2., 2.])\n\n\n\n\narray1 + array2\n\narray([3., 3., 3., 3.])\n\n\n\n\narray1 * array2\n\narray([2., 2., 2., 2.])\n\n\n\nLet’s talk about how operations are calculated with arrays.\nWe discussed that array and lists are similar but not quite the same.\nArrays are designed for convenience mathematically, so arrays operate in an element-wise manner.\nWhen we do operations, the operation is done to each element in the array.\nIf we add to our array, 1 is added to each element in the array.\nIf we add two arrays together, the element at identical index positions are added.\nSimilarly, if we multiply 2 arrays together, the index at each position are multiplied together."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#slicing-and-indexing-1d-arrays",
    "href": "modules/module8/slides/module8_01.html#slicing-and-indexing-1d-arrays",
    "title": "NumPy and 1D Arrays",
    "section": "Slicing and Indexing 1D Arrays",
    "text": "Slicing and Indexing 1D Arrays\n\narr = np.arange(10)\narr\n\narray([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n\n\n\narr[7]\n\nnp.int64(7)\n\n\n\n\narr[2:6]\n\narray([2, 3, 4, 5])\n\n\n\n\narr[-1]\n\nnp.int64(9)\n\n\n\nWhen it comes to slicing, 1D arrays are sliced in the same manner that lists are.\nWe can obtain an individual location by putting the index position in square brackets.\nAnd just like slicing dataframes with .iloc[], when we want an interval of values, the first value in the bracket is included, and the last value is excluded.\nTo obtain elements from right to left, we use negative integers."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#boolean-indexing",
    "href": "modules/module8/slides/module8_01.html#boolean-indexing",
    "title": "NumPy and 1D Arrays",
    "section": "Boolean Indexing",
    "text": "Boolean Indexing\n\ngrade_array = np.array([98, 87, 103, 92, 67, 107, 78, 104, 85, 105])\ngrade_array\n\narray([ 98,  87, 103,  92,  67, 107,  78, 104,  85, 105])\n\n\n\n\nthreshold = np.array([98, 87, 103, 92, 67, 107, 78, 104, 85, 105]) &gt; 100\nthreshold\n\narray([False, False,  True, False, False,  True, False,  True, False,  True])\n\n\n\n\ngrade_array[threshold] = 100\ngrade_array\n\narray([ 98,  87, 100,  92,  67, 100,  78, 100,  85, 100])\n\n\n\nLet’s now explore Boolean indexing.\nLet’s take a 1D array that consists of 10 elements.\nRemember that when we do most operations, it occurs in an element-wise manner.\nPerhaps we are grading exams that contain bonus marks.\nThe max possible allowed mark on the exam is 100%, so we must cap the grades, so any mark greater than 100 is set to 100. First, we check which values are greater than 100.\nThis produces an array containing Boolean values, which we store in the object threshold.\nThe first and second elements are False since both 98 and 87 and not larger than 100. However, the 3rd element is True since 103 is larger than 100.\nWe now can replace all those values that have a True Boolean, with a new value; in this case, let’s assign them a value of 100, the maximum possible allowed grade."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#why-numpy",
    "href": "modules/module8/slides/module8_01.html#why-numpy",
    "title": "NumPy and 1D Arrays",
    "section": "Why NumPy?",
    "text": "Why NumPy?\n\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\n\ntype(cereal.loc[3,'calories'])\n\nnumpy.int64\n\n\n\n\ncereal['calories'].to_numpy()\n\narray([ 70, 120,  70,  50, 110, 110, 110, 130,  90,  90, 120, 110, 120, 110, 110, 110, 100, 110, 110, 110, 100, 110, 100, 100, 110, 110, 100, 120, 120, 110, 100, 110, 100, 110, 120, 120, 110, 110, 110, 140, 110, 100, 110, 100, 150, 150, 160, 100, 120, 140,  90, 130, 120, 100,  50,  50, 100, 100, 120, 100,  90, 110, 110,  80,  90,  90, 110, 110,  90, 110, 140, 100, 110, 110, 100, 100, 110])\n\n\n\nSo why, NumPy?\nLists are often used with a similar purpose of arrays, but they are slow to process.\nBecause of this, NumPy is used to create many other structures.\nIn fact, let’s refresh ourselves on certain values in a dataframe.\nRemember when we obtained the data type of a specific value in a dataframe?\nWe obtained this &lt;class 'numpy.int64'&gt;, which we originally ignored.\nThis is because a pandas dataframe is built off of a multidimensional (2D specifically) array!\nWe will explain more about multidimensional arrays in the next set of slides.\nWe can actually convert an entire pandas column into an array pretty easily using np.to_numpy()."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#numpy-constants-and-functions",
    "href": "modules/module8/slides/module8_01.html#numpy-constants-and-functions",
    "title": "NumPy and 1D Arrays",
    "section": "NumPy Constants and Functions",
    "text": "NumPy Constants and Functions\n\n\nnp.pi\n\n3.141592653589793\n\n\n\n\n\nnp.inf\n\ninf\n\n\n\n\n\nnp.e\n\n2.718281828459045\n\n\n\nNumPy also offers an assortment of handy mathematical constants and functions."
  },
  {
    "objectID": "modules/module8/slides/module8_01.html#numpy-functions",
    "href": "modules/module8/slides/module8_01.html#numpy-functions",
    "title": "NumPy and 1D Arrays",
    "section": "NumPy Functions",
    "text": "NumPy Functions\n\nnp.prod([2, 3, 1])\n\nnp.int64(6)\n\n\n\n\nnp.diff([2, 5, 20])\n\narray([ 3, 15])\n\n\n\n\nnp.log10(100)\n\nnp.float64(2.0)\n\n\n\nThe full list of mathematical functions are available at this NumPy website.\n\nNumPy’s functions include but are not limited to:\n\nnp.prod() which calculates the product of values in an array\nnp.diff() which calculates the difference between element (left element subtracted from the right element)\nAnd other functions such as np.log() or trigonometric ones like np.sin()"
  },
  {
    "objectID": "modules/module8/module8-27-what_did_we_just_learn.html",
    "href": "modules/module8/module8-27-what_did_we_just_learn.html",
    "title": "7. What Did We Just Learn?",
    "section": "",
    "text": "7. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "7. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module8/module8-23-more_advanced_string_processing.html",
    "href": "modules/module8/module8-23-more_advanced_string_processing.html",
    "title": "6. More Advanced String Processing",
    "section": "",
    "text": "6. More Advanced String Processing\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "6. More Advanced String Processing"
    ]
  },
  {
    "objectID": "modules/module8/module8-19-introduction_to_working_with_strings.html",
    "href": "modules/module8/module8-19-introduction_to_working_with_strings.html",
    "title": "5. Introduction to Working with Strings",
    "section": "",
    "text": "5. Introduction to Working with Strings\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "5. Introduction to Working with Strings"
    ]
  },
  {
    "objectID": "modules/module8/module8-16-working_with_dates_and_time.html",
    "href": "modules/module8/module8-16-working_with_dates_and_time.html",
    "title": "4. Working with Dates and Time",
    "section": "",
    "text": "4. Working with Dates and Time\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "4. Working with Dates and Time"
    ]
  },
  {
    "objectID": "modules/module8/module8-11-working_with_null_values.html",
    "href": "modules/module8/module8-11-working_with_null_values.html",
    "title": "3. Working with Null Values",
    "section": "",
    "text": "3. Working with Null Values\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "3. Working with Null Values"
    ]
  },
  {
    "objectID": "modules/module8/module8-05-multi-dimensional_arrays.html",
    "href": "modules/module8/module8-05-multi-dimensional_arrays.html",
    "title": "2. Multi-dimensional Arrays",
    "section": "",
    "text": "2. Multi-dimensional Arrays\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "2. Multi-dimensional Arrays"
    ]
  },
  {
    "objectID": "modules/module8/module8-01-numpy_and_1d_arrays.html",
    "href": "modules/module8/module8-01-numpy_and_1d_arrays.html",
    "title": "1. NumPy and 1D Arrays",
    "section": "",
    "text": "1. NumPy and 1D Arrays\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "1. NumPy and 1D Arrays"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#summary",
    "href": "modules/module1/slides/module1_34.html#summary",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\nLoad the pandas library into Python.\nDemonstrate indexing and slicing with .loc[] and .iloc[].\nDemonstrate Selecting columns of a dataframe using df[] notation.\nObtain values from a dataframe using .loc[].\nSort a dataframe using .sort_values().\nCreate simple summary statistics using .describe().\nConstruct simple visualizations using Altair.\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#assignment-instructions",
    "href": "modules/module1/slides/module1_34.html#assignment-instructions",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Assignment Instructions",
    "text": "Assignment Instructions\nThe assignment will concentrate not only on the learning objectives above but also\n\nNavigating a Jupyter Notebook\nUnderstanding cells\nCreating Markdown cells and coding cells"
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#attribution",
    "href": "modules/module1/slides/module1_34.html#attribution",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "href": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "title": "Frequency Tables and Writing CSVs",
    "section": "Saving a dataframe",
    "text": "Saving a dataframe\n\nmfr_freq.to_csv('data/mfr_frequency.csv', index=False)\n\n\nSometimes it is useful to save a new dataframe to a file like a csv file for future use by you or somebody else.\nWe can do this using a method called .to_csv().\nWe put our desired csv file name in quotations within the parentheses and follow it with the argument index=False so we don’t export our index column which is just a column of numbers."
  },
  {
    "objectID": "modules/module1/slides/module1_24.html#sorting",
    "href": "modules/module1/slides/module1_24.html#sorting",
    "title": "Sorting Dataframes",
    "section": "Sorting",
    "text": "Sorting\n\ncereal.sort_values(by='rating')\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nshelf\nweight\ncups\nrating\n\n\n\n\n10\nCap'n'Crunch\nQ\n120\n2\n1.0\n0.75\n18.042851\n\n\n12\nCinnamon Toast Crunch\nG\n120\n2\n1.0\n0.75\n19.823573\n\n\n35\nHoney Graham Ohs\nQ\n120\n2\n1.0\n1.00\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65\nShredded Wheat spoon size\nN\n90\n1\n1.0\n0.67\n72.801787\n\n\n64\nShredded Wheat 'n'Bran\nN\n90\n1\n1.0\n0.67\n74.472949\n\n\n3\nAll-Bran with Extra Fiber\nK\n50\n3\n1.0\n0.50\n93.704912\n\n\n\n\n77 rows × 7 columns\n\n\n\n\nWhen we read in our data, it is generally ordered in the same way it is stored.\nWe can easily sort the rows of a dataframe based on the values within a column.\nThe verb that we use for that is .sort_values().\nFor example, if we wanted to order the cereals based on rating, we could do so by using the argument by within the .sort_values() verb.\nThis allows us to see the cereals with lower ratings on the top."
  },
  {
    "objectID": "modules/module1/slides/module1_13.html#unordered-indexing",
    "href": "modules/module1/slides/module1_13.html#unordered-indexing",
    "title": "Selecting Using .loc[]",
    "section": "Unordered Indexing",
    "text": "Unordered Indexing\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1\n1.0\n0.67\n49.787445\n\n\n75\nWheaties\nG\nCold\n100\n...\n1\n1.0\n1.00\n51.592193\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1\n1.0\n0.75\n36.187559\n\n\n\n\n77 rows × 16 columns\n\n\n\n\nHere we have our trusty cereal dataframe.\nWhat would we do if we wanted to select columns and rows that don’t fall consecutively or if we wanted to rearrange them?"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#cereal-data",
    "href": "modules/module1/slides/module1_07.html#cereal-data",
    "title": "Slicing with Pandas Using .loc[]",
    "section": "Cereal Data",
    "text": "Cereal Data\n\nimport pandas as pd\n  \ncereal = pd.read_csv('data/cereal.csv')\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\nAttribution:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported\n\nCongratulations on writing your first code!\nWe have read in our data, and we know the dimensions. Well, now what?\nLet’s go over how we would index, slice, and select certain columns or rows of our data.\nLet’s start by importing pandas and loading in a dataset named cereal.csv, and we will save it as cereal.\nWe can see all the columns and the first 5 rows of the dataframe using .head()\nLet’s say we only want certain rows, however, of the dataframe or certain columns.\nWe talked about how .head() will generate the first few rows of a dataframe (5 as default), but what if we wanted the rows from 5-10?\nThe first column of this dataframe is called the index.\nEach row has a label (the index) as well as a position. In this case, the index label of an observation is the same as it’s position.\nThis doesn’t always have to be the case. We can assign another column as the index; however, we will wait to discuss this in the next module."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "href": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "title": "What is a dataframe?",
    "section": "What is a dataframe?",
    "text": "What is a dataframe?\n\n\nOften, the first thing we need to do in data analysis is to load in data.\nIn this case, we will be using the programming language Python.\nWhen we bring spreadsheet-like data, into Python, it is generally shaped like a rectangle (think of Microsoft Excel tables for example) it is represented as what we call a dataframe object. It is very similar to a spreadsheet."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "href": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "title": "What is a dataframe?",
    "section": "What is a CSV file?",
    "text": "What is a CSV file?\n\n\n\nThe first kind of data we will learn how to load into Python as a dataframe is the spreadsheet-like comma-separated values format (.csv for short).\nThese files have names ending in .csv, and can be opened open and saved from common spreadsheetlike programs like Microsoft Excel and Google Sheets.\nFor example, we will be importing the .csv file you saw in the first slide named “candybars.csv”.\nIf we were to open this data in a plain text editor, we would be able to see each row on its own line, and each entry in the table separated by a comma."
  },
  {
    "objectID": "modules/module1/module1-34-what_did_we_just_learn.html",
    "href": "modules/module1/module1-34-what_did_we_just_learn.html",
    "title": "13. What Did We Just Learn?",
    "section": "",
    "text": "13. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "13. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module1/module1-31-quick_viz_with_altair.html",
    "href": "modules/module1/module1-31-quick_viz_with_altair.html",
    "title": "12. Quick Viz with Altair",
    "section": "",
    "text": "12. Quick Viz with Altair\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "12. Quick Viz with Altair"
    ]
  },
  {
    "objectID": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "href": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "title": "11. Frequency Tables and Writing CSVs",
    "section": "",
    "text": "11. Frequency Tables and Writing CSVs\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "11. Frequency Tables and Writing CSVs"
    ]
  },
  {
    "objectID": "modules/module1/module1-26-summary_statistics.html",
    "href": "modules/module1/module1-26-summary_statistics.html",
    "title": "10. Summary Statistics",
    "section": "",
    "text": "10. Summary Statistics\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "10. Summary Statistics"
    ]
  },
  {
    "objectID": "modules/module1/module1-24-sorting_dataframes.html",
    "href": "modules/module1/module1-24-sorting_dataframes.html",
    "title": "9. Sorting Dataframes",
    "section": "",
    "text": "9. Sorting Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "9. Sorting Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "href": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "title": "8. Slicing and Selecting Using df.iloc[]",
    "section": "",
    "text": "8. Slicing and Selecting Using df.iloc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "8. Slicing and Selecting Using df.iloc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-18-selecting_a_single_column.html",
    "href": "modules/module1/module1-18-selecting_a_single_column.html",
    "title": "7. Selecting a Single Column",
    "section": "",
    "text": "7. Selecting a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "7. Selecting a Single Column"
    ]
  },
  {
    "objectID": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "href": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "title": "6. Obtaining Dataframe Values",
    "section": "",
    "text": "6. Obtaining Dataframe Values\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "6. Obtaining Dataframe Values"
    ]
  },
  {
    "objectID": "modules/module1/module1-13-selecting_using_.loc[].html",
    "href": "modules/module1/module1-13-selecting_using_.loc[].html",
    "title": "5. Selecting Using .loc[]",
    "section": "",
    "text": "5. Selecting Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "5. Selecting Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "href": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "title": "4. Slicing Columns Using .loc[]",
    "section": "",
    "text": "4. Slicing Columns Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "4. Slicing Columns Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "href": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "title": "3. Slicing with Pandas Using .loc[]",
    "section": "",
    "text": "3. Slicing with Pandas Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "3. Slicing with Pandas Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-introduction_to_pandas.html",
    "href": "modules/module1/module1-03-introduction_to_pandas.html",
    "title": "2. Introduction to Pandas",
    "section": "",
    "text": "2. Introduction to Pandas\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "2. Introduction to Pandas"
    ]
  },
  {
    "objectID": "modules/module1/module1-01-introduction_to_dataframes.html",
    "href": "modules/module1/module1-01-introduction_to_dataframes.html",
    "title": "1. Introduction to Dataframes",
    "section": "",
    "text": "1. Introduction to Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "1. Introduction to Dataframes"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\n\nDefine tidy data and explain why it is an optimal format for data analysis.\nTransform data into the tidy data format using pandas.\nDemonstrate fundamental programming concepts such as loops and conditionals.\nUnderstand the key data structures in Python.\nRead data into Python data from vanilla (e.g., .csv) and non-standard plain text files, as well as common spreadsheet file types (e.g., .xls).\nConstruct simple plots using Altair\nManipulate a single data table by:\n7.1 Filtering rows based on a criterion or combination of criteria.\n7.2 Selecting variables.\n7.3 Creating new variables and modifying pre-existing ones.\n7.4 Rearranging the observations or variables by sorting.\n\nManage and manipulate data with dates and times, missing values and categorical variables as well as renaming dataframe columns.\nProduce human-readable code that incorporates best practices of programming and coding style."
  },
  {
    "objectID": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "href": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "title": "1. Programming in Python for Data Science",
    "section": "",
    "text": "1. Programming in Python for Data Science\n\nVideoSlides",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "1. Programming in Python for Data Science"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Programming in Python for Data Science!",
    "section": "",
    "text": "Welcome to Programming in Python for Data Science!\nThis course is part of the Key Capabilities for Data Science program and will teach you how to conduct data analysis in Python. During the course, you will work with powerful Python packages made for data-science, including Pandas for processing tabular data, Altair for data visualization and NumPy for working with numerical data types.\nYou will also learn about iteration, flow control, and the data types relevant to data exploration and analysis. You will leave this course capable of processing raw data into a format suitable for analysis, writing your own analysis functions, and deriving data-driven insights via the creation of interactive visualizations and summary tables.\nCourse prerequisites: None",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "0. Welcome!"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module_learning_outcomes.html",
    "href": "modules/module1/module1-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html",
    "href": "modules/module1/module1-04-definitions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html#coding-questions",
    "href": "modules/module1/module1-04-definitions.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html",
    "href": "modules/module1/module1-12-slicing_columns_only.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "href": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html",
    "href": "modules/module1/module1-17-practicing_selecting_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "href": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html",
    "href": "modules/module1/module1-19-practicing_selecting.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "href": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html",
    "href": "modules/module1/module1-25-practice_sorting.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "href": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html",
    "href": "modules/module1/module1-32-practicing_bar_charts.html",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nYou are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOk, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "title": "12.1. Exercises",
    "section": "",
    "text": "You are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Ok, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\n\nLoad the pandas library into Python.\n\nDemonstrate indexing and slicing with .loc[] and .iloc[].\n\nDemonstrate Selecting columns of a dataframe using df[] notation.\n\nObtain values from a dataframe using .loc[].\n\nSort a dataframe using .sort_values().\n\nCreate simple summary statistics using .describe().\n\nConstruct simple visualizations using Altair.\n\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#importing-pandas",
    "href": "modules/module1/slides/module1_03.html#importing-pandas",
    "title": "What is Pandas?",
    "section": "Importing pandas",
    "text": "Importing pandas\n\nimport pandas as pd\n\n\nTo analyze dataframes and load these csv files, we need to make sure that we bring in the pandas library into Python.\nBefore we start writing any valuable code for loading data and doing data analysis we need to import it with the following code."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#reading-in-data",
    "href": "modules/module1/slides/module1_03.html#reading-in-data",
    "title": "What is Pandas?",
    "section": "Reading in Data",
    "text": "Reading in Data\n\ncandy = pd.read_csv('data/candybars.csv')\n\n\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\nBoth\n\n\n\n\n25 rows × 6 columns\n\n\n\n\nNext we can bring in our data named candybars which is stored as a .csv file.\nLet’s break this up:\n\npd is the short form for pandas, which we are using to manipulate our dataframe.\n\nread_csv() is the tool that does the job and, in this case, it is reading in the csv file named candybars.csv.\n\ncandy is The dataframe is now saved as an object called candy.\n\nThe dataframe is stored in an object named candy and we can inspect in by “calling” the object name.\nIn these slides we can differentiate between the code that we typed in with a light grey background and it’s output which has a dark grey background.\nFrom this dataframe, we can see that there are 25 different candy bars and 6 columns."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "href": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "title": "What is Pandas?",
    "section": "Functions/Methods and Attributes",
    "text": "Functions/Methods and Attributes\n\nAttributes\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\n\nFunctions\nIn the example of pd.read_csv(), this function does the action of reading in our data.\n\nSomething you may have noticed is that when we use pd.read_csv() we put our instructions within the parentheses, whereas, when we use .shape or .head() the object that we are operating on comes before our desired command.\nIn Python, we use functions, methods and attributes. These are special words in Python that take instructions (we call these arguments) and do something.\nAttributes can be distinguished from methods and functions as they do not have parentheses.\nThey can be thought of as nouns or adjectives that describe an object.\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\nFunctions and methods have parentheses.\nThey can be thought of as verbs that complete an action.\nIn the example of pd.read_csv(), this function does the action of reading in our data.\nThis is going to be discussed in more detail later in the course but now, simply be aware of the way we write the different instructions."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#comments",
    "href": "modules/module1/slides/module1_03.html#comments",
    "title": "What is Pandas?",
    "section": "Comments",
    "text": "Comments\n\n# This line does not execute anything. \n\n\n\ncandy.shape  # This will output the shape of the dataframe\n\n\nWhile we write code, it’s often useful to annotate it or include information for humans that we do not want to executed.\nThe easiest way to do this is with a hash (#) symbol. This creates a single line comment and prevents anything written after it from being executed by Python.\nWe use comments frequently in the exercises to help you understand what to do and what our intentions are.\nIt’s good practice to use them to explain our code so if we or someone else wants to read it at a later date, it’s easier to understand."
  },
  {
    "objectID": "modules/module1/slides/module1_11.html#so-far",
    "href": "modules/module1/slides/module1_11.html#so-far",
    "title": "Slicing Only Columns Using .loc[]",
    "section": "So Far",
    "text": "So Far\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\n\ncereal.loc['row name start':'row name end', 'column name start':'column name end']\n\nIf we aren’t slicing any columns, but we are slicing rows we can shorten that to\n\ndf.loc['row name start':'row name end']\n\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify we want all the row first with just a colon : followed by interval of the columns:\n\ndf.loc[:, 'column name start':'column name end']\n\nWe can read : as “to”.\nIf the indices are labeled with numbers, we do not need “quotations” when calling them. This is only when the labels are using letters.\n\n\nLet’s talk about what we have covered so far.\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\nIf we are not slicing any columns, but we are slicing rows we only need to specify the row labels.\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify rows first and therefore we would need to make it clear with a colon first that we are slicing all the rows followed by the column labels.\nWe can read : as “to”.\nAnd finally, if the row index is labeled with numbers, we do not need “quotations” when slicing."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "href": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Slicing Dataframe",
    "text": "Slicing Dataframe\n\ncereal = pd.read_csv('data/cereal.csv')\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nUp until point, we have been manipulating our dataframe with column and row labels using .loc[].\nSlicing can also be done by the location position of each row with .iloc[].\n.iloc[] is very similar to .loc[], however, the “i” in iloc refers to the index integer position.\nWe are going to return to our cereal dataset and take a look at the first 10 rows.\nLet’s say we want the rows from All-Bran to Apple Cinnamon Cheerios, but we want to slice based on their position instead of their label.\nUsing Python’s counting method of starting at zero, we conclude that All-Bran to be at position to 2.\nWe get Apple Cinnamon Cheerios position to be 5 in the same way.\nWe are lucky with this dataframe because our index labels match the position of the rows, and this makes things a little bit simpler."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "href": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Selecting with .iloc[]",
    "text": "Selecting with .iloc[]\n\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\n\n\n\n\n\n\nRow\nRow Position\n\n\n\n\nAlmond Delight\nPosition 4\n\n\nBasic 4\nPosition 7\n\n\nApple Jacks\nPosition 6\n\n\n\n\n\n\n\n\n\n\n\n\nColumns\nColumn Position\n\n\n\n\nname\nPosition 0\n\n\ncalories\nPosition 3\n\n\nfat\nPosition 5\n\n\ntype\nPosition 2\n\n\n\n\n\n\n\n\nSelecting using .iloc[] is done identically to .loc[], however, the items within each set of square brackets MUST be integers, and not in quotation marks.\nLet’s say we want the rows Almond Delight, Basic 4 and Apple Jacks with the columns name, calories, fat and type and in that specific order."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "href": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "title": "Summary Statistics",
    "section": "Numerical and Categorical Columns",
    "text": "Numerical and Categorical Columns\nCategorical data\nConsists of qualitative observations such as characteristics - things generally containing words.\nExamples\n\nColours\nNames\n\n\nNumerical data\nThese data are usually expressed with numbers.\nExamples\n\nMeasurements\nQuantities\n\n\nBefore we go further, let’s quickly discuss the 2 different types of data.\nCategorical data consists of qualitative observations such as characteristics - things generally containing names or words. Examples would be colours or names of things.\nNumerical data are usually expressed with numbers such as measurements or quantities.\nOur columns in our dataframe are considered one of the two of these."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#pandas-describe",
    "href": "modules/module1/slides/module1_26.html#pandas-describe",
    "title": "Summary Statistics",
    "section": "Pandas describe()",
    "text": "Pandas describe()\n\ncereal.describe()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\n\n\ncount\n77.000000\n77.000000\n77.000000\n77.000000\n...\n77.000000\n77.000000\n77.000000\n77.000000\n\n\nmean\n106.883117\n2.545455\n1.012987\n159.675325\n...\n2.207792\n1.029610\n0.821039\n42.665705\n\n\nstd\n19.484119\n1.094790\n1.006473\n83.832295\n...\n0.832524\n0.150477\n0.232716\n14.047289\n\n\nmin\n50.000000\n1.000000\n0.000000\n0.000000\n...\n1.000000\n0.500000\n0.250000\n18.042851\n\n\n25%\n100.000000\n2.000000\n0.000000\n130.000000\n...\n1.000000\n1.000000\n0.670000\n33.174094\n\n\n50%\n110.000000\n3.000000\n1.000000\n180.000000\n...\n2.000000\n1.000000\n0.750000\n40.400208\n\n\n75%\n110.000000\n3.000000\n2.000000\n210.000000\n...\n3.000000\n1.000000\n1.000000\n50.828392\n\n\nmax\n160.000000\n6.000000\n5.000000\n320.000000\n...\n3.000000\n1.500000\n1.500000\n93.704912\n\n\n\n\n8 rows × 13 columns\n\n\n\n\nPandas has a lot up its sleeve but one of the most useful methods is called .describe() and it does exactly that. it describes our data.\nLet’s try it out on our cereal dataset.\nBy default df.describe() only shows numerical columns."
  },
  {
    "objectID": "modules/module8/module8-00-module_learning_outcomes.html",
    "href": "modules/module8/module8-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module8/module8-02-numpy_and_array_questions.html",
    "href": "modules/module8/module8-02-numpy_and_array_questions.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "array([ 0, 5, 10, 15, 20, 25, 30])\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s explore how Python compares lists and arrays.\nTasks:\n\nCreate 2 lists of the same length and save each as objects named a_list and b_list.\nUsing Boolean operators, what is outputted when you test to see if they are equal?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using [] or list() notation?\nAre you using == to check if the lists are equal?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s do the same exercises using arrays.\nTasks:\n\nCreate 2 arrays of the same length and save each as objects named a_array and b_array.\nUsing Boolean operators, what is outputted when you test to see if they are equal?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using np.array() with parentheses to make your arrays?\nAre you using == to check if the arrays are equal?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is an example of how useful arrays can be when doing numerical computation! To compare each element in a list would take more code and time for the same result.",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-02-numpy_and_array_questions.html#numpy-and-array-questions",
    "href": "modules/module8/module8-02-numpy_and_array_questions.html#numpy-and-array-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "array([ 0, 5, 10, 15, 20, 25, 30])",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-02-numpy_and_array_questions.html#numpy-practice",
    "href": "modules/module8/module8-02-numpy_and_array_questions.html#numpy-practice",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s explore how Python compares lists and arrays.\nTasks:\n\nCreate 2 lists of the same length and save each as objects named a_list and b_list.\nUsing Boolean operators, what is outputted when you test to see if they are equal?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using [] or list() notation?\nAre you using == to check if the lists are equal?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow let’s do the same exercises using arrays.\nTasks:\n\nCreate 2 arrays of the same length and save each as objects named a_array and b_array.\nUsing Boolean operators, what is outputted when you test to see if they are equal?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using np.array() with parentheses to make your arrays?\nAre you using == to check if the arrays are equal?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis is an example of how useful arrays can be when doing numerical computation! To compare each element in a list would take more code and time for the same result.",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-06-make_that_array.html",
    "href": "modules/module8/module8-06-make_that_array.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "np.ones((4, 3))\n\n\n\n\n\n\n\narray([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15]])\n\n\n\n\narray([[[ 0,  1,  2,  3,  4],\n        [ 5,  6,  7,  8,  9]],\n\n       [[10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19]],\n\n       [[20, 21, 22, 23, 24],\n        [25, 26, 27, 28, 29]]])\n\n\n\n\n\n\n\n\n\n\n\nUse the following array named hurray to answer the next set of questions.\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17]])\n# Question 1\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n\n\n\n# Question 2\narray([[10, 11],\n       [13, 14]])\n\n\n\n\n# Question 3\narray([[ 0,  3,  6,  9, 12, 15],\n       [ 1,  4,  7, 10, 13, 16],\n       [ 2,  5,  8, 11, 14, 17]])\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s make an array and find its size and dimension.\nTasks:\n\nCreate an array named arr1 that contains only elements with values 1 and a shape of (3,5).\nSave the dimension and size of arr1 in objects named arr1_dim and arr1_size respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .ones((3,5))?\nAre you using .ndim and .size?\nAre you saving your objects as the correct names?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s make a new array and transform it by slicing and transposing.\nTasks:\n\nCreate an array named arr2 using np.linspace() with 6 equally spaced values from 1 to 16 and a shape of (2,3) (You’ll need .reshape() for this!).\nTranspose the array and name it arr2t.\nFinally, slice the new object arr2t so it only includes the values 7 and 16. Save this as an object named sliced_arr2t.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .reshape() to change the dimension of np.linspace()?\nAre you using .T?\nAre you slicing with [:,1]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-06-make_that_array.html#make-that-array",
    "href": "modules/module8/module8-06-make_that_array.html#make-that-array",
    "title": "2.1. Exercises",
    "section": "",
    "text": "np.ones((4, 3))",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-06-make_that_array.html#shape-size-and-dimension",
    "href": "modules/module8/module8-06-make_that_array.html#shape-size-and-dimension",
    "title": "2.1. Exercises",
    "section": "",
    "text": "array([[ 0,  1,  2,  3,  4,  5,  6,  7],\n       [ 8,  9, 10, 11, 12, 13, 14, 15]])\n\n\n\n\narray([[[ 0,  1,  2,  3,  4],\n        [ 5,  6,  7,  8,  9]],\n\n       [[10, 11, 12, 13, 14],\n        [15, 16, 17, 18, 19]],\n\n       [[20, 21, 22, 23, 24],\n        [25, 26, 27, 28, 29]]])",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-06-make_that_array.html#more-arrays-questions",
    "href": "modules/module8/module8-06-make_that_array.html#more-arrays-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Use the following array named hurray to answer the next set of questions.\narray([[ 0,  1,  2],\n       [ 3,  4,  5],\n       [ 6,  7,  8],\n       [ 9, 10, 11],\n       [12, 13, 14],\n       [15, 16, 17]])\n# Question 1\narray([[0, 1, 2],\n       [3, 4, 5],\n       [6, 7, 8]])\n\n\n\n\n# Question 2\narray([[10, 11],\n       [13, 14]])\n\n\n\n\n# Question 3\narray([[ 0,  3,  6,  9, 12, 15],\n       [ 1,  4,  7, 10, 13, 16],\n       [ 2,  5,  8, 11, 14, 17]])",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-06-make_that_array.html#coding-questions",
    "href": "modules/module8/module8-06-make_that_array.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s make an array and find its size and dimension.\nTasks:\n\nCreate an array named arr1 that contains only elements with values 1 and a shape of (3,5).\nSave the dimension and size of arr1 in objects named arr1_dim and arr1_size respectively.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .ones((3,5))?\nAre you using .ndim and .size?\nAre you saving your objects as the correct names?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s make a new array and transform it by slicing and transposing.\nTasks:\n\nCreate an array named arr2 using np.linspace() with 6 equally spaced values from 1 to 16 and a shape of (2,3) (You’ll need .reshape() for this!).\nTranspose the array and name it arr2t.\nFinally, slice the new object arr2t so it only includes the values 7 and 16. Save this as an object named sliced_arr2t.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .reshape() to change the dimension of np.linspace()?\nAre you using .T?\nAre you slicing with [:,1]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html",
    "href": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "You run .info() on the fruit_salad dataframe and get the following output.\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10 entries, 0 to 9\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   name           10 non-null     object \n 1   colour         10 non-null     object \n 2   location       10 non-null     object \n 3   seed           10 non-null     bool   \n 4   shape          9 non-null      object \n 5   sweetness      10 non-null     bool   \n 6   water_content  8 non-null      float64\n 7   weight         10 non-null     int64  \ndtypes: bool(2), float64(1), int64(1), object(4)\nmemory usage: 628.0+ bytes\n\n\n\n\n     name  height  diameter   age flowering\n0  Cherry    15.0         2  12.0      True\n1     Fir    20.0         4   4.0     False\n2  Willow    25.0         3   2.0      True\n3     Oak     NaN         2   NaN     False\n4     Oak    10.0         5   6.0       NaN\n\n\n\n\n\n\n\nUse the forest dataframe below to answer the next 2 questions:\n     name  height  diameter   age flowering\n0  Cherry    15.0         2  12.0      True\n1     Fir    20.0         4   4.0     False\n2  Willow    25.0         3   2.0      True\n3     Oak     NaN         2   3.0     False\n4     Oak    10.0         5   6.0     False\n# Quesiton 1\n     name  height  diameter  age  flowering\n0  Cherry    15.0         2   12       True\n1     Fir    20.0         4    4      False\n2  Willow    25.0         3    2       True\n3     Oak    17.5         2    3      False\n4     Oak    10.0         5    6      False\n\n\n\n\n# Quesiton 2\n     name  height  diameter  age  flowering\n0  Cherry    15.0         2   12       True\n1     Fir    20.0         4    4      False\n2  Willow    25.0         3    2       True\n3     Oak    10.0         2    3      False\n4     Oak    10.0         5    6      False\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s replace the values missing in the canucks dataframe with the salary mean.\nTasks:\n\nReplace the NaN values in the dataframe with the mean salary value.\nSave this as a new dataframe named canucks_altered.\nDisplay the canucks_altered dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .fillna()?\nAre you using the argument value=canucks['Salary].mean()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice using .isnull() in our data processing using the canucks dataset from earlier in this course.\nTasks:\n\nIdentify any columns with null values in the canucks dataframe with .info() and save this as canucks_info.\nCreate a new column in the dataframe named Wealth where all the values equal \"comfortable\".\nName the new dataframe canucks_comf.\nDo conditional value replacement, where if the value in the Salary column is null, we replace \"comfortable\" with \"unknown\".\nDisplay the new canucks_comf dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using canucks.info()?\nAre you creating canucks_comf with canucks.assign(Wealth = \"comfortable\")?\nAre you using .loc[] to replace the values in the Wealth column?\nAre you using canucks_comf['Salary'].isnull() as your condition in .loc[]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html#finding-and-dropping-null-values-questions",
    "href": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html#finding-and-dropping-null-values-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "You run .info() on the fruit_salad dataframe and get the following output.\n&lt;class 'pandas.core.frame.DataFrame'&gt;\nRangeIndex: 10 entries, 0 to 9\nData columns (total 8 columns):\n #   Column         Non-Null Count  Dtype  \n---  ------         --------------  -----  \n 0   name           10 non-null     object \n 1   colour         10 non-null     object \n 2   location       10 non-null     object \n 3   seed           10 non-null     bool   \n 4   shape          9 non-null      object \n 5   sweetness      10 non-null     bool   \n 6   water_content  8 non-null      float64\n 7   weight         10 non-null     int64  \ndtypes: bool(2), float64(1), int64(1), object(4)\nmemory usage: 628.0+ bytes\n\n\n\n\n     name  height  diameter   age flowering\n0  Cherry    15.0         2  12.0      True\n1     Fir    20.0         4   4.0     False\n2  Willow    25.0         3   2.0      True\n3     Oak     NaN         2   NaN     False\n4     Oak    10.0         5   6.0       NaN",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html#filling-methods",
    "href": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html#filling-methods",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Use the forest dataframe below to answer the next 2 questions:\n     name  height  diameter   age flowering\n0  Cherry    15.0         2  12.0      True\n1     Fir    20.0         4   4.0     False\n2  Willow    25.0         3   2.0      True\n3     Oak     NaN         2   3.0     False\n4     Oak    10.0         5   6.0     False\n# Quesiton 1\n     name  height  diameter  age  flowering\n0  Cherry    15.0         2   12       True\n1     Fir    20.0         4    4      False\n2  Willow    25.0         3    2       True\n3     Oak    17.5         2    3      False\n4     Oak    10.0         5    6      False\n\n\n\n\n# Quesiton 2\n     name  height  diameter  age  flowering\n0  Cherry    15.0         2   12       True\n1     Fir    20.0         4    4      False\n2  Willow    25.0         3    2       True\n3     Oak    10.0         2    3      False\n4     Oak    10.0         5    6      False",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html#coding-questions",
    "href": "modules/module8/module8-12-finding_and_dropping_null_values_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s replace the values missing in the canucks dataframe with the salary mean.\nTasks:\n\nReplace the NaN values in the dataframe with the mean salary value.\nSave this as a new dataframe named canucks_altered.\nDisplay the canucks_altered dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .fillna()?\nAre you using the argument value=canucks['Salary].mean()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice using .isnull() in our data processing using the canucks dataset from earlier in this course.\nTasks:\n\nIdentify any columns with null values in the canucks dataframe with .info() and save this as canucks_info.\nCreate a new column in the dataframe named Wealth where all the values equal \"comfortable\".\nName the new dataframe canucks_comf.\nDo conditional value replacement, where if the value in the Salary column is null, we replace \"comfortable\" with \"unknown\".\nDisplay the new canucks_comf dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using canucks.info()?\nAre you creating canucks_comf with canucks.assign(Wealth = \"comfortable\")?\nAre you using .loc[] to replace the values in the Wealth column?\nAre you using canucks_comf['Salary'].isnull() as your condition in .loc[]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-17-datetime_quesitons.html",
    "href": "modules/module8/module8-17-datetime_quesitons.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s read in data and parse a datetime column as well as calculate the hockey team’s oldest and youngest player.\nTasks:\n\nRead in the canucks.csv file from the data folder and parse the Birth Date column. Save this as an object named canucks.\nFind the oldest player’s date of birth and save the Timestamp as oldest.\nFind the youngest player’s date of birth and save the Timestamp as youngest.\nFind the age difference between the two players in years to 2 decimal places. Save this as an object name age_range.\nDisplay age_range.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the argument parse_dates while reading in the data?\nThe oldest player has the min() date of birth.\nThe youngest player has the max() date of birth.\nAre you subtracting the min value from the max value?\nAre you rounding to 2 decimal places?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-17-datetime_quesitons.html#practice-processing-dates",
    "href": "modules/module8/module8-17-datetime_quesitons.html#practice-processing-dates",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s read in data and parse a datetime column as well as calculate the hockey team’s oldest and youngest player.\nTasks:\n\nRead in the canucks.csv file from the data folder and parse the Birth Date column. Save this as an object named canucks.\nFind the oldest player’s date of birth and save the Timestamp as oldest.\nFind the youngest player’s date of birth and save the Timestamp as youngest.\nFind the age difference between the two players in years to 2 decimal places. Save this as an object name age_range.\nDisplay age_range.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the argument parse_dates while reading in the data?\nThe oldest player has the min() date of birth.\nThe youngest player has the max() date of birth.\nAre you subtracting the min value from the max value?\nAre you rounding to 2 decimal places?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-20-string_questions.html",
    "href": "modules/module8/module8-20-string_questions.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "name   colour location   seed  shape  sweetness  water_content  weight\n0         apple      red   canada   True  round       True             84     100\n1        banana   yellow   mexico  False   long       True             75     120\n2    cantaloupe   orange    spain   True  round       True             90    1360\n3  dragon-fruit  magenta    china   True  round      False             96     600\n4    elderberry   purple  austria  False  round       True             80       5\n5           fig   purple   turkey  False   oval      False             78      40\n6         guava    green   mexico   True   oval       True             83     450\n7   huckleberry     blue   canada   True  round       True             73       5\n8          kiwi    brown    china   True  round       True             80      76\n9         lemon   yellow   mexico  False   oval      False             83      65\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s transform some of the columns in your canucks dataset. Let’s also see how many of the players have multiple T’s in their name.\nTasks:\n\nConvert the Position and Country columns into uppercase and save this in a dataframe named canucks_upper.\nCreate a new column in the canucks_upper dataframe named number_ts where you count the total number of times the letter T (lowercase or uppercase) appears in their name.\nSave this dataframe named as canucks_upper_ts.\nHow many players have multiple T’s in their name?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .assign and .upper()?\nYou will have to convert the lower to .lower() first and then .count('t')\nThe number of players with number_ts greater than one can be calculated by filtering on that column and getting the .shape of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-20-string_questions.html#identify-the-string-code",
    "href": "modules/module8/module8-20-string_questions.html#identify-the-string-code",
    "title": "5.1. Exercises",
    "section": "",
    "text": "name   colour location   seed  shape  sweetness  water_content  weight\n0         apple      red   canada   True  round       True             84     100\n1        banana   yellow   mexico  False   long       True             75     120\n2    cantaloupe   orange    spain   True  round       True             90    1360\n3  dragon-fruit  magenta    china   True  round      False             96     600\n4    elderberry   purple  austria  False  round       True             80       5\n5           fig   purple   turkey  False   oval      False             78      40\n6         guava    green   mexico   True   oval       True             83     450\n7   huckleberry     blue   canada   True  round       True             73       5\n8          kiwi    brown    china   True  round       True             80      76\n9         lemon   yellow   mexico  False   oval      False             83      65",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-20-string_questions.html#practice-handling-strings",
    "href": "modules/module8/module8-20-string_questions.html#practice-handling-strings",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s transform some of the columns in your canucks dataset. Let’s also see how many of the players have multiple T’s in their name.\nTasks:\n\nConvert the Position and Country columns into uppercase and save this in a dataframe named canucks_upper.\nCreate a new column in the canucks_upper dataframe named number_ts where you count the total number of times the letter T (lowercase or uppercase) appears in their name.\nSave this dataframe named as canucks_upper_ts.\nHow many players have multiple T’s in their name?\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .assign and .upper()?\nYou will have to convert the lower to .lower() first and then .count('t')\nThe number of players with number_ts greater than one can be calculated by filtering on that column and getting the .shape of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-24-advanced_string_questions.html",
    "href": "modules/module8/module8-24-advanced_string_questions.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "name   colour location   seed  shape  sweetness  water_content  weight\n0         apple      red   canada   True  round       True             84     100\n1        banana   yellow   mexico  False   long       True             75     120\n2    cantaloupe   orange    spain   True  round       True             90    1360\n3  dragon-fruit  magenta    china   True  round      False             96     600\n4    elderberry   purple  austria  False  round       True             80       5\n5           fig   purple   turkey  False   oval      False             78      40\n6         guava    green   mexico   True   oval       True             83     450\n7   huckleberry     blue   canada   True  round       True             73       5\n8          kiwi    brown    china   True  round       True             80      76\n9         lemon   yellow   mexico  False   oval      False             83      65\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nUse the lego dataframe to help answer the next question.\n\n\n\n\n\n\nLet’s practice using the verbs we learned from the lesson to process a string column in our Lego dataset.\nTasks:\n\nConvert the name column in the lego dataset to lowercase and overwrite the dataframe by saving it as an object named lego.\nFilter the dataset to find all the Lego sets that contain \"weetabix\" in the name column.\nSave this as an object named lego_weetabix.\nReplace the word\"weetabix” in the name column of the lego_wetabix dataframe with the string \"cereal-brand\".\nSave this in an object called lego_cereal.\nIf the row contains the word \"promotional\" in the name column, change the entire value to \"cereal-brand freebie\".\nDisplay lego_cereal.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .assign() and .lower() to convert the name column to lowercase?\nAre you using str.contains('weetabix') to filter all the rows?\nYou should be using assign() with str.replace('weetabix', 'cereal-brand') to replace “weetabix”.\nYou should be using .loc[] and str.contains('promotional') (and a single =) to assign new row values.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-24-advanced_string_questions.html#strings",
    "href": "modules/module8/module8-24-advanced_string_questions.html#strings",
    "title": "6.1. Exercises",
    "section": "",
    "text": "name   colour location   seed  shape  sweetness  water_content  weight\n0         apple      red   canada   True  round       True             84     100\n1        banana   yellow   mexico  False   long       True             75     120\n2    cantaloupe   orange    spain   True  round       True             90    1360\n3  dragon-fruit  magenta    china   True  round      False             96     600\n4    elderberry   purple  austria  False  round       True             80       5\n5           fig   purple   turkey  False   oval      False             78      40\n6         guava    green   mexico   True   oval       True             83     450\n7   huckleberry     blue   canada   True  round       True             73       5\n8          kiwi    brown    china   True  round       True             80      76\n9         lemon   yellow   mexico  False   oval      False             83      65",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/module8-24-advanced_string_questions.html#processing-strings-in-a-dataframe",
    "href": "modules/module8/module8-24-advanced_string_questions.html#processing-strings-in-a-dataframe",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nUse the lego dataframe to help answer the next question.\n\n\n\n\n\n\nLet’s practice using the verbs we learned from the lesson to process a string column in our Lego dataset.\nTasks:\n\nConvert the name column in the lego dataset to lowercase and overwrite the dataframe by saving it as an object named lego.\nFilter the dataset to find all the Lego sets that contain \"weetabix\" in the name column.\nSave this as an object named lego_weetabix.\nReplace the word\"weetabix” in the name column of the lego_wetabix dataframe with the string \"cereal-brand\".\nSave this in an object called lego_cereal.\nIf the row contains the word \"promotional\" in the name column, change the entire value to \"cereal-brand freebie\".\nDisplay lego_cereal.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .assign() and .lower() to convert the name column to lowercase?\nAre you using str.contains('weetabix') to filter all the rows?\nYou should be using assign() with str.replace('weetabix', 'cereal-brand') to replace “weetabix”.\nYou should be using .loc[] and str.contains('promotional') (and a single =) to assign new row values.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 8: A Slice of NumPy and Advanced Data Wrangling**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module8/slides/module8_00.html#module-learning-outcomes",
    "href": "modules/module8/slides/module8_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nUse NumPy to create ndarrays with np.array() and from functions such as np.arange(), np.linspace() and np.ones().\nDescribe the shape, dimension and size of an array.\nIdentify null values in a dataframe and manage them by removing them using .dropna() or replacing them using .fillna().\nManipulate non-standard date/time formats into standard Pandas datetime using pd.to_datetime().\nFind, and replace text from a dataframe using verbs such as .replace() and .contains()."
  },
  {
    "objectID": "modules/module8/slides/module8_05.html#creating-2d-arrays",
    "href": "modules/module8/slides/module8_05.html#creating-2d-arrays",
    "title": "Multi-dimensional Arrays",
    "section": "Creating 2D Arrays",
    "text": "Creating 2D Arrays\n\nmy_array = np.array((1, 2, 3, 4))\nmy_array\n\narray([1, 2, 3, 4])\n\n\n\n\nlist_2d = [[1, 2], [3, 4], [5, 6]]\narray_2d = np.array(list_2d)\narray_2d\n\narray([[1, 2],\n       [3, 4],\n       [5, 6]])\n\n\n\nWe saw in the last set of slides that we can create 1D arrays using a number of different functions such as np.array().\nWe can also use the same functions to make multi-dimensional arrays, which are indicated by the multiple sets of square brackets [[ ]].\nIn our 1D arrays, our arrays only have a single set of square brackets, whereas, in multi-dimensional arrays, we count multiple sets."
  },
  {
    "objectID": "modules/module8/slides/module8_05.html#array-shapes",
    "href": "modules/module8/slides/module8_05.html#array-shapes",
    "title": "Multi-dimensional Arrays",
    "section": "Array Shapes",
    "text": "Array Shapes\n\n\n.ndim\n.shape\n.size\n\n\nWe saw how to make multi-dimensional arrays, but the dimension is quite different than what the shape of an array is.\nHere are three main array nouns we need to know to understand the characteristics of an array:\n\n.ndim: the number of dimensions of an array\n.shape: the number of elements in each dimension (like calling len() on each dimension)\n.size: the total number of elements in an array (i.e., the product of .shape)"
  },
  {
    "objectID": "modules/module8/slides/module8_05.html#indexing-and-slicing-2d-arrays",
    "href": "modules/module8/slides/module8_05.html#indexing-and-slicing-2d-arrays",
    "title": "Multi-dimensional Arrays",
    "section": "Indexing and Slicing 2D arrays",
    "text": "Indexing and Slicing 2D arrays\n\narr2 = np.arange(0,12).reshape(3,4)\narr2\n\narray([[ 0,  1,  2,  3],\n       [ 4,  5,  6,  7],\n       [ 8,  9, 10, 11]])\n\n\n\n\narr2[1, 2]\n\nnp.int64(6)\n\n\n\n\narr2[1][2]\n\nnp.int64(6)\n\n\n\nSlicing 2D arrays can be compared to slicing pandas dataframes (without the .iloc[]).\nLet’s say we want to select 6. It’s located in row 1 and column 2 (remember that the index includes 0).\nWe could also do the same thing by putting the row and column index in separate square brackets, but it’s not recommended."
  },
  {
    "objectID": "modules/module8/slides/module8_16.html#pandas-parse_dates",
    "href": "modules/module8/slides/module8_16.html#pandas-parse_dates",
    "title": "Working with Dates and Time",
    "section": "Pandas parse_dates",
    "text": "Pandas parse_dates\n\ncycling = pd.read_csv('data/cycling_data.csv')\ncycling.head(3)\n\n\n\n\n\n\n\n\nDate\nName\nType\nTime\nDistance\nComments\n\n\n\n\n0\nSep-10-2019 17:13\nAfternoon Ride\nRide\n2084\n12.62\nRain\n\n\n1\nSep-11-2019 06:52\nMorning Ride\nRide\n2531\n13.03\nrain\n\n\n2\nSep-11-2019 17:23\nAfternoon Ride\nRide\n1863\n12.52\nWet road but nice whether\n\n\n\n\n\n\n\n\n\ncycling.dtypes\n\nDate         object\nName         object\nType         object\nTime          int64\nDistance    float64\nComments     object\ndtype: object\n\n\n\nRemember How Pandas is built using the NumPy library?\nWell in a similar way, Pandas datetime verbs are built using the built-in Python library; datetime .\nWe can parse our data at the same time as we read in our dataframe using the argument parse_dates.\nOriginally the Date column adopts a dtype of object when the data is read in."
  },
  {
    "objectID": "modules/module8/slides/module8_16.html#diff",
    "href": "modules/module8/slides/module8_16.html#diff",
    "title": "Working with Dates and Time",
    "section": ".diff()",
    "text": ".diff()\n\ncycling_intervals = new_cycling['Date'].sort_values().diff()\ncycling_intervals\n\n0                NaT\n1    0 days 13:39:00\n2    0 days 10:31:00\n           ...      \n30   0 days 10:15:00\n31   0 days 13:37:00\n32   0 days 10:29:00\nName: Date, Length: 33, dtype: timedelta64[ns]\n\n\n\nIn our analysis, it might be important to know how frequent events occur and the time between them.\n.diff() is a useful function for that.\nThis outputs a pandas Series with the time that occurs between rows. As you can see, there was a 10 hour and 22minute gap between Tom’s third and forth bike rides. Wow - that’s a long workday!”\nHere, you’ll now notice a new dtype at the bottom of our new pandas Series named timedelta64."
  },
  {
    "objectID": "modules/module8/slides/module8_16.html#timedelta",
    "href": "modules/module8/slides/module8_16.html#timedelta",
    "title": "Working with Dates and Time",
    "section": "timedelta",
    "text": "timedelta\n\ncycling_intervals[1]\n\nTimedelta('0 days 13:39:00')\n\n\n\n\ncycling_intervals[1].seconds\n\n49140\n\n\n\n\nsec_per_hour = 60 * 60\ncycling_intervals[1].seconds / sec_per_hour\n\n13.65\n\n\n\nUnlike a Timestamp that represents a snapshot in time, timedelta represents a duration or an interval of time.\nHere we can obtain the time between 2 trips.\nMeasurement can only be extracted from the timedelta object using either days, seconds, and microseconds verbs.\nHere we obtain the number of seconds.\nWe can convert them into other units by using simple operations.\nIn this case, we convert it to hours by dividing it by the number of seconds in an hour."
  },
  {
    "objectID": "modules/module8/slides/module8_23.html#replace",
    "href": "modules/module8/slides/module8_23.html#replace",
    "title": "More Advanced String Processing",
    "section": "Replace",
    "text": "Replace\n\ncycling = pd.read_csv('data/cycling_data.csv')\ncycling.head(10)\n\n\n\n\n\n\n\n\nDate\nName\nType\nTime\nDistance\nComments\n\n\n\n\n0\nSep-10-2019 17:13\nAfternoon Ride\nRide\n2084\n12.62\nRain\n\n\n1\nSep-11-2019 06:52\nMorning Ride\nRide\n2531\n13.03\nrain\n\n\n2\nSep-11-2019 17:23\nAfternoon Ride\nRide\n1863\n12.52\nWet road but nice whether\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n7\nSep-18-2019 06:43\nMorning Ride\nRide\n2285\n12.60\nRaining\n\n\n8\nSep-19-2019 06:49\nMorning Ride\nRide\n2903\n14.57\nThankfully not raining today!\n\n\n9\nSep-18-2019 17:15\nAfternoon Ride\nRide\n2101\n12.48\nPumped up tires\n\n\n\n\n10 rows × 6 columns\n\n\n\n\nOk, we have an idea of how we can do some fairly standard strings processing; however, it’s time we dived a little deeper into this.\nThere are MANY different functions, but we’ll concentrate on a couple here that we will use often and provide a list of several that will be useful in future string processing adventures.\nJust like in regular text, there will be times in your data analysis where you will want to replace some of the text within a string.\nThat’s where .replace() comes in.\nWe usually like our data to be consistent; however; consistency is not always present even in the best of dataframes.\nLet’s take a look at our cycling dataset."
  },
  {
    "objectID": "modules/module8/slides/module8_23.html#contains",
    "href": "modules/module8/slides/module8_23.html#contains",
    "title": "More Advanced String Processing",
    "section": "Contains",
    "text": "Contains\n\ncycling_lower['Comments'].str.contains('rain')\n\n0      True\n1      True\n2     False\n      ...  \n30    False\n31    False\n32    False\nName: Comments, Length: 33, dtype: bool\n\n\n\n\ncycling_lower[cycling_lower['Comments'].str.contains('rain')]\n\n\n\n\n\n\n\n\nDate\nName\nType\nTime\nDistance\nComments\n\n\n\n\n0\nSep-10-2019 17:13\nAfternoon Ride\nRide\n2084\n12.62\nrain\n\n\n1\nSep-11-2019 06:52\nMorning Ride\nRide\n2531\n13.03\nrain\n\n\n7\nSep-18-2019 06:43\nMorning Ride\nRide\n2285\n12.60\nraining\n\n\n8\nSep-19-2019 06:49\nMorning Ride\nRide\n2903\n14.57\nthankfully not raining today!\n\n\n18\nSep-26-2019 17:13\nAfternoon Ride\nRide\n1860\n12.52\nraining\n\n\n\n\n\n\n\n\ncontains() can be used to filter our dataframe.\nInstead of checking if a column equals an exact value, we can check in a pattern is contained in the column.\nFor example, what if we want all the rows that have some portion of “rain”.\nThis will return a pandas series with Boolean values.\nWe can combine this and use it as a condition to filter our dataframe on to obtain all the rows that contain the string “rain”.\nIf we wanted to, we could use this subset of data to see if our cyclist Tom was slower on average, on days that it rained!"
  },
  {
    "objectID": "modules/module9/module9-00-congratulations.html",
    "href": "modules/module9/module9-00-congratulations.html",
    "title": "0. Congratulations!",
    "section": "",
    "text": "0. Congratulations!\n\nVideoSlides",
    "crumbs": [
      "**Module Closing Remarks**",
      "0. Congratulations!"
    ]
  }
]