[
  {
    "objectID": "modules/module5/slides/module5_23.html#summary",
    "href": "modules/module5/slides/module5_23.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 5",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nExplain the DRY principle and how it can be useful.\nWrite conditional statements with if, elif and else to run different code, depending on the input.\nWrite for loops to repeatedly run code.\nDescribe the expected outcome of code with nested loops.\nDefine and use a function that accepts parameters and returns values.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module5/slides/module5_23.html#attribution",
    "href": "modules/module5/slides/module5_23.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 5",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module5/slides/module5_16.html#break",
    "href": "modules/module5/slides/module5_16.html#break",
    "title": "Repeated Iterations with Conditions",
    "section": "Break",
    "text": "Break\n\nitem_list = [25, 13, 21, 8, 17, 11, 4]\n\nfor item in item_list:\n    if item &gt; 20:\n        magnitude = 'greater than 20'\n    elif item &gt; 10:\n        magnitude = 'between 10 and 20'\n    else:\n        magnitude = '10 or less'\n    print(magnitude)\n\ngreater than 20\nbetween 10 and 20\ngreater than 20\n10 or less\nbetween 10 and 20\nbetween 10 and 20\n10 or less\n\n\n\nThere are occasions where we may want to stop iterating over an entire sequence once a condition is met.\nPerhaps we only need to find one number that is 10 or less in a list.\nWe can see that even after we located a number that is 10 or less, the loop continues until it reaches the last element. If we have a very large list, it’s inefficient to continue searching for something we have already found."
  },
  {
    "objectID": "modules/module5/slides/module5_16.html#a-stylizing-side-point",
    "href": "modules/module5/slides/module5_16.html#a-stylizing-side-point",
    "title": "Repeated Iterations with Conditions",
    "section": "A stylizing side point",
    "text": "A stylizing side point\n\nitem_list = [25, 13, 21, 8, 17, 11, 4]\n\n\n\nnumber_over_20 = 0\n\nfor item in item_list:\n    if item &gt; 20:\n        number_over_20 = number_over_20 + item\n        \nnumber_over_20\n\n46\n\n\n\nInstead of writing this line:\nnumber_over_20 = number_over_20 + item\n\nWe can write:\nnumber_over_20 +=  item\n\nYou’ve seen that we often add to an existing object when we use loops.\nFor instance, when we count the number of items that are over 20 in the list item_list.\nWe keep the object name number_over_20 and just add to it while iterating through the loop.\nInstead of writing the line:\nnumber_over_20 = number_over_20 + item\nWe can avoid writing the object name twice and write a more stylized approach:\nnumber_over_20 +=  item\nThis simply means that we are adding item to the number_over_20 object."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#range",
    "href": "modules/module5/slides/module5_09.html#range",
    "title": "Range, Dictionaries and Comprehensions",
    "section": "Range",
    "text": "Range\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\nfor i in range(50, 101, 10):\n    print(i)\n\n50\n60\n70\n80\n90\n100\n\n\n\nOften, we just want to do something 5 times without looping over a collection.\nThe most common way to do that is to use range(), which automatically generates a collection of the integers in some sort of sequence, generally 0, to N-1.\nWe can also specify a start value, an end value and a skip-by value with range."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#looping-in-a-dictionary",
    "href": "modules/module5/slides/module5_09.html#looping-in-a-dictionary",
    "title": "Range, Dictionaries and Comprehensions",
    "section": "Looping in a dictionary",
    "text": "Looping in a dictionary\n\ncereals = {'Special K': 4, 'Lucky Charms': 7, 'Cheerios': 2, 'Wheaties': 3}\ncereals.items()\n\ndict_items([('Special K', 4), ('Lucky Charms', 7), ('Cheerios', 2), ('Wheaties', 3)])\n\n\n\n\ncereals = {'Special K': 4, 'Lucky Charms': 7, 'Cheerios': 2, 'Wheaties': 3}\n\nfor cereal, stock in cereals.items():\n    print( cereal  + \" has \" + str(stock) + \" available\")\n\nSpecial K has 4 available\nLucky Charms has 7 available\nCheerios has 2 available\nWheaties has 3 available\n\n\n\nWe can also loop over the key-value pairs of a dictionary using .items().\nWe saw this verb back in module 4 when we learned about dictionaries.\nSince each key-value pair has 2 elements in it, we need to specify a variable for each item in the tuple:\n\nOne for the dictionary key\nOne for the dictionary values\n\nHere we assign an object named cereal for the items in the first position of the tuple, which are the dictionary keys, and an object named stock for the second index in a tuple, which are the dictionary values."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#comprehensions",
    "href": "modules/module5/slides/module5_09.html#comprehensions",
    "title": "Range, Dictionaries and Comprehensions",
    "section": "Comprehensions",
    "text": "Comprehensions\n\nnumbers = [2, 3, 5]\n\n\n\nsquared = list()\n\nfor number in numbers: \n    squared.append(number ** 2)\n    \nsquared\n\n[4, 9, 25]\n\n\n\n\nsquared = [number ** 2 for number in numbers]\nsquared\n\n[4, 9, 25]\n\n\n\nWe learned in the last Module that we can create if and else conditions in a single line of code, and we can do something similar with basic loops.\nComprehensions allow us to build lists/sets/dictionaries in one convenient, compact line of code.\nIn the last set of slides, we made a loop that calculates the square of each element from a list and adds them to a new list name squared.\nThis can be done using comprehension, so now it executes using the single line of code."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#syntax",
    "href": "modules/module5/slides/module5_01.html#syntax",
    "title": "Making Choices with Conditional Statements",
    "section": "Syntax",
    "text": "Syntax\nmy_name = 'Hayley' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\nelif my_name.lower() == 'totoro':\n    print('Interesting, I loved that movie!')\nelse:\n    print(\"That's a great name.\")\n  \nprint('Nice to meet you!')\nMy name is Hayley too!\nNice to meet you!\n\nPython conditional statements contains 2 important things:\n\nA strict structure.\nThe keyword if and optional keywords else and elif."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#structure",
    "href": "modules/module5/slides/module5_01.html#structure",
    "title": "Making Choices with Conditional Statements",
    "section": "Structure",
    "text": "Structure\n\nmy_name = 'Hayley' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\n\nMy name is Hayley too!\n\n\n\nThe structure of a choice is as follows:\nif SOME_BOOLEAN:\n    statement body \n\nThe structure of a choice is as follows:\nif SOME_BOOLEAN:\n    statement body \nEach conditional expression must end with a colon : and code to be executed if the condition is met must all must be indented with 4 spaces (or consistent indentation) in the statement body.\nIn the example above:\nif my_name.lower() == 'hayley' is the Boolean statement and\nprint(\"My name is Hayley too!\") is the statement body."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#keywords---if-else",
    "href": "modules/module5/slides/module5_01.html#keywords---if-else",
    "title": "Making Choices with Conditional Statements",
    "section": "Keywords - if, else",
    "text": "Keywords - if, else\nmy_name = 'Mia' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\nelif my_name.lower() == 'totoro':\n    print('Interesting, I loved that movie!')\nelse:\n    print(\"That's a great name.\")\n  \nprint('Nice to meet you!')\nThat's a great name.\nNice to meet you!\n\nAn if keyword is needed for any conditional.\nIf the Boolean value is True, the body of the statement (which is anything indented under it) will be executed.\nIf the expression is False, the body of the statement is not executed, and it continues to the next line of non-indented code outside the body.\nThe else expression will execute if the conditional expressions above it are False.\nThe keyword else can only occur once following an if condition and are optional to the code."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#keywords---elif",
    "href": "modules/module5/slides/module5_01.html#keywords---elif",
    "title": "Making Choices with Conditional Statements",
    "section": "Keywords - elif",
    "text": "Keywords - elif\nmy_name = 'Totoro' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\nelif my_name.lower() == 'totoro':\n    print('Interesting, I loved that movie!')\nelse:\n    print(\"That's a great name.\")\n  \nprint('Nice to meet you!')\nInteresting, I loved that movie!\nNice to meet you!\n\nelif stands for else if. It allows us to check if different conditions evaluate to True.\nWhen the elif expression evaluates to True, then the body of the statement is executed, just like an if statement.\nIn the case we saw before when my_name = 'Totoro', the elif condition my_name.lower() == 'totoro' evaluates to True."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#order-matters",
    "href": "modules/module5/slides/module5_01.html#order-matters",
    "title": "Making Choices with Conditional Statements",
    "section": "Order matters",
    "text": "Order matters\n\nitem = 13 \n\nif item &gt; 10:\n    magnitude = 'Between 10 and 20'\nelif item &gt; 20:\n    magnitude = 'Greater than 20'\nelse:\n    magnitude = '10 or less'\n \nmagnitude\n\n'Between 10 and 20'\n\n\n\nThe order we chose for the statement for the if and elif statements is important and can result in different outputs.\nLet’s explore this in the next example using inequalities with numbers.\nIn this case, our item object, which equals 13 here, is greater than 10, so our first condition holds true, and so magnitude is assigned a value of 'Between 10 and 20'"
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#inline",
    "href": "modules/module5/slides/module5_01.html#inline",
    "title": "Making Choices with Conditional Statements",
    "section": "Inline",
    "text": "Inline\n\nitem = 13\n\n\n\nif  item &gt; 10:\n    magnitude = 'Greater than 10'\nelse:\n    magnitude = '10 or less'\n    \nmagnitude\n\n'Greater than 10'\n\n\n\n\nmagnitude = \"Greater than 10\" if item &gt; 10 else \"10 or less\"\nmagnitude\n\n'Greater than 10'\n\n\n\nIn situations where we have only if and else statements, we have the ability to put it all in a single line of code.\nLet’s test this on our object item.\nThe original conditional statements below checks if the item is greater than 10 and assigns a value of greater than 10 if it’s True and a value of 10 or less otherwise.\nThe 4 lines used for the conditional statements can be compressed into a single one.\nBoth syntaxes are acceptable, depending on your preference.\nThis type of syntax is only possible for decisions that involve only if and else conditions."
  },
  {
    "objectID": "modules/module5/module5-23-what_did_we_just_learn.html",
    "href": "modules/module5/module5-23-what_did_we_just_learn.html",
    "title": "7. What Did We Just Learn?",
    "section": "",
    "text": "7. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "7. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module5/module5-19-functions.html",
    "href": "modules/module5/module5-19-functions.html",
    "title": "6. Functions",
    "section": "",
    "text": "6. Functions\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "6. Functions"
    ]
  },
  {
    "objectID": "modules/module5/module5-16-repeated_iterations_with_conditions.html",
    "href": "modules/module5/module5-16-repeated_iterations_with_conditions.html",
    "title": "5. Repeated Iterations with Conditions",
    "section": "",
    "text": "5. Repeated Iterations with Conditions\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "5. Repeated Iterations with Conditions"
    ]
  },
  {
    "objectID": "modules/module5/module5-13-nested_loops.html",
    "href": "modules/module5/module5-13-nested_loops.html",
    "title": "4. Nested Loops",
    "section": "",
    "text": "4. Nested Loops\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "4. Nested Loops"
    ]
  },
  {
    "objectID": "modules/module5/module5-09-range_dictionaries_and_comprehensions.html",
    "href": "modules/module5/module5-09-range_dictionaries_and_comprehensions.html",
    "title": "3. Range, Dictionaries and Comprehensions",
    "section": "",
    "text": "3. Range, Dictionaries and Comprehensions\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "3. Range, Dictionaries and Comprehensions"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-repeated_iterations_(loops).html",
    "href": "modules/module5/module5-06-repeated_iterations_(loops).html",
    "title": "2. Repeated Iterations (Loops)",
    "section": "",
    "text": "2. Repeated Iterations (Loops)\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "2. Repeated Iterations (Loops)"
    ]
  },
  {
    "objectID": "modules/module5/module5-01-making_choices_with_conditional_statements.html",
    "href": "modules/module5/module5-01-making_choices_with_conditional_statements.html",
    "title": "1. Making Choices with Conditional Statements",
    "section": "",
    "text": "1. Making Choices with Conditional Statements\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "1. Making Choices with Conditional Statements"
    ]
  },
  {
    "objectID": "modules/module4/slides/module4_25.html#summary",
    "href": "modules/module4/slides/module4_25.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 4",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nCompare and contrast python’s key data types.\nCompare and contrast python’s key data structures.\nUse Python to determine the type and structure of an object.\nDemonstrate how to create data structures and convert them to another.\nIdentify which operations can be applied to different data types and columns dtypes.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module4/slides/module4_25.html#attribution",
    "href": "modules/module4/slides/module4_25.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 4",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module4/slides/module4_21.html#object-columns",
    "href": "modules/module4/slides/module4_21.html#object-columns",
    "title": "Operations with Columns",
    "section": "object columns",
    "text": "object columns\ncereal['mfr_type'].mean()\nTypeError: Could not convert 'N-ColdQ-ColdK-ColdK-ColdR-ColdG-ColdK-ColdG-ColdR-ColdP-ColdQ-ColdG-ColdG-ColdG-ColdG-ColdR-ColdK-ColdK-ColdG-ColdK-ColdN-HotK-ColdG-ColdR-ColdK-ColdK-ColdK-ColdP-ColdK-ColdP-ColdP-ColdG-ColdP-ColdP-ColdP-ColdQ-ColdG-ColdP-ColdK-ColdK-ColdG-ColdQ-ColdG-ColdA-HotR-ColdR-ColdK-ColdG-ColdK-ColdK-ColdK-ColdG-ColdP-ColdK-ColdQ-ColdQ-ColdQ-ColdQ-HotK-ColdG-ColdK-ColdR-ColdK-ColdN-ColdN-ColdN-ColdK-ColdK-ColdN-ColdG-ColdG-ColdG-ColdG-ColdG-ColdR-ColdG-ColdG-Cold' to numeric\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n  File \"/usr/local/lib/python3.12/site-packages/pandas/core/series.py\", line 6549, in mean\n  ...\n\ncereal['mfr_type'].sum()\n\n'N-ColdQ-ColdK-ColdK-ColdR-ColdG-ColdK-ColdG-ColdR-ColdP-ColdQ-ColdG-ColdG-ColdG-ColdG-ColdR-ColdK-ColdK-ColdG-ColdK-ColdN-HotK-ColdG-ColdR-ColdK-ColdK-ColdK-ColdP-ColdK-ColdP-ColdP-ColdG-ColdP-ColdP-ColdP-ColdQ-ColdG-ColdP-ColdK-ColdK-ColdG-ColdQ-ColdG-ColdA-HotR-ColdR-ColdK-ColdG-ColdK-ColdK-ColdK-ColdG-ColdP-ColdK-ColdQ-ColdQ-ColdQ-ColdQ-HotK-ColdG-ColdK-ColdR-ColdK-ColdN-ColdN-ColdN-ColdK-ColdK-ColdN-ColdG-ColdG-ColdG-ColdG-ColdG-ColdR-ColdG-ColdG-Cold'\n\n\n\nWhat happens if we try to take summary statistics of some of the other columns?\nYikes! Let’s not take the mean of columns of dtype object.\nAs we saw before, taking a .sum() of a column concatenates the values together."
  },
  {
    "objectID": "modules/module4/slides/module4_21.html#bool",
    "href": "modules/module4/slides/module4_21.html#bool",
    "title": "Operations with Columns",
    "section": "Bool",
    "text": "Bool\n\ncereal['hot'].mean()\n\nnp.float64(0.03896103896103896)\n\n\n\nWhat about the column of type bool?\nSince Booleans are cast to 0 and 1 for True and False values respectively, we can take the sum of a column to obtain the total number of True values.\n.mean() works by summing up all the values and divides them by the total number of rows. In the case where the column is of dtype bool since True has a value of 1 and False has a value of 0, the mean is calculated as the total number of True values divided by the total number of True and False values. In other words, this gives you the fraction of cases that are True."
  },
  {
    "objectID": "modules/module4/slides/module4_21.html#axis-argument",
    "href": "modules/module4/slides/module4_21.html#axis-argument",
    "title": "Operations with Columns",
    "section": "Axis Argument",
    "text": "Axis Argument\n\ncereal.head(3)\n\n\n\n\n\n\n\n\nname\nmfr_type\ncalories\nprotein\n...\nfat\ncarbo\nrating\nhot\n\n\n\n\n0\n100% Bran\nN-Cold\n70\n4\n...\n1\n5.0\n68.402973\nFalse\n\n\n1\n100% Natural Bran\nQ-Cold\n120\n3\n...\n5\n8.0\n33.983679\nFalse\n\n\n2\nAll-Bran\nK-Cold\n70\n4\n...\n1\n7.0\n59.425505\nFalse\n\n\n\n\n3 rows × 9 columns\n\n\n\n\n\ncereal.loc[:, 'protein': 'carbo'].sum(axis=1)\n\n0     20.0\n1     18.0\n2     21.0\n      ... \n74    24.0\n75    24.0\n76    20.0\nLength: 77, dtype: float64\n\n\n\nWe are quite familiar with taking the mean and sum of entire columns now, but there are times where we want the mean or sum of the values in a row.\nPerhaps we wanted the total grams of protein,fiber, fat, and carbo for each cereal?\nRemember, when we discussed the argument axis in Module 3?\nWe can use it in our operations as well.\naxis=1 refers to the calculation being done for each row, across multiple columns, whereas axis=0 (which is the default for aggregation verbs) refers to the calculation for each column across multiple rows."
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#what-is-a-dataframe-again",
    "href": "modules/module4/slides/module4_14.html#what-is-a-dataframe-again",
    "title": "Dataframes, Series and Column dtypes",
    "section": "What is a Dataframe … again",
    "text": "What is a Dataframe … again\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nprotein\n...\nfat\ncarbo\nrating\nhot\n\n\n\n\n0\n100% Bran\nN\n70\n4\n...\n1\n5.0\n68.402973\nFalse\n\n\n1\n100% Natural Bran\nQ\n120\n3\n...\n5\n8.0\n33.983679\nFalse\n\n\n2\nAll-Bran\nK\n70\n4\n...\n1\n7.0\n59.425505\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\n100\n3\n...\n1\n17.0\n49.787445\nFalse\n\n\n75\nWheaties\nG\n100\n3\n...\n1\n17.0\n51.592193\nFalse\n\n\n76\nWheaties Honey Gold\nG\n110\n2\n...\n1\n16.0\n36.187559\nFalse\n\n\n\n\n77 rows × 9 columns\n\n\n\n\nSince the beginning of this module, we have explored basic Python Data types and structures. We’ve covered how they can be transformed into a dataframe, but that didn’t answer the lingering question:\n“What is and makes up a Pandas dataframe?”\nLet’s greet our cereal data back with a warm welcome."
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#pandas-series",
    "href": "modules/module4/slides/module4_14.html#pandas-series",
    "title": "Dataframes, Series and Column dtypes",
    "section": "Pandas Series",
    "text": "Pandas Series\n\ncereal['mfr']\n\n0     N\n1     Q\n2     K\n     ..\n74    R\n75    G\n76    G\nName: mfr, Length: 77, dtype: object\n\n\n\nA pandas Series is a one-dimensional array of values with an axis label, sort of like a list with a name attached to it.\nThis is the base data type that makes up a pandas dataframe.\nIn fact, the Pandas documentation” explains a dataframe as “a dict of Series objects”.\nLet’s look back at the series output again.\nWe can see additional information at the bottom.\nThe series contains the name of the column series, which is mfr , the length of the series, which is equal to 77, and a dtype equal to object.\nOk, we know what type is, but what is a dtype?"
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#what-is-a-dtype",
    "href": "modules/module4/slides/module4_14.html#what-is-a-dtype",
    "title": "Dataframes, Series and Column dtypes",
    "section": "What is a dtype?",
    "text": "What is a dtype?\n\n\n\nSo far, we know a dataframe is made up of a collection of series, and a series contains values, a label as well as some additional information regarding a dtype.\nJust like how objects have data types ( str, int, float, etc.), columns in a Pandas dataframe have types called dtypes.\nIn this course we are going to concentrate on the following dtypes."
  },
  {
    "objectID": "modules/module4/slides/module4_14.html#non-numeric-dtypes",
    "href": "modules/module4/slides/module4_14.html#non-numeric-dtypes",
    "title": "Dataframes, Series and Column dtypes",
    "section": "Non-Numeric dtypes",
    "text": "Non-Numeric dtypes\n\n\n\nNon-numeric types can be a bit more complicated but let’s concentrate on the dtypes object and bool. We will be exploring datetime64 and timedelta[ns] in Module 8.\n\nobject is a dtype that contains str type values in the cells of the dataframe or that had a mixture of different types, to begin with. This is the “default” dtype when pandas is not quite sure what is the cell type values are or when there is a mixture of numeric and non-numeric value types.\nbool dtypes, just like its dtype name, contains Boolean values."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#sequences",
    "href": "modules/module4/slides/module4_05.html#sequences",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Sequences",
    "text": "Sequences\n\nsentence = \"I always lose at least one sock when I do laundry.\" \nwords = sentence.split()\nwords\n\n['I',\n 'always',\n 'lose',\n 'at',\n 'least',\n 'one',\n 'sock',\n 'when',\n 'I',\n 'do',\n 'laundry.']\n\n\n\n\nsentence.split(\"e\")\n\n['I always los', ' at l', 'ast on', ' sock wh', 'n I do laundry.']\n\n\n\nIn the last section, we discussed the string (str) data type.\nWe described it as a sequence of characters. In many cases, there is good reason to split up a long text string into separate ones. Luckily, we have a convenient verb to do that .split().\nThis verb then splits up the string into separate words.\nWe can change where to split the string as well.\nThis argument uses the character “e” to separate the string and discards the separator.\nWhy is it returned in square brackets, though?"
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#lists",
    "href": "modules/module4/slides/module4_05.html#lists",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Lists",
    "text": "Lists\n\nwords\n\n['I',\n 'always',\n 'lose',\n 'at',\n 'least',\n 'one',\n 'sock',\n 'when',\n 'I',\n 'do',\n 'laundry.']\n\n\n\ntype(words)\n\nlist\n\n\n\n\nmy_list = [1.2, 3, None, True, 'One of the lost socks']\nmy_list\n\n[1.2, 3, None, True, 'One of the lost socks']\n\n\n\nThe output from the .split() verb is called a list.\nSimilarly to how a string is a sequence of characters in order, a list is a sequence of elements with a particular order.\nLists can be identified by their square brackets.\nThe elements in a list can be any objects, and they don’t all need to have the same type."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#mutable-vs-immutable",
    "href": "modules/module4/slides/module4_05.html#mutable-vs-immutable",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Mutable vs Immutable",
    "text": "Mutable vs Immutable\n\nmy_list\n\n[1.2, 3, None, True, 'One of the lost socks']\n\n\n\n\nmy_list[2] = \"Ta Da!\"\n\n\n\nmy_list\n\n[1.2, 3, 'Ta Da!', True, 'One of the lost socks']\n\n\n\nNext, we’ll talk about mutable and immutable data types.\nAn object is mutable if it can be modified.\nLists are mutable, and we can assign new values for their various entries.\nFor example, we can edit any entry in this list and replace it with a new value."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#list-verbs",
    "href": "modules/module4/slides/module4_05.html#list-verbs",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "List Verbs",
    "text": "List Verbs\n\nprimes = [2,3,5,7,11]\n\n\n\nprimes.append(13)\nprimes\n\n[2, 3, 5, 7, 11, 13]\n\n\n\n\nmax(primes)\n\n13\n\n\n\n\nsum(primes)\n\n41\n\n\n\nLists have a variety of different methods for interacting with their data. Here are just a few.\nWe can add to the end of a list with append(). Notice how we didn’t need to write prime = and overwrite the prime object, because append modified primes directly.\nWe can find the maximum value in the list with max().\nAnd the sum of the list with sum()."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#lists-to-dataframes",
    "href": "modules/module4/slides/module4_05.html#lists-to-dataframes",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Lists to Dataframes",
    "text": "Lists to Dataframes\n\n\n\n\n\n\nitem\nlocation\nprice\n\n\n\n\n0\ntoothpaste\nLondon Drugs\n3.99\n\n\n1\napples\nProduce Store\n4.00\n\n\n2\nbread\nBakery\n3.50\n\n\n\n\n\n\nitem1 = ['toothpaste', 'London Drugs', 3.99]\nitem2 = ['apples', 'Produce Store', 4.00]\nitem3 = ['bread', 'Bakery', 3.50]\ncolumn_names = ['item', 'location', 'price']\n\nshopping_items = pd.DataFrame(data=[item1, item2, item3], columns=column_names)\nshopping_items\n\n\n\n\n\n\n\n\nitem\nlocation\nprice\n\n\n\n\n0\ntoothpaste\nLondon Drugs\n3.99\n\n\n1\napples\nProduce Store\n4.00\n\n\n2\nbread\nBakery\n3.50\n\n\n\n\n\n\n\n\n\ntype(shopping_items)\n\npandas.core.frame.DataFrame\n\n\n\nUp until this point, we have been working with dataframes that have been read in and converted from different types of files.\nHowever, we can also make dataframes from scratch using lists.\nLet’s say we wanted a dataframe of things we needed to purchase from the store on our next grocery shopping trip, as shown in the table here.\nWe can use a list for each row and a list for the column labels. We then use another list of all the rows to make up the data.\nNow the shopping items are no longer in a structure type list, but in a type DataFrame."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#tuples",
    "href": "modules/module4/slides/module4_05.html#tuples",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Tuples",
    "text": "Tuples\n\nmy_tuple = ('I', 'lose', None,  'socks', 'when', 1, 'do', 'laundry.', False)\nmy_tuple\n\n('I', 'lose', None, 'socks', 'when', 1, 'do', 'laundry.', False)\n\n\n\n\ntype(my_tuple)\n\ntuple\n\n\n\nTuples are a data structure very similar to lists but with two main differences:\n\nThey are represented with parentheses instead of square brackets, and\nThey are immutable"
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#sets",
    "href": "modules/module4/slides/module4_05.html#sets",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "Sets",
    "text": "Sets\n\nmy_set = {2, 1.0, 'Buckle my shoe'}\nmy_set\n\n{1.0, 2, 'Buckle my shoe'}\n\n\n\n\nmy_set = {2, 1.0, 'Buckle my shoe', 1.0, 2}\nmy_set\n\n{1.0, 2, 'Buckle my shoe'}\n\n\n\nSets, not unlike lists and tuples, are a data structure that contains elements. Sets differ from lists and tuples in that:\n\nThey are unordered, meaning there is no element 0 and element 1, and\n\nThe values contained are unique - meaning there are no duplicate entries.\n\nLet’s explore this a bit.\nSets are made with curly brackets.\nYou’ll notice that the printed order is not the same as we inputted then in. That’s because sets do not preserve order.\nIf we have repeats of any entries, they only occur once in the set. This is useful if you want to keep track of a set of things, like who visited a store, and you’re not interested in repeat entries."
  },
  {
    "objectID": "modules/module4/slides/module4_05.html#all-together-now",
    "href": "modules/module4/slides/module4_05.html#all-together-now",
    "title": "Python Data Structures: Lists, Tuples and Sets",
    "section": "All Together Now",
    "text": "All Together Now\n\n\n\n\n\n\n\n\n\n\n\nData Structure\npreserves order\nMutable\nSymbol\nCan contain duplicates\n\n\n\n\nstr\n✓\n☓\n'' or \"\"\n✓\n\n\nlist\n✓\n✓\n[]\n✓\n\n\ntuple\n✓\n☓\n()\n✓\n\n\nset\n☓\n✓\n{}\n☓\n\n\n\n\nWe have condensed the data structures characteristics into a convenient table for you."
  },
  {
    "objectID": "modules/module4/slides/module4_00.html#module-learning-outcomes",
    "href": "modules/module4/slides/module4_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nCompare and contrast Python’s key data types.\nCompare and contrast Python’s key data structures.\nUse Python to determine the type and structure of an object.\nDemonstrate how to create data structures and convert them to another.\nIdentify which operations can be applied to different data types and columns dtypes."
  },
  {
    "objectID": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html",
    "href": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s split up a column of dtype object.\nTasks:\n\nSplit up the column Birth Date into 3 separate columns named Birth_Day, Birth_Month and Birth_Year.\nName this new dataframe birthdate_df.\nSave these as columns in the canucks dataframe as dtype int.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using str.split('-', expand='True')?\n\nAre you saving the columns from the birthdate_df back to the canucks dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html#practice-operations-with-dataframe-columns",
    "href": "modules/module4/module4-24-practice_operations_with_dataframe_columns.html#practice-operations-with-dataframe-columns",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s split up a column of dtype object.\nTasks:\n\nSplit up the column Birth Date into 3 separate columns named Birth_Day, Birth_Month and Birth_Year.\nName this new dataframe birthdate_df.\nSave these as columns in the canucks dataframe as dtype int.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using str.split('-', expand='True')?\n\nAre you saving the columns from the birthdate_df back to the canucks dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-22-whats_that_output_with_column_operations.html",
    "href": "modules/module4/module4-22-whats_that_output_with_column_operations.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Here is my dataframe named fruit_salad:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ncolour\nlocation\nseed\nshape\nsweetness\nwater-content\nweight\n\n\n\n\n0\napple\nred\ncanada\nTrue\nround\nTrue\n84\n100\n\n\n1\nbanana\nyellow\nmexico\nFalse\nlong\nTrue\n75\n120\n\n\n2\ncantaloupe\norange\nspain\nTrue\nround\nTrue\n90\n1360\n\n\n3\ndragon-fruit\nmegenta\nchina\nTrue\nround\nFalse\n96\n600\n\n\n4\nelderberry\npurple\naustria\nFalse\nround\nTrue\n80\n5\n\n\n5\nfig\npurple\nturkey\nFalse\noval\nFalse\n78\n40\n\n\n6\nguava\ngreen\nmexico\nTrue\noval\nTrue\n83\n450\n\n\n7\nhuckleberry\nblue\ncanada\nTrue\nround\nTrue\n73\n5\n\n\n8\nkiwi\nbrown\nchina\nTrue\nround\nTrue\n80\n76\n\n\n9\nlemon\nyellow\nmexico\nFalse\noval\nFalse\n83\n65",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-22-whats_that_output_with_column_operations.html#whats-that-output-with-column-operations",
    "href": "modules/module4/module4-22-whats_that_output_with_column_operations.html#whats-that-output-with-column-operations",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Here is my dataframe named fruit_salad:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nname\ncolour\nlocation\nseed\nshape\nsweetness\nwater-content\nweight\n\n\n\n\n0\napple\nred\ncanada\nTrue\nround\nTrue\n84\n100\n\n\n1\nbanana\nyellow\nmexico\nFalse\nlong\nTrue\n75\n120\n\n\n2\ncantaloupe\norange\nspain\nTrue\nround\nTrue\n90\n1360\n\n\n3\ndragon-fruit\nmegenta\nchina\nTrue\nround\nFalse\n96\n600\n\n\n4\nelderberry\npurple\naustria\nFalse\nround\nTrue\n80\n5\n\n\n5\nfig\npurple\nturkey\nFalse\noval\nFalse\n78\n40\n\n\n6\nguava\ngreen\nmexico\nTrue\noval\nTrue\n83\n450\n\n\n7\nhuckleberry\nblue\ncanada\nTrue\nround\nTrue\n73\n5\n\n\n8\nkiwi\nbrown\nchina\nTrue\nround\nTrue\n80\n76\n\n\n9\nlemon\nyellow\nmexico\nFalse\noval\nFalse\n83\n65",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-19-output_or_error_with_operations.html",
    "href": "modules/module4/module4-19-output_or_error_with_operations.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Will the following operations result with an output or an error?\n['One', 'Two', 3] + (4, 'five', 6)\n\n\n\n\ntuple(['One', 'Two', 3]) + (4, 'five', 6)\n\n\n\n\ndictionary1 = {1: 'one', 2: 'two'}\ndictionary2 = {3: 'three', 4: 'four'}\n\ndictionary1 + dictionary2\n\n\n\n\nsum(['nine', 'ten', 'eleven', 'twelve'])\n\n\n\n\n'The monster under my bed' + [1, 2.0, 3, 4.5]\n\n\n\n\n\n\n\nWould the following result in a True of False value?\n('hotels' != 'homes') and 50 &lt; 5000\n\n\n\n\nnot ('hotels' != 'homes') \n\n\n\n\nnot not ('hotels' != 'homes')",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-19-output_or_error_with_operations.html#output-or-error-with-operations",
    "href": "modules/module4/module4-19-output_or_error_with_operations.html#output-or-error-with-operations",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Will the following operations result with an output or an error?\n['One', 'Two', 3] + (4, 'five', 6)\n\n\n\n\ntuple(['One', 'Two', 3]) + (4, 'five', 6)\n\n\n\n\ndictionary1 = {1: 'one', 2: 'two'}\ndictionary2 = {3: 'three', 4: 'four'}\n\ndictionary1 + dictionary2\n\n\n\n\nsum(['nine', 'ten', 'eleven', 'twelve'])\n\n\n\n\n'The monster under my bed' + [1, 2.0, 3, 4.5]",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-19-output_or_error_with_operations.html#true-or-false-with-boolean-operators",
    "href": "modules/module4/module4-19-output_or_error_with_operations.html#true-or-false-with-boolean-operators",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Would the following result in a True of False value?\n('hotels' != 'homes') and 50 &lt; 5000\n\n\n\n\nnot ('hotels' != 'homes') \n\n\n\n\nnot not ('hotels' != 'homes')",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-15-name_that_type_dtype.html",
    "href": "modules/module4/module4-15-name_that_type_dtype.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nRemember our canucks dataframe? Let’s take a closer look at the labels of the columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlayer\nNo.\nAge\nHeight\nWeight\nCountry\nPosition\nExperience\nBirth Date\nSalary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Question 1 (a)\n\n\n\n\nQuestion 1 (b)\nUse the coding cell below to check the dtype for the Salary column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 1 (c)\n\n\n\n\nQuestion 2 (a)\n\n\n\n\nQuestion 2 (b)\nUse the coding cell below to check the dtype for the Weight column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 2 (c)",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-15-name_that_type_dtype.html#dtype-practice",
    "href": "modules/module4/module4-15-name_that_type_dtype.html#dtype-practice",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nRemember our canucks dataframe? Let’s take a closer look at the labels of the columns.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPlayer\nNo.\nAge\nHeight\nWeight\nCountry\nPosition\nExperience\nBirth Date\nSalary\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n Question 1 (a)\n\n\n\n\nQuestion 1 (b)\nUse the coding cell below to check the dtype for the Salary column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 1 (c)\n\n\n\n\nQuestion 2 (a)\n\n\n\n\nQuestion 2 (b)\nUse the coding cell below to check the dtype for the Weight column.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the attribute dtypes?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nQuestion 2 (c)",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-11-dictionary_questions.html",
    "href": "modules/module4/module4-11-dictionary_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nRecently Jeremy bought a new Ikea shoe rack. The packaging included quite a few parts and he is finding it hard to keep track!\nTasks:\n\nMake a dictionary that includes the quantity of each part included in the Ikea set.\n\nThe shoe rack contained the following parts:\n\n8 Long Screw\n8 Wood Dowel\n2 Short Screw\n1 Allen Key\nConstruct the dictionary so that the part names are the keys and the quantities of the parts, are the values for the dictionary.\nName the dictionary ikea_shoe_rack.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your dictionary properly?\nAre all your parts spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shoe rack was not the only thing Jeremy bought. below is a table of all his purchases.\n\n\n\n\nitem_name\ncollection\nprice\n\n\n\n\n0\nBistro Set\nAPPLARO\n216.98\n\n\n1\nShelf Unit\nHYLLIS\n11.99\n\n\n3\nShoe Rack\nTJUSIG\n29.99\n\n\n\nTasks:\n\nCreate the table above from a dictionary using pd.DataFrame.from_dict().\nName your new dataframe ikea_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using lists as the values in your dictionary?\nAre you making sure to use floats for the price?\nare all your items and collections spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-11-dictionary_questions.html#coding-questions",
    "href": "modules/module4/module4-11-dictionary_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nRecently Jeremy bought a new Ikea shoe rack. The packaging included quite a few parts and he is finding it hard to keep track!\nTasks:\n\nMake a dictionary that includes the quantity of each part included in the Ikea set.\n\nThe shoe rack contained the following parts:\n\n8 Long Screw\n8 Wood Dowel\n2 Short Screw\n1 Allen Key\nConstruct the dictionary so that the part names are the keys and the quantities of the parts, are the values for the dictionary.\nName the dictionary ikea_shoe_rack.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your dictionary properly?\nAre all your parts spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe shoe rack was not the only thing Jeremy bought. below is a table of all his purchases.\n\n\n\n\nitem_name\ncollection\nprice\n\n\n\n\n0\nBistro Set\nAPPLARO\n216.98\n\n\n1\nShelf Unit\nHYLLIS\n11.99\n\n\n3\nShoe Rack\nTJUSIG\n29.99\n\n\n\nTasks:\n\nCreate the table above from a dictionary using pd.DataFrame.from_dict().\nName your new dataframe ikea_df\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using lists as the values in your dictionary?\nAre you making sure to use floats for the price?\nare all your items and collections spelled correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-name_that_data_structure.html",
    "href": "modules/module4/module4-06-name_that_data_structure.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s explore how to add to a list, slice it and convert it into a tuple.\nTasks:\n\nUsing the list provided, add a pen, a scrap paper, a 7.3 and a True element.\nFind the length of the list after adding the element and save the value in an object named drawer_length.\nSlice the list from 4 to scrap paper and save this in an object named cleaned_junk_drawer.\nFinally, convert it into a set and name it junk_set.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nThe verbs .append() and len() may be handy.\nYou can convert your list to a tuple with `tuple().\nHave you sliced keeping in mind the end of the slice is excluded?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s use lists and convert them into a pandas dataframe.\nTasks:\n\nUse the lists given in the cell below to make a dataframe.\nName the dataframe family.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.DataFrame()?\nAre you using the arguments data and columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-06-name_that_data_structure.html#coding-questions",
    "href": "modules/module4/module4-06-name_that_data_structure.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s explore how to add to a list, slice it and convert it into a tuple.\nTasks:\n\nUsing the list provided, add a pen, a scrap paper, a 7.3 and a True element.\nFind the length of the list after adding the element and save the value in an object named drawer_length.\nSlice the list from 4 to scrap paper and save this in an object named cleaned_junk_drawer.\nFinally, convert it into a set and name it junk_set.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nThe verbs .append() and len() may be handy.\nYou can convert your list to a tuple with `tuple().\nHave you sliced keeping in mind the end of the slice is excluded?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s use lists and convert them into a pandas dataframe.\nTasks:\n\nUse the lists given in the cell below to make a dataframe.\nName the dataframe family.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.DataFrame()?\nAre you using the arguments data and columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-name_that_data_type.html",
    "href": "modules/module4/module4-02-name_that_data_type.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "For the next few questions, name the data type of each value.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nHow many times do the lyrics “Let it be” occur in the Beatles Hit song of the same title?\nTasks:\n\nUse some of the string verbs you learned in the lecture to count all the times “let it be” (all upper and lower case versions) appears in the string lyrics.\nSave it in an object named letitbe_count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you converting lyrics to lowercase using .lower()?\nAre you using .count() with the argument let it be?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow can we cast from a string to an integer value?\nTasks:\n\nConvert string1 to a float in an object named pi.\nConvert the object pi now into an int named pi_slice.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using float()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using int()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-name_that_data_type.html#name-that-data-type",
    "href": "modules/module4/module4-02-name_that_data_type.html#name-that-data-type",
    "title": "1.1. Exercises",
    "section": "",
    "text": "For the next few questions, name the data type of each value.",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-02-name_that_data_type.html#coding-questions",
    "href": "modules/module4/module4-02-name_that_data_type.html#coding-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nHow many times do the lyrics “Let it be” occur in the Beatles Hit song of the same title?\nTasks:\n\nUse some of the string verbs you learned in the lecture to count all the times “let it be” (all upper and lower case versions) appears in the string lyrics.\nSave it in an object named letitbe_count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you converting lyrics to lowercase using .lower()?\nAre you using .count() with the argument let it be?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHow can we cast from a string to an integer value?\nTasks:\n\nConvert string1 to a float in an object named pi.\nConvert the object pi now into an int named pi_slice.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using float()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using int()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module4/module4-00-module_learning_outcomes.html",
    "href": "modules/module4/module4-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#introducing-the-data",
    "href": "modules/module3/slides/module3_21.html#introducing-the-data",
    "title": "Joining Dataframes using Merge",
    "section": "Introducing the Data",
    "text": "Introducing the Data\n\ncandy = pd.read_csv('data/candybars.csv', nrows=5, usecols=['name', 'weight', 'chocolate', 'peanuts'])\ncandy.head()\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\nWith .merge(), we need to identify a column in each dataframe that acts as a connection between them.\nIt’s a column where the values in Dataframe A are the same values to those in Dataframe B.\nIn the easiest situations both columns are named the same thing, but that doesn’t have to be the case.\nLet’s use a subset of the candy bars dataset to explain this concept further.\ncandy has a column labeled name which has unique candy bar names."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#key-columns",
    "href": "modules/module3/slides/module3_21.html#key-columns",
    "title": "Joining Dataframes using Merge",
    "section": "Key Columns",
    "text": "Key Columns\n.merge() needs arguments that identify a common key column. This is a column present in both dataframes which contain common values.\nTo choose our key columns in each dataframe, we use the following arguments:\n\nleft_on - The left dataframe identifying key column label.\nright_on - The right dataframe identifying key column label.\n\n\n.merge() needs arguments that identify a common key column. This is a column present in both dataframes which contain common values.\nKey columns do not need to be named identically.\nTo choose our key columns in each dataframe, we use the following arguments:\n\nleft_on - The left dataframe identifying key column label.\nright_on - The right dataframe identifying key column label.\n\nFor example:\nDataframe A can have a column labeled cereal, and Dataframe B could have a column labeled product_name that both share cereal names."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#how",
    "href": "modules/module3/slides/module3_21.html#how",
    "title": "Joining Dataframes using Merge",
    "section": "how",
    "text": "how\n\ncandy.merge(candy2m, left_on='name', right_on='chocolate_bar', how='inner')\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncalories\nfat\nsugar\nchocolate_bar\n\n\n\n\n0\nButterfinger\n184\n1\n1\n...\n798\n30.0\n72.0\nButterfinger\n\n\n1\nTwix\n58\n1\n0\n...\n250\n12.0\n25.0\nTwix\n\n\n\n\n2 rows × 9 columns\n\n\n\n\n\nThe how argument specifies “how” our dataframes are joined.\nWe mentioned that the default argument value inner will only keep the rows with identifying column values that are present in both dataframes."
  },
  {
    "objectID": "modules/module3/slides/module3_21.html#indicator",
    "href": "modules/module3/slides/module3_21.html#indicator",
    "title": "Joining Dataframes using Merge",
    "section": "indicator",
    "text": "indicator\n\ncandy.merge(candy2m, left_on='name', right_on='chocolate_bar', how='outer', indicator=True)\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\nfat\nsugar\nchocolate_bar\n_merge\n\n\n\n\n0\nNaN\nNaN\nNaN\nNaN\n...\n8.0\n40.0\n3 Musketeers\nright_only\n\n\n1\nNaN\nNaN\nNaN\nNaN\n...\n13.0\n32.0\nBabe Ruth\nright_only\n\n\n2\nButterfinger\n184.0\n1.0\n1.0\n...\n30.0\n72.0\nButterfinger\nboth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n5\nSkor\n39.0\n1.0\n0.0\n...\nNaN\nNaN\nNaN\nleft_only\n\n\n6\nSmarties\n45.0\n1.0\n0.0\n...\nNaN\nNaN\nNaN\nleft_only\n\n\n7\nTwix\n58.0\n1.0\n0.0\n...\n12.0\n25.0\nTwix\nboth\n\n\n\n\n8 rows × 10 columns\n\n\n\n\nindicator makes a new column name _merge and informs us from which dataframe the row originated from.\nIf we want to do an outer join and show all the possible rows from both dataframes, there is a useful argument called indicator.\nHere we can see three possible values left_only, right_only, or both which informs us if the row came from the left dataframe, the right dataframe or if the row index label is shared between both dataframes."
  },
  {
    "objectID": "modules/module3/slides/module3_14.html#melt",
    "href": "modules/module3/slides/module3_14.html#melt",
    "title": "Reshaping with Melt",
    "section": "Melt",
    "text": "Melt\n\nmelted_cereal  = (cereal.melt(id_vars=['name', 'mfr'] , \n                              value_vars=['calories', 'protein'], \n                              var_name='nutrition', \n                              value_name='value')\n                  )\nmelted_cereal\n\n\n\n\n\n\n\n\nname\nmfr\nnutrition\nvalue\n\n\n\n\n0\nSpecial K\nK\ncalories\n110\n\n\n1\nApple Jacks\nK\ncalories\n110\n\n\n2\nRaisin Bran\nK\ncalories\n120\n\n\n...\n...\n...\n...\n...\n\n\n7\nRaisin Bran\nK\nprotein\n3\n\n\n8\nCheerios\nG\nprotein\n6\n\n\n9\nWheaties\nG\nprotein\n3\n\n\n\n\n10 rows × 4 columns\n\n\n\n\nLet’s attempt to melt the calories and protein columns into a single one named nutrition with the values expressed in a column named value.\nThis is the dataframe exactly like we started with when we used .pivot() in the last section.\nAfter melting, we can see that the rows are not quite in the same order as before, but we can agree that its what we want."
  },
  {
    "objectID": "modules/module3/slides/module3_08.html#pivot",
    "href": "modules/module3/slides/module3_08.html#pivot",
    "title": "Reshaping with Pivot",
    "section": "Pivot",
    "text": "Pivot\n\n\n.pivot() can be used in situations to transform long dataframes into wider ones.\nConsider the dataframe below.\nHow can we convert it?"
  },
  {
    "objectID": "modules/module3/slides/module3_08.html#resetting-the-index",
    "href": "modules/module3/slides/module3_08.html#resetting-the-index",
    "title": "Reshaping with Pivot",
    "section": "Resetting the Index",
    "text": "Resetting the Index\n\ncereal_wide.head(5)\n\n\n\n\n\n\n\nnutrition\ncalories\nprotein\n\n\nname\n\n\n\n\n\n\nApple Jacks\n110\n2\n\n\nCheerios\n110\n6\n\n\nRaisin Bran\n120\n3\n\n\nSpecial K\n110\n6\n\n\nWheaties\n100\n3\n\n\n\n\n\n\n\n\n\ncereal_wide_messy = cereal_wide.reset_index()\ncereal_wide_messy.head(5)\n\n\n\n\n\n\n\nnutrition\nname\ncalories\nprotein\n\n\n\n\n0\nApple Jacks\n110\n2\n\n\n1\nCheerios\n110\n6\n\n\n2\nRaisin Bran\n120\n3\n\n\n3\nSpecial K\n110\n6\n\n\n4\nWheaties\n100\n3\n\n\n\n\n\n\n\n\nLet’s take a brief detour and discuss resetting the index. Here is our dataframe cereal_wide.\nWhile pivoting we transformed the name column as our index.\nWe can transform the name index back into a regular column by using the same reset_index() verb we learned when plotting grouped dataframes in module 2:"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#what-is-the-concept-of-tidy-data",
    "href": "modules/module3/slides/module3_01.html#what-is-the-concept-of-tidy-data",
    "title": "Tidy Data",
    "section": "What is the concept of tidy data?",
    "text": "What is the concept of tidy data?\nTidy data satisfies the following three criteria:\n\nEach row is a single observation,\nEach variable is a single column, and\nEach value is a single cell (i.e., its row, column position in the dataframe is not shared with another value)\n\n\nImage Source: R for Data Science by Garrett Grolemund & Hadley Wickham\n\nWhat a variable and an observation is may depend on your immediate goal.\n\nWhen we first hear “tidy data”, you likely think of clean, organized, and orderly data. The same applies here, however, the concept of tidy data stems from a paper written by renowned data scientist Hadley Wickham in 2014.\nWe tidy our data in such a way so that we can create a standard across multiple analysis tools. It changes the focus from figuring out the logistics of how the data is structured, to answering the actual analysis question being asked.\nThis approach allows us to standardize input arguments of certain analysis verbs like .describe() and other predictive methods."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation",
    "href": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation",
    "title": "Tidy Data",
    "section": "Criterion #1: Each row is a single observation",
    "text": "Criterion #1: Each row is a single observation\n\n\nFrom the dataframe we can see that each cereal has its own row. Criterion #1 is met!"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column",
    "href": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column",
    "title": "Tidy Data",
    "section": "Criterion #2: Each variable is a single column",
    "text": "Criterion #2: Each variable is a single column\n\n\nFrom the dataframe we can see that each of the variables name, mfr, calories and protein have their own column. We can validate that criterion #2 is also met."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-3-each-value-is-a-single-cell",
    "href": "modules/module3/slides/module3_01.html#criterion-3-each-value-is-a-single-cell",
    "title": "Tidy Data",
    "section": "Criterion #3: Each value is a single cell",
    "text": "Criterion #3: Each value is a single cell\n\n\nThe variable value for each cereal has it’s own cell, confirming that criterion #3 is met!"
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation-1",
    "href": "modules/module3/slides/module3_01.html#criterion-1-each-row-is-a-single-observation-1",
    "title": "Tidy Data",
    "section": "Criterion #1 Each row is a single observation",
    "text": "Criterion #1 Each row is a single observation\n\n\nFrom the dataframe we can see that each observation has its own row. There are 2 rows per cereal but each row is unique.\nWe can confirm that criterion 1 is met."
  },
  {
    "objectID": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column-1",
    "href": "modules/module3/slides/module3_01.html#criterion-2-each-variable-is-a-single-column-1",
    "title": "Tidy Data",
    "section": "Criterion #2: Each variable is a single column",
    "text": "Criterion #2: Each variable is a single column\n\n\nIt looks like we have a problem here. In this dataframe, two of our variables we are measuring for our statistical question are contained in a single column. This is making the data untidy and potentially a problem to work with.\nFor example, what if I wanted to know the average calorie content of the cereals?"
  },
  {
    "objectID": "modules/module3/module3-25-what_did_we_just_learn.html",
    "href": "modules/module3/module3-25-what_did_we_just_learn.html",
    "title": "8. What Did We Just Learn?",
    "section": "",
    "text": "8. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "8. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module3/module3-21-joining_dataframes_using_merge.html",
    "href": "modules/module3/module3-21-joining_dataframes_using_merge.html",
    "title": "7. Joining Dataframes using Merge",
    "section": "",
    "text": "7. Joining Dataframes using Merge\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "7. Joining Dataframes using Merge"
    ]
  },
  {
    "objectID": "modules/module3/module3-17-concatenation.html",
    "href": "modules/module3/module3-17-concatenation.html",
    "title": "6. Concatenation",
    "section": "",
    "text": "6. Concatenation\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "6. Concatenation"
    ]
  },
  {
    "objectID": "modules/module3/module3-14-reshaping_with_melt.html",
    "href": "modules/module3/module3-14-reshaping_with_melt.html",
    "title": "5. Reshaping with Melt",
    "section": "",
    "text": "5. Reshaping with Melt\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "5. Reshaping with Melt"
    ]
  },
  {
    "objectID": "modules/module3/module3-11-reshaping_with_pivot_table.html",
    "href": "modules/module3/module3-11-reshaping_with_pivot_table.html",
    "title": "4. Reshaping with Pivot Table",
    "section": "",
    "text": "4. Reshaping with Pivot Table\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "4. Reshaping with Pivot Table"
    ]
  },
  {
    "objectID": "modules/module3/module3-08-reshaping_with_pivot.html",
    "href": "modules/module3/module3-08-reshaping_with_pivot.html",
    "title": "3. Reshaping with Pivot",
    "section": "",
    "text": "3. Reshaping with Pivot\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "3. Reshaping with Pivot"
    ]
  },
  {
    "objectID": "modules/module3/module3-05-statistical_questions_and_tidy_data.html",
    "href": "modules/module3/module3-05-statistical_questions_and_tidy_data.html",
    "title": "2. Statistical Questions and Tidy Data",
    "section": "",
    "text": "2. Statistical Questions and Tidy Data\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "2. Statistical Questions and Tidy Data"
    ]
  },
  {
    "objectID": "modules/module3/module3-01-what_is_tidy_data.html",
    "href": "modules/module3/module3-01-what_is_tidy_data.html",
    "title": "1. What is Tidy Data?",
    "section": "",
    "text": "1. What is Tidy Data?\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "1. What is Tidy Data?"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_31.html#summary",
    "href": "modules/module2/slides/module2_31.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 2",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDemonstrate how to rename columns of a dataframe using .rename().\nCreate new or columns in a dataframe using .assign() notation.\nDrop columns in a dataframe using .drop()\nUse df[] notation to filter rows of a dataframe.\nCalculate summary statistics on grouped objects using .groupby() and .agg().\nExplain when chaining is appropriate.\nDemonstrate chaining over multiple lines and verbs.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module2/slides/module2_31.html#attribution",
    "href": "modules/module2/slides/module2_31.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 2",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#using-groupby",
    "href": "modules/module2/slides/module2_25.html#using-groupby",
    "title": "Grouping and Aggregating",
    "section": "Using groupby",
    "text": "Using groupby\n\nmfr_group = cereal.groupby(by='mfr')\nmfr_group\n\n&lt;pandas.core.groupby.generic.DataFrameGroupBy object at 0x7f64f54ca990&gt;\n\n\n\nPandas has a solution for this.\nIt’s not uncommon to be interested in examining specific groups in our data. Hence there is a verb that is helpful in grouping like-rows together.\n.groupby() allows us to group our data based on a specified column.\nLet’s group our cereal dataframe on the mfr column and save it as object mfr_group.\nThis returns a DataFrame GroupBy object."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#summary-statistics-with-groups",
    "href": "modules/module2/slides/module2_25.html#summary-statistics-with-groups",
    "title": "Grouping and Aggregating",
    "section": "Summary Statistics with Groups",
    "text": "Summary Statistics with Groups\n\nmfr_group = cereal.drop(columns=[\"name\", \"type\"]).groupby(by='mfr')\nmfr_group.mean()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\nmfr\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n100.000000\n4.000000\n1.000000\n0.000000\n...\n2.000000\n1.000000\n1.00000\n54.850917\n\n\nG\n111.363636\n2.318182\n1.363636\n200.454545\n...\n2.136364\n1.049091\n0.87500\n34.485852\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ\n95.000000\n2.625000\n1.750000\n92.500000\n...\n2.375000\n0.875000\n0.82375\n42.915990\n\n\nR\n115.000000\n2.500000\n1.250000\n198.125000\n...\n2.000000\n1.000000\n0.87125\n41.542997\n\n\n\n\n7 rows × 13 columns\n\n\n\n\nmfr_group.max()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\nmfr\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n100\n4\n1\n0\n...\n2\n1.0\n1.00\n54.850917\n\n\nG\n140\n6\n3\n290\n...\n3\n1.5\n1.50\n51.592193\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nQ\n120\n5\n5\n220\n...\n3\n1.0\n1.00\n63.005645\n\n\nR\n150\n4\n3\n280\n...\n3\n1.0\n1.13\n49.787445\n\n\n\n\n7 rows × 13 columns\n\n\n\n\nWhat now?\nGrouping doesn’t answer our initial question of Which manufacturer has the highest mean sugar content?\nWhere do we go from here?\nWe need to calculate the mean sugar content in each manufacturing group! With a groupby object, this is super simple, as shown here.\nUsing .mean() on our groupby object answers the initial question and confirms that manufacturer “P” has the highest mean sugar content across cereals.\nSee how convenient this was to do in comparison to our initial method? Not only does this give us the result quicker, but it also gives us the mean of each column of the dataframe.\nThink of how many filtering and mean calculations would have to be done if we were to do this using our initial approach.\nOf course, using groups is not limited to finding only the mean. We can do the same thing for other statistics too like .min() and .max(), or many other operations."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#aggregating-dataframes",
    "href": "modules/module2/slides/module2_25.html#aggregating-dataframes",
    "title": "Grouping and Aggregating",
    "section": "Aggregating dataframes",
    "text": "Aggregating dataframes\n\ncereal.select_dtypes(include=np.number).agg('mean')\n\ncalories    106.883117\nprotein       2.545455\nfat           1.012987\n               ...    \nweight        1.029610\ncups          0.821039\nrating       42.665705\nLength: 13, dtype: float64\n\n\n\n\ncereal.mean(numeric_only=True)\n\ncalories    106.883117\nprotein       2.545455\nfat           1.012987\n               ...    \nweight        1.029610\ncups          0.821039\nrating       42.665705\nLength: 13, dtype: float64\n\n\n\nIn situations where we want to collect multiple statistics together, we can aggregate them in one step using a verb called .agg().\n.agg() can be used on its own using a single measurement, without .groupby().\nUsing .agg() with only a mean input is essentially the same thing as calling the statistic mean() on the dataframe."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#aggregating-groupby-objects",
    "href": "modules/module2/slides/module2_25.html#aggregating-groupby-objects",
    "title": "Grouping and Aggregating",
    "section": "Aggregating groupby objects",
    "text": "Aggregating groupby objects\n\nmfr_group.agg(['max', 'min', 'median'])\n\n\n\n\n\n\n\n\ncalories\nprotein\n...\ncups\nrating\n\n\n\nmax\nmin\nmedian\nmax\n...\nmedian\nmax\nmin\nmedian\n\n\nmfr\n\n\n\n\n\n\n\n\n\n\n\n\n\nA\n100\n100\n100.0\n4\n...\n1.000\n54.850917\n54.850917\n54.850917\n\n\nG\n140\n100\n110.0\n6\n...\n0.875\n51.592193\n19.823573\n36.181877\n\n\nK\n160\n50\n110.0\n6\n...\n0.750\n93.704912\n29.924285\n40.560159\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\nP\n120\n90\n110.0\n3\n...\n0.670\n53.371007\n28.025765\n40.917047\n\n\nQ\n120\n50\n100.0\n5\n...\n0.875\n63.005645\n18.042851\n47.419974\n\n\nR\n150\n90\n110.0\n4\n...\n0.875\n49.787445\n34.139765\n41.721976\n\n\n\n\n7 rows × 39 columns\n\n\n\n\n.agg() is particularly useful with groupby objects.\nLet’s try it on our manufacturer groupby object named mfr_group.\nThis gives us a value for each group and for each statistic we specified.\nFor example:\nLook at the ‘150’ in the bottom row on the far left under calories. The interpretation is that, for cases where the manufacturer is ‘R’, the max number of calories is 150.\nIn a similar manner if the manufacturer is ‘P’ the minumum amount of sodium is 45."
  },
  {
    "objectID": "modules/module2/slides/module2_25.html#extra-fancy-aggregation",
    "href": "modules/module2/slides/module2_25.html#extra-fancy-aggregation",
    "title": "Grouping and Aggregating",
    "section": "Extra Fancy Aggregation",
    "text": "Extra Fancy Aggregation\n\nmfr_group.agg({\"calories\":['max', 'min'],\n               \"rating\":['sum'],  \n               \"sugars\":['mean', 'median']})\n\n\n\n\n\n\n\n\ncalories\nrating\nsugars\n\n\n\nmax\nmin\nsum\nmean\nmedian\n\n\nmfr\n\n\n\n\n\n\n\n\n\nA\n100\n100\n54.850917\n3.000000\n3.0\n\n\nG\n140\n100\n758.688737\n7.954545\n8.5\n\n\nK\n160\n50\n1012.884634\n7.565217\n7.0\n\n\n...\n...\n...\n...\n...\n...\n\n\nP\n120\n90\n375.351697\n8.777778\n10.0\n\n\nQ\n120\n50\n343.327919\n5.500000\n6.0\n\n\nR\n150\n90\n332.343977\n6.125000\n5.5\n\n\n\n\n7 rows × 5 columns\n\n\n\n\nYou might have noticed that when we used .agg(), we calculated the same 3 statistics for every column in the dataframe. But we can also calculate different statistics for different columns.\nLet’s say we are concerned about the max and min calorie values, the total sum of the ratings and the mean and median sugar content for each manufacturing group.\nWe can achieve this by wrapping everything in curly brackets and using a colon to separate the column name from the statistics values. We need to put the statistics within square brackets.\nThe code is a bit more complicated, but the result is a bit easier to read."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#building-on-things-we-know",
    "href": "modules/module2/slides/module2_20.html#building-on-things-we-know",
    "title": "Conditional value replacement and assignment",
    "section": "Building on things we know",
    "text": "Building on things we know\n\ncereal = pd.read_csv('data/cereal.csv',\n                  usecols=['name', 'mfr', 'type', 'calories', 'protein', 'weight', 'rating'])\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nweight\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n4\n1.0\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n3\n1.0\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n4\n1.0\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n4\n1.0\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n2\n1.0\n34.384843\n\n\n\n\n\n\n\n\nSo far, we have accumulated many different skills to wrangle our data.\nOne type of transformation that you may use often is replacing values within a column depending on a certain condition.\nLet’s bring in a smaller version of our cereal dataset.\nIn the dataframe, the manufacturer value “Q” isn’t that informative and it might be easier to understand our data if we change all these values to something more clear like “Quaker”.\nThis leads us to our task:\nReplace the Q manufacturer values with a new value of Quaker."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#building-on-more-things-we-know",
    "href": "modules/module2/slides/module2_20.html#building-on-more-things-we-know",
    "title": "Conditional value replacement and assignment",
    "section": "Building on more things we know",
    "text": "Building on more things we know\n\ncereal.loc[73] \n\nname            Trix\nmfr                G\ntype            Cold\n             ...    \nprotein            1\nweight           1.0\nrating     27.753301\nName: 73, Length: 7, dtype: object\n\n\n\n\ncereal.loc[cereal['mfr'] == 'Q']\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nweight\nrating\n\n\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n3\n1.0\n33.983679\n\n\n10\nCap'n'Crunch\nQ\nCold\n120\n1\n1.0\n18.042851\n\n\n35\nHoney Graham Ohs\nQ\nCold\n120\n1\n1.0\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n55\nPuffed Wheat\nQ\nCold\n50\n2\n0.5\n63.005645\n\n\n56\nQuaker Oat Squares\nQ\nCold\n100\n4\n1.0\n49.511874\n\n\n57\nQuaker Oatmeal\nQ\nHot\n100\n5\n1.0\n50.828392\n\n\n\n\n8 rows × 7 columns\n\n\n\n\nRemember our friend .loc[]? We are going to get reacquainted with it.\nSimilarly, to how .loc[] can select and return specified columns and rows of the dataframe, it can filter on conditions too.\nWe are used to seeing code involving .loc[] like this.\nBut now we’ll get introduced to a new side of it when we use it to filter as well.\nWe can use the same syntax, cereal['mfr'] == 'Q', we normally would when filtering. However, this time we wrap the whole thing within .loc[]."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#replacing-with-inequalities",
    "href": "modules/module2/slides/module2_20.html#replacing-with-inequalities",
    "title": "Conditional value replacement and assignment",
    "section": "Replacing with inequalities",
    "text": "Replacing with inequalities\n\ncereal.loc[cereal['protein'] &gt;= 3, 'protein_level']  = 'high' \n\n\n\ncereal.loc[cereal['protein'] &lt; 3, 'protein_level']  = 'low' \n\n\nThis syntax using .loc[] also works for inequality conditions.\nIf we are replacing numerical values with characters or words (or vice versa) we need to assign our desired values to a new column and not the existing one, because the column type will be different.\nPerhaps we want just two categories for protein levels - “high” and “low”.\nAny cereal above 3 grams of protein will be considered a “high” protein level and anything less, as a “low” protein level.\nLet’s assign the “high” protein values first.\nThe only difference here from earlier is we now use an inequality for our condition and we designate a new column name instead of an existing one.\nLet’s save the values in a column named protein_level.\nNext by the “low” values."
  },
  {
    "objectID": "modules/module2/slides/module2_20.html#creating-new-columns",
    "href": "modules/module2/slides/module2_20.html#creating-new-columns",
    "title": "Conditional value replacement and assignment",
    "section": "Creating new columns",
    "text": "Creating new columns\n\noz_to_g = 28.3495\ncereal['weight_g'] = cereal['weight'] * oz_to_g\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nweight\nrating\nprotein_level\nweight_g\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n1.0\n68.402973\nhigh\n28.3495\n\n\n1\n100% Natural Bran\nQuaker\nCold\n120\n...\n1.0\n33.983679\nhigh\n28.3495\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n1.0\n59.425505\nhigh\n28.3495\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1.0\n49.787445\nhigh\n28.3495\n\n\n75\nWheaties\nG\nCold\n100\n...\n1.0\n51.592193\nhigh\n28.3495\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1.0\n36.187559\nlow\n28.3495\n\n\n\n\n77 rows × 9 columns\n\n\n\n\nYou may have noticed we did not use .assign() to create our new column.\nThat’s because as we mentioned earlier, when we use .assign() it creates a brand new dataframe.\nWhen we are replacing values, we don’t want a new dataframe and instead, we just want to alter the current values in the existing dataframe.\nWhen we are not doing conditional value replacement, we could create new columns with a similar syntax. Take the example of converting the weight from ounces into grams and making a new column named weight_g.\nThis code edits the existing dataframe cereal instead of creating a new one.\nWe prefer to use .assign() where possible as it can help avoid unexpected errors and performance issues."
  },
  {
    "objectID": "modules/module2/slides/module2_13.html#column-creation",
    "href": "modules/module2/slides/module2_13.html#column-creation",
    "title": "Column Arithmetic and Creation",
    "section": "Column Creation",
    "text": "Column Creation\n\noz_to_g = 28.3495\ncereal['weight'] * oz_to_g\n\n0     28.3495\n1     28.3495\n2     28.3495\n       ...   \n74    28.3495\n75    28.3495\n76    28.3495\nName: weight, Length: 77, dtype: float64\n\n\n\n\ncereal = cereal.assign(weight_g=cereal['weight'] * oz_to_g)\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\nfat\n...\nweight\ncups\nrating\nweight_g\n\n\n\n\n0\n100% Bran\nN\nCold\n1\n...\n1.0\n0.33\n68.402973\n28.3495\n\n\n1\n100% Natural Bran\nQ\nCold\n5\n...\n1.0\n1.00\n33.983679\n28.3495\n\n\n2\nAll-Bran\nK\nCold\n1\n...\n1.0\n0.33\n59.425505\n28.3495\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n0\n...\n1.0\n0.50\n93.704912\n28.3495\n\n\n4\nAlmond Delight\nR\nCold\n2\n...\n1.0\n0.75\n34.384843\n28.3495\n\n\n\n\n5 rows × 9 columns\n\n\n\n\nIn the next scenario, we have decided that our weight column should show the weight of each cereal in grams instead of ounces.\nWe are going to save the conversion factor of grams to ounces in an object named oz_to_g.\nLet’s start with just the operation for this.\nNext, we combine our operation with the implementation of adding it as a new column to the dataframe. The verb .assign() allows us to specify a column name to our result using an equal sign =.\nWe are going to name our new column weight_g (for grams).\nJust like we did earlier in the module, we need to save the dataframe to an object when making changes involving columns. This will permanently save the column weight_g to the dataframe cereal."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#arguments",
    "href": "modules/module2/slides/module2_06.html#arguments",
    "title": "Reading arguments",
    "section": "Arguments",
    "text": "Arguments\nHere, we are going to introduce different arguments for pd.read_csv() and pd.read_excel():\n\nindex_col\nheader\nnrows\nusecols\n\nIf you wish to know more, you can find the documentation at the following links:\n\npd.read_csv()\npd.read_excel()\n\n\nWhen we load in our data we use different arguments to make sure it’s organized how we want it.\ndelimiter is an argument we have already discussed that instructs on how to separate each value in the data.\nThis is only the tip of the iceberg.\nThere are many others that are helpful when reading in our data, such as index_col, header, nrows, and usecols."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#index_col",
    "href": "modules/module2/slides/module2_06.html#index_col",
    "title": "Reading arguments",
    "section": "index_col",
    "text": "index_col\n\ndf = pd.read_csv('data/cereal.csv', index_col=\"name\")\ndf.head(3)\n\n\n\n\n\n\n\n\nmfr\ntype\ncalories\nprotein\n...\nshelf\nweight\ncups\nrating\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n100% Bran\nN\nCold\n70\n4\n...\n3\n1.0\n0.33\n68.402973\n\n\n100% Natural Bran\nQ\nCold\n120\n3\n...\n3\n1.0\n1.00\n33.983679\n\n\nAll-Bran\nK\nCold\n70\n4\n...\n3\n1.0\n0.33\n59.425505\n\n\n\n\n3 rows × 15 columns\n\n\n\n\n\ndf = pd.read_csv('data/cereal.csv', index_col=0)\ndf.head(3)\n\n\n\n\n\n\n\n\nmfr\ntype\ncalories\nprotein\n...\nshelf\nweight\ncups\nrating\n\n\nname\n\n\n\n\n\n\n\n\n\n\n\n\n\n100% Bran\nN\nCold\n70\n4\n...\n3\n1.0\n0.33\n68.402973\n\n\n100% Natural Bran\nQ\nCold\n120\n3\n...\n3\n1.0\n1.00\n33.983679\n\n\nAll-Bran\nK\nCold\n70\n4\n...\n3\n1.0\n0.33\n59.425505\n\n\n\n\n3 rows × 15 columns\n\n\n\n\nindex_col is an argument that indicates which column will be acting as the index label.\nIn most of the cases we have encountered, we did not use this argument and instead relied on the pandas default, which is to use ascending integers for the index.\nWe can, however, specify a column in the data to become the index.\nIt’s in our best interest that the column we choose have unique values.\nFor our cereal.csv let’s specify the name column as our index.\nThe index_col argument also take in positions.\nThe name column in our data is in the 0th position so we can also specify the index like we show here with index_col=0."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#header",
    "href": "modules/module2/slides/module2_06.html#header",
    "title": "Reading arguments",
    "section": "header",
    "text": "header\n\n\nWe have been lucky up until now that all the data we have loaded in has been particularly straightforward.\nSometimes with data, there are a few lines of text explaining important points about the file.\nWe do not want to include this in our dataframe and therefore we need to specify exactly when our dataframe begins.\nThis is where header comes in.\nTake a look at candybars-h.csv as an example.\nIf we look at the data with a regular text editor, the data doesn’t start until the 3rd line which would be the equivalent of position 2 (since we begin counting from 0)."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#nrows",
    "href": "modules/module2/slides/module2_06.html#nrows",
    "title": "Reading arguments",
    "section": "nrows",
    "text": "nrows\n\ncandybars = pd.read_csv('data/candybars.csv', nrows=7)\ncandybars\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n4\nTwix\n58\n1\n0\n...\n0\n0\n1\nBoth\n\n\n5\nReeses Peanutbutter Cups\n43\n1\n1\n...\n0\n0\n1\nBoth\n\n\n6\n3 Musketeers\n54\n1\n0\n...\n0\n0\n0\nAmerica\n\n\n\n\n7 rows × 11 columns\n\n\n\n\nnrows is an argument in pd.read_csv() that is useful when you only want to load in part of the dataframe.\nPerhaps the file you have is large and you only want a sample of it.\nnrows will limit the number of rows that you read in.\nThis code loads in only the first 7 rows of our candybar dataset."
  },
  {
    "objectID": "modules/module2/slides/module2_06.html#usecols",
    "href": "modules/module2/slides/module2_06.html#usecols",
    "title": "Reading arguments",
    "section": "usecols",
    "text": "usecols\n\ncandybars = pd.read_csv('data/candybars.csv', usecols=[0, 1, 10])\ncandybars\n\n\n\n\n\n\n\n\nname\nweight\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\nCanada\n\n\n1\nButterfinger\n184\nAmerica\n\n\n2\nSkor\n39\nBoth\n\n\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\nAmerica\n\n\n23\nOh Henry\n51\nBoth\n\n\n24\nCookies and Cream\n43\nBoth\n\n\n\n\n25 rows × 3 columns\n\n\n\n\nSimilarly to how nrows specifies how many rows to read in, usecols selects which columns to load from the data.\nPerhaps the only columns relevant to our analysis are the columns name, weight and available_canada_america.\nWe can forgo the other columns when reading the data in.\nIn a similar way to selecting columns using .iloc[], we specify the desired column indices in square brackets."
  },
  {
    "objectID": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "href": "modules/module2/slides/module2_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDemonstrate how to rename columns of a dataframe using .rename().\nCreate new or columns in a dataframe using .assign() notation.\nDrop columns in a dataframe using .drop()\nUse df[] notation to filter rows of a dataframe.\nCalculate summary statistics on grouped objects using .groupby() and .agg().\nExplain when chaining is appropriate.\nDemonstrate chaining over multiple lines and verbs."
  },
  {
    "objectID": "modules/module2/module2-30-plotting_a_groupby_object.html",
    "href": "modules/module2/module2-30-plotting_a_groupby_object.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s attempt to answer the question “Which pokemon type has the highest mean attack score?” by making a bar chart from a groupby object.\nTasks:\nCreate a plot by chaining the following actions.\n\nMake a groupby object on the column type and name it pokemon_type.\nUse .mean() on the new groupby object.\nreset the index so it no longer has type as index column.\nUse reset_index() to make type a column again.\nSort the pokemon mean attack values in descending order using sort argument.\nName the y-axis “Mean attack scores”.\nName the object attack_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .loc[:, 'attack']?\nWhile sorting, are you using the argument ascending=False?\nAre you resetting the index?\nAre you giving your plot a title??\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-30-plotting_a_groupby_object.html#plotting-a-groupby-object",
    "href": "modules/module2/module2-30-plotting_a_groupby_object.html#plotting-a-groupby-object",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s attempt to answer the question “Which pokemon type has the highest mean attack score?” by making a bar chart from a groupby object.\nTasks:\nCreate a plot by chaining the following actions.\n\nMake a groupby object on the column type and name it pokemon_type.\nUse .mean() on the new groupby object.\nreset the index so it no longer has type as index column.\nUse reset_index() to make type a column again.\nSort the pokemon mean attack values in descending order using sort argument.\nName the y-axis “Mean attack scores”.\nName the object attack_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .loc[:, 'attack']?\nWhile sorting, are you using the argument ascending=False?\nAre you resetting the index?\nAre you giving your plot a title??\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html",
    "href": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Remember the fruit salad dataframe named fruit_salad? Refer to it for the next two questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9    \n\n\n\n\nConsider this output made from the fruit_salad dataframe:\n\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nFind the mean speed of each column for every Pokemon types using .mean() and .groupby().\nTasks:\n\nMake a groupby object on the column type.\nFind the mean value of each column for each pokemon type using .mean() and save the resulting dataframe as type_means.\nObtain the mean speed of each pokemon type from the dataframe type_means by using .loc[].\nSave it in an object named mean_speed.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .mean() on the pokemon_type dataframe?\nAre you naming the mean speed objects correctly?\nAre you obtaining the mean values using .loc[]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice using .agg()\nTasks:\n\nMake a groupby object on the column legendary.\nFind the maximum and minimum value of each column for each legendary groups using .agg() and save the resulting dataframe as legendary_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named legendary?\nAre you using .agg() on the legendary_stats dataframe?\nAre you naming the objects correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#fruit-salad-grouping-and-aggregating",
    "href": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#fruit-salad-grouping-and-aggregating",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Remember the fruit salad dataframe named fruit_salad? Refer to it for the next two questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9    \n\n\n\n\nConsider this output made from the fruit_salad dataframe:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#coding-questions",
    "href": "modules/module2/module2-26-fruit_salad_grouping_and_aggregating.html#coding-questions",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nFind the mean speed of each column for every Pokemon types using .mean() and .groupby().\nTasks:\n\nMake a groupby object on the column type.\nFind the mean value of each column for each pokemon type using .mean() and save the resulting dataframe as type_means.\nObtain the mean speed of each pokemon type from the dataframe type_means by using .loc[].\nSave it in an object named mean_speed.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named type?\nAre you using .mean() on the pokemon_type dataframe?\nAre you naming the mean speed objects correctly?\nAre you obtaining the mean values using .loc[]?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice using .agg()\nTasks:\n\nMake a groupby object on the column legendary.\nFind the maximum and minimum value of each column for each legendary groups using .agg() and save the resulting dataframe as legendary_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you grouping by the column named legendary?\nAre you using .agg() on the legendary_stats dataframe?\nAre you naming the objects correctly?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-23-chaining_true_false.html",
    "href": "modules/module2/module2-23-chaining_true_false.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake a plot using our Pokemon dataset by chaining actions sequentially.\nTasks:\n\nChain the following methods in the order specified.\nFirst, rename the column capture_rt to capture_rate.\nThen, create a new column named AD_total by adding the attack and defense columns from the pokemon dataset.\nSave this in a dataframe object called plot_df.\nFinally use .mark_circle() to plot AD_total on the x-axis and capture_rate on the y-axis.\nName this plot pokemon_plot.\nUse a new line for each method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using the chaning commands in the correct order?\nAre you using the .mark_circle() function?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-23-chaining_true_false.html#practice-chaining",
    "href": "modules/module2/module2-23-chaining_true_false.html#practice-chaining",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake a plot using our Pokemon dataset by chaining actions sequentially.\nTasks:\n\nChain the following methods in the order specified.\nFirst, rename the column capture_rt to capture_rate.\nThen, create a new column named AD_total by adding the attack and defense columns from the pokemon dataset.\nSave this in a dataframe object called plot_df.\nFinally use .mark_circle() to plot AD_total on the x-axis and capture_rate on the y-axis.\nName this plot pokemon_plot.\nUse a new line for each method.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using the chaning commands in the correct order?\nAre you using the .mark_circle() function?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-21-practice_replacing_values.html",
    "href": "modules/module2/module2-21-practice_replacing_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s make a new column by assigning each pokemon base score as either “strong” or “weak”.\nTasks:\n\nCreate a new column in the dataframe named base_score by assigning values 500 or greater from the column total_bs as ‘strong’ pokemon and values less than 500 as ‘weak’ pokemon.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming the new column named base_score?\nAre you using .loc[df['total_bs'] &gt;= 500, 'base_score'] and assigning it to the correct value?\nAre you using single equality signs for the assignment?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the new column base_score we made above, make a bar graph showing the frequency of the strong and weak pokemon.\nTasks:\n\nCreate an object using single brackets to obtain the column base_score and name it bs_column.\nPlot the object bs_column using .mark_bar() and save this graph as score_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using single square brackets or obtain the column base_score?\nAre you using count() to count the occurences of the base scores?\nAre you saving the objects with the correct names?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-21-practice_replacing_values.html#practice-replacing-values",
    "href": "modules/module2/module2-21-practice_replacing_values.html#practice-replacing-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s make a new column by assigning each pokemon base score as either “strong” or “weak”.\nTasks:\n\nCreate a new column in the dataframe named base_score by assigning values 500 or greater from the column total_bs as ‘strong’ pokemon and values less than 500 as ‘weak’ pokemon.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming the new column named base_score?\nAre you using .loc[df['total_bs'] &gt;= 500, 'base_score'] and assigning it to the correct value?\nAre you using single equality signs for the assignment?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing the new column base_score we made above, make a bar graph showing the frequency of the strong and weak pokemon.\nTasks:\n\nCreate an object using single brackets to obtain the column base_score and name it bs_column.\nPlot the object bs_column using .mark_bar() and save this graph as score_plot.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using single square brackets or obtain the column base_score?\nAre you using count() to count the occurences of the base scores?\nAre you saving the objects with the correct names?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-17-filtering_question.html",
    "href": "modules/module2/module2-17-filtering_question.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Question 1\nIf the output of\ndf['location'] == 'Canada'\nis\n[True, False, False, True]\n\nWhat would be the output of\n~(df['location'] == 'Canada')\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nTry to filter the dataframe to obtain only a certain Pokemon type using single condition filtering.\nTasks:\n\nCreate a new dataframe named fire_pokemon containing only the rows of type “fire”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pokemon['type'] == 'fire' as your condition?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s find all the pokemon that meet multiple conditions.\nTasks:\n\nFilter the dataframe for the pokemon that have attack and defense values both greater than 100.\nSave this dataframe as an object named mighty_pokemon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you separating your conditions with brackets?\nAre you using the symbol& to get the intersect?\nAre you using pokemon['defense'] &gt; 100 and pokemon['attack'] &gt; 100 as your conditions?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-17-filtering_question.html#filtering-question",
    "href": "modules/module2/module2-17-filtering_question.html#filtering-question",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Question 1\nIf the output of\ndf['location'] == 'Canada'\nis\n[True, False, False, True]\n\nWhat would be the output of\n~(df['location'] == 'Canada')",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-17-filtering_question.html#coding-questiongs",
    "href": "modules/module2/module2-17-filtering_question.html#coding-questiongs",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nTry to filter the dataframe to obtain only a certain Pokemon type using single condition filtering.\nTasks:\n\nCreate a new dataframe named fire_pokemon containing only the rows of type “fire”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pokemon['type'] == 'fire' as your condition?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s find all the pokemon that meet multiple conditions.\nTasks:\n\nFilter the dataframe for the pokemon that have attack and defense values both greater than 100.\nSave this dataframe as an object named mighty_pokemon.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you separating your conditions with brackets?\nAre you using the symbol& to get the intersect?\nAre you using pokemon['defense'] &gt; 100 and pokemon['attack'] &gt; 100 as your conditions?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-14-column_arithmetic_questions.html",
    "href": "modules/module2/module2-14-column_arithmetic_questions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Question 1\nWhat is the result if we multiply 2 columns together using the syntax\ndf[['Column_A']] * df[['Column_B']]\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nFor this exercise, we are going to create and drop some columns from our dataframe.\nTasks:\n\nCreate a new column named total_special that is the sum of column sp_attack and sp_defense.\nSave it, overwriting the dataframe named pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.assign()?\nAre you saving the new dataframes as the correct names?\nFor the new column does total_special  = pokemon['sp_attack'] + pokemon['sp_defense']?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-14-column_arithmetic_questions.html#column-arithmetic-questions",
    "href": "modules/module2/module2-14-column_arithmetic_questions.html#column-arithmetic-questions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Question 1\nWhat is the result if we multiply 2 columns together using the syntax\ndf[['Column_A']] * df[['Column_B']]",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-14-column_arithmetic_questions.html#creating-a-new-column",
    "href": "modules/module2/module2-14-column_arithmetic_questions.html#creating-a-new-column",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nFor this exercise, we are going to create and drop some columns from our dataframe.\nTasks:\n\nCreate a new column named total_special that is the sum of column sp_attack and sp_defense.\nSave it, overwriting the dataframe named pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.assign()?\nAre you saving the new dataframes as the correct names?\nFor the new column does total_special  = pokemon['sp_attack'] + pokemon['sp_defense']?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-10-column_editing_questions.html",
    "href": "modules/module2/module2-10-column_editing_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad dataframe once again.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\nLet’s say we run the following code:\nfruit_salad.drop(columns = ['colour', 'shape', 'sweetness'])\nfruit_salad = fruit_salad.rename(columns={'location':'country',\n                                          'weight':'weight_g'})\nUse the dataframe and code above to answer the next 2 questions.\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\nLet’s rename one of the columns in our pokemon.csv data.\nTasks:\n\nRename the column sp_attack to special_a and sp_defense to special_d using .rename() only once.\nSave the new dataframe as pokemon_special.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.rename()?\nAre you saving the new dataframe as the correct name?\nAre you using the argument columns={'sp_attack':'special_a', 'sp_defense':'special_d'}?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome of the columns in pokemon.csv we have deemed not useful. Let’s get rid of them!\nTasks:\n\nDrop the columns deck_no, capture_rt, and legendary.\nMake sure to overwrite the new dataframe to object pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.drop()?\nAre you overwriting the new dataframe to object pokemon?\nAre you using square brackets in the argument columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-10-column_editing_questions.html#column-editing-questions",
    "href": "modules/module2/module2-10-column_editing_questions.html#column-editing-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad dataframe once again.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\nLet’s say we run the following code:\nfruit_salad.drop(columns = ['colour', 'shape', 'sweetness'])\nfruit_salad = fruit_salad.rename(columns={'location':'country',\n                                          'weight':'weight_g'})\nUse the dataframe and code above to answer the next 2 questions.",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-10-column_editing_questions.html#coding-questions",
    "href": "modules/module2/module2-10-column_editing_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\nLet’s rename one of the columns in our pokemon.csv data.\nTasks:\n\nRename the column sp_attack to special_a and sp_defense to special_d using .rename() only once.\nSave the new dataframe as pokemon_special.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.rename()?\nAre you saving the new dataframe as the correct name?\nAre you using the argument columns={'sp_attack':'special_a', 'sp_defense':'special_d'}?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome of the columns in pokemon.csv we have deemed not useful. Let’s get rid of them!\nTasks:\n\nDrop the columns deck_no, capture_rt, and legendary.\nMake sure to overwrite the new dataframe to object pokemon.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pokemon.drop()?\nAre you overwriting the new dataframe to object pokemon?\nAre you using square brackets in the argument columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-07-name_that_argument.html",
    "href": "modules/module2/module2-07-name_that_argument.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLoad in the data using the most suitable arguments.\nTasks:\n\nRead in the first 100 rows and columns name, total_bs and type from the file pokemon.csv, which is located in the data directory.\nSave the resulting dataframe as pokemon_sample.\nDisplay pokemon_sample.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokeman_df?\nAre you using pd.read_csv()?\nAre you including the full path through the data/ folder when calling the file name?\nDo you the argument nrows=100?\nAre you loading in the specified column index labels?\nPerhaps you are using index_col=0 when it was not required?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-07-name_that_argument.html#using-arguments-when-reading-in-files",
    "href": "modules/module2/module2-07-name_that_argument.html#using-arguments-when-reading-in-files",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLoad in the data using the most suitable arguments.\nTasks:\n\nRead in the first 100 rows and columns name, total_bs and type from the file pokemon.csv, which is located in the data directory.\nSave the resulting dataframe as pokemon_sample.\nDisplay pokemon_sample.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokeman_df?\nAre you using pd.read_csv()?\nAre you including the full path through the data/ folder when calling the file name?\nDo you the argument nrows=100?\nAre you loading in the specified column index labels?\nPerhaps you are using index_col=0 when it was not required?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-02-delimiter.html",
    "href": "modules/module2/module2-02-delimiter.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try reading in some data from a URL using pd.read_csv().\nTasks:\n\nUse pd.read_csv() to read in the data from this url using the name column as the index.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokemon_df?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in a .txt file.\nTasks:\n\nRead in the data from a text file name pokemon-text.txt located in the data folder.\nSave the resulting dataframe as pokemon_df.\nIt’s a good idea to see what the delimiter is.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_csv()?\nDid you check to see what the delimiter is.\nAre you including the full path through the data/ folder when calling the file name?\nCheck that your delimiter argument is correct.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in an Excel file.\nTasks:\n\nRead in the data from the sheet named pokemon from the Excel file pokemon.xlsx located in the data folder.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_excel()?\nCheck that you are using sheet_name=\"pokemon\".\nAre you including the full path through the data/ folder when calling the file name?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-02-delimiter.html#coding-questions",
    "href": "modules/module2/module2-02-delimiter.html#coding-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try reading in some data from a URL using pd.read_csv().\nTasks:\n\nUse pd.read_csv() to read in the data from this url using the name column as the index.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as pokemon_df?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in a .txt file.\nTasks:\n\nRead in the data from a text file name pokemon-text.txt located in the data folder.\nSave the resulting dataframe as pokemon_df.\nIt’s a good idea to see what the delimiter is.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_csv()?\nDid you check to see what the delimiter is.\nAre you including the full path through the data/ folder when calling the file name?\nCheck that your delimiter argument is correct.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try reading in an Excel file.\nTasks:\n\nRead in the data from the sheet named pokemon from the Excel file pokemon.xlsx located in the data folder.\nSave the resulting dataframe as pokemon_df.\nDisplay the first 10 rows of pokemon_df.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as the correct object names?\nAre you using pd.read_excel()?\nCheck that you are using sheet_name=\"pokemon\".\nAre you including the full path through the data/ folder when calling the file name?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module2/module2-00-module_learning_outcomes.html",
    "href": "modules/module2/module2-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "href": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "title": "Summary Statistics",
    "section": "Numerical and Categorical Columns",
    "text": "Numerical and Categorical Columns\nCategorical data\nConsists of qualitative observations such as characteristics - things generally containing words.\nExamples\n\nColours\nNames\n\n\nNumerical data\nThese data are usually expressed with numbers.\nExamples\n\nMeasurements\nQuantities\n\n\nBefore we go further, let’s quickly discuss the 2 different types of data.\nCategorical data consists of qualitative observations such as characteristics - things generally containing names or words. Examples would be colours or names of things.\nNumerical data are usually expressed with numbers such as measurements or quantities.\nOur columns in our dataframe are considered one of the two of these."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#pandas-describe",
    "href": "modules/module1/slides/module1_26.html#pandas-describe",
    "title": "Summary Statistics",
    "section": "Pandas describe()",
    "text": "Pandas describe()\n\ncereal.describe()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\n\n\ncount\n77.000000\n77.000000\n77.000000\n77.000000\n...\n77.000000\n77.000000\n77.000000\n77.000000\n\n\nmean\n106.883117\n2.545455\n1.012987\n159.675325\n...\n2.207792\n1.029610\n0.821039\n42.665705\n\n\nstd\n19.484119\n1.094790\n1.006473\n83.832295\n...\n0.832524\n0.150477\n0.232716\n14.047289\n\n\nmin\n50.000000\n1.000000\n0.000000\n0.000000\n...\n1.000000\n0.500000\n0.250000\n18.042851\n\n\n25%\n100.000000\n2.000000\n0.000000\n130.000000\n...\n1.000000\n1.000000\n0.670000\n33.174094\n\n\n50%\n110.000000\n3.000000\n1.000000\n180.000000\n...\n2.000000\n1.000000\n0.750000\n40.400208\n\n\n75%\n110.000000\n3.000000\n2.000000\n210.000000\n...\n3.000000\n1.000000\n1.000000\n50.828392\n\n\nmax\n160.000000\n6.000000\n5.000000\n320.000000\n...\n3.000000\n1.500000\n1.500000\n93.704912\n\n\n\n\n8 rows × 13 columns\n\n\n\n\nPandas has a lot up its sleeve but one of the most useful methods is called .describe() and it does exactly that. it describes our data.\nLet’s try it out on our cereal dataset.\nBy default df.describe() only shows numerical columns."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "href": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Slicing Dataframe",
    "text": "Slicing Dataframe\n\ncereal = pd.read_csv('data/cereal.csv')\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nUp until point, we have been manipulating our dataframe with column and row labels using .loc[].\nSlicing can also be done by the location position of each row with .iloc[].\n.iloc[] is very similar to .loc[], however, the “i” in iloc refers to the index integer position.\nWe are going to return to our cereal dataset and take a look at the first 10 rows.\nLet’s say we want the rows from All-Bran to Apple Cinnamon Cheerios, but we want to slice based on their position instead of their label.\nUsing Python’s counting method of starting at zero, we conclude that All-Bran to be at position to 2.\nWe get Apple Cinnamon Cheerios position to be 5 in the same way.\nWe are lucky with this dataframe because our index labels match the position of the rows, and this makes things a little bit simpler."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "href": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Selecting with .iloc[]",
    "text": "Selecting with .iloc[]\n\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\n\n\n\n\n\n\nRow\nRow Position\n\n\n\n\nAlmond Delight\nPosition 4\n\n\nBasic 4\nPosition 7\n\n\nApple Jacks\nPosition 6\n\n\n\n\n\n\n\n\n\n\n\n\nColumns\nColumn Position\n\n\n\n\nname\nPosition 0\n\n\ncalories\nPosition 3\n\n\nfat\nPosition 5\n\n\ntype\nPosition 2\n\n\n\n\n\n\n\n\nSelecting using .iloc[] is done identically to .loc[], however, the items within each set of square brackets MUST be integers, and not in quotation marks.\nLet’s say we want the rows Almond Delight, Basic 4 and Apple Jacks with the columns name, calories, fat and type and in that specific order."
  },
  {
    "objectID": "modules/module1/slides/module1_11.html#so-far",
    "href": "modules/module1/slides/module1_11.html#so-far",
    "title": "Slicing Only Columns Using .loc[]",
    "section": "So Far",
    "text": "So Far\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\n\ncereal.loc['row name start':'row name end', 'column name start':'column name end']\n\nIf we aren’t slicing any columns, but we are slicing rows we can shorten that to\n\ndf.loc['row name start':'row name end']\n\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify we want all the row first with just a colon : followed by interval of the columns:\n\ndf.loc[:, 'column name start':'column name end']\n\nWe can read : as “to”.\nIf the indices are labeled with numbers, we do not need “quotations” when calling them. This is only when the labels are using letters.\n\n\nLet’s talk about what we have covered so far.\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\nIf we are not slicing any columns, but we are slicing rows we only need to specify the row labels.\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify rows first and therefore we would need to make it clear with a colon first that we are slicing all the rows followed by the column labels.\nWe can read : as “to”.\nAnd finally, if the row index is labeled with numbers, we do not need “quotations” when slicing."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#importing-pandas",
    "href": "modules/module1/slides/module1_03.html#importing-pandas",
    "title": "What is Pandas?",
    "section": "Importing pandas",
    "text": "Importing pandas\n\nimport pandas as pd\n\n\nTo analyze dataframes and load these csv files, we need to make sure that we bring in the pandas library into Python.\nBefore we start writing any valuable code for loading data and doing data analysis we need to import it with the following code."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#reading-in-data",
    "href": "modules/module1/slides/module1_03.html#reading-in-data",
    "title": "What is Pandas?",
    "section": "Reading in Data",
    "text": "Reading in Data\n\ncandy = pd.read_csv('data/candybars.csv')\n\n\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\nBoth\n\n\n\n\n25 rows × 6 columns\n\n\n\n\nNext we can bring in our data named candybars which is stored as a .csv file.\nLet’s break this up:\n\npd is the short form for pandas, which we are using to manipulate our dataframe.\n\nread_csv() is the tool that does the job and, in this case, it is reading in the csv file named candybars.csv.\n\ncandy is The dataframe is now saved as an object called candy.\n\nThe dataframe is stored in an object named candy and we can inspect in by “calling” the object name.\nIn these slides we can differentiate between the code that we typed in with a light grey background and it’s output which has a dark grey background.\nFrom this dataframe, we can see that there are 25 different candy bars and 6 columns."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "href": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "title": "What is Pandas?",
    "section": "Functions/Methods and Attributes",
    "text": "Functions/Methods and Attributes\n\nAttributes\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\n\nFunctions\nIn the example of pd.read_csv(), this function does the action of reading in our data.\n\nSomething you may have noticed is that when we use pd.read_csv() we put our instructions within the parentheses, whereas, when we use .shape or .head() the object that we are operating on comes before our desired command.\nIn Python, we use functions, methods and attributes. These are special words in Python that take instructions (we call these arguments) and do something.\nAttributes can be distinguished from methods and functions as they do not have parentheses.\nThey can be thought of as nouns or adjectives that describe an object.\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\nFunctions and methods have parentheses.\nThey can be thought of as verbs that complete an action.\nIn the example of pd.read_csv(), this function does the action of reading in our data.\nThis is going to be discussed in more detail later in the course but now, simply be aware of the way we write the different instructions."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#comments",
    "href": "modules/module1/slides/module1_03.html#comments",
    "title": "What is Pandas?",
    "section": "Comments",
    "text": "Comments\n\n# This line does not execute anything. \n\n\n\ncandy.shape  # This will output the shape of the dataframe\n\n\nWhile we write code, it’s often useful to annotate it or include information for humans that we do not want to executed.\nThe easiest way to do this is with a hash (#) symbol. This creates a single line comment and prevents anything written after it from being executed by Python.\nWe use comments frequently in the exercises to help you understand what to do and what our intentions are.\nIt’s good practice to use them to explain our code so if we or someone else wants to read it at a later date, it’s easier to understand."
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\n\nLoad the pandas library into Python.\n\nDemonstrate indexing and slicing with .loc[] and .iloc[].\n\nDemonstrate Selecting columns of a dataframe using df[] notation.\n\nObtain values from a dataframe using .loc[].\n\nSort a dataframe using .sort_values().\n\nCreate simple summary statistics using .describe().\n\nConstruct simple visualizations using Altair.\n\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html",
    "href": "modules/module1/module1-32-practicing_bar_charts.html",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nYou are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOk, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "title": "12.1. Exercises",
    "section": "",
    "text": "You are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Ok, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html",
    "href": "modules/module1/module1-25-practice_sorting.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "href": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html",
    "href": "modules/module1/module1-19-practicing_selecting.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "href": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html",
    "href": "modules/module1/module1-17-practicing_selecting_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "href": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html",
    "href": "modules/module1/module1-12-slicing_columns_only.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "href": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html",
    "href": "modules/module1/module1-04-definitions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html#coding-questions",
    "href": "modules/module1/module1-04-definitions.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module_learning_outcomes.html",
    "href": "modules/module1/module1-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Programming in Python for Data Science!",
    "section": "",
    "text": "Welcome to Programming in Python for Data Science!\nThis course is part of the Key Capabilities for Data Science program and will teach you how to conduct data analysis in Python. During the course, you will work with powerful Python packages made for data-science, including Pandas for processing tabular data, Altair for data visualization and NumPy for working with numerical data types.\nYou will also learn about iteration, flow control, and the data types relevant to data exploration and analysis. You will leave this course capable of processing raw data into a format suitable for analysis, writing your own analysis functions, and deriving data-driven insights via the creation of interactive visualizations and summary tables.\nCourse prerequisites: None",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "0. Welcome!"
    ]
  },
  {
    "objectID": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "href": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "title": "1. Programming in Python for Data Science",
    "section": "",
    "text": "1. Programming in Python for Data Science\n\nVideoSlides",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "1. Programming in Python for Data Science"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\n\nDefine tidy data and explain why it is an optimal format for data analysis.\nTransform data into the tidy data format using pandas.\nDemonstrate fundamental programming concepts such as loops and conditionals.\nUnderstand the key data structures in Python.\nRead data into Python data from vanilla (e.g., .csv) and non-standard plain text files, as well as common spreadsheet file types (e.g., .xls).\nConstruct simple plots using Altair\nManipulate a single data table by:\n7.1 Filtering rows based on a criterion or combination of criteria.\n7.2 Selecting variables.\n7.3 Creating new variables and modifying pre-existing ones.\n7.4 Rearranging the observations or variables by sorting.\n\nManage and manipulate data with dates and times, missing values and categorical variables as well as renaming dataframe columns.\nProduce human-readable code that incorporates best practices of programming and coding style."
  },
  {
    "objectID": "modules/module1/module1-01-introduction_to_dataframes.html",
    "href": "modules/module1/module1-01-introduction_to_dataframes.html",
    "title": "1. Introduction to Dataframes",
    "section": "",
    "text": "1. Introduction to Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "1. Introduction to Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-introduction_to_pandas.html",
    "href": "modules/module1/module1-03-introduction_to_pandas.html",
    "title": "2. Introduction to Pandas",
    "section": "",
    "text": "2. Introduction to Pandas\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "2. Introduction to Pandas"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "href": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "title": "3. Slicing with Pandas Using .loc[]",
    "section": "",
    "text": "3. Slicing with Pandas Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "3. Slicing with Pandas Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "href": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "title": "4. Slicing Columns Using .loc[]",
    "section": "",
    "text": "4. Slicing Columns Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "4. Slicing Columns Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-13-selecting_using_.loc[].html",
    "href": "modules/module1/module1-13-selecting_using_.loc[].html",
    "title": "5. Selecting Using .loc[]",
    "section": "",
    "text": "5. Selecting Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "5. Selecting Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "href": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "title": "6. Obtaining Dataframe Values",
    "section": "",
    "text": "6. Obtaining Dataframe Values\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "6. Obtaining Dataframe Values"
    ]
  },
  {
    "objectID": "modules/module1/module1-18-selecting_a_single_column.html",
    "href": "modules/module1/module1-18-selecting_a_single_column.html",
    "title": "7. Selecting a Single Column",
    "section": "",
    "text": "7. Selecting a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "7. Selecting a Single Column"
    ]
  },
  {
    "objectID": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "href": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "title": "8. Slicing and Selecting Using df.iloc[]",
    "section": "",
    "text": "8. Slicing and Selecting Using df.iloc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "8. Slicing and Selecting Using df.iloc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-24-sorting_dataframes.html",
    "href": "modules/module1/module1-24-sorting_dataframes.html",
    "title": "9. Sorting Dataframes",
    "section": "",
    "text": "9. Sorting Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "9. Sorting Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-26-summary_statistics.html",
    "href": "modules/module1/module1-26-summary_statistics.html",
    "title": "10. Summary Statistics",
    "section": "",
    "text": "10. Summary Statistics\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "10. Summary Statistics"
    ]
  },
  {
    "objectID": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "href": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "title": "11. Frequency Tables and Writing CSVs",
    "section": "",
    "text": "11. Frequency Tables and Writing CSVs\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "11. Frequency Tables and Writing CSVs"
    ]
  },
  {
    "objectID": "modules/module1/module1-31-quick_viz_with_altair.html",
    "href": "modules/module1/module1-31-quick_viz_with_altair.html",
    "title": "12. Quick Viz with Altair",
    "section": "",
    "text": "12. Quick Viz with Altair\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "12. Quick Viz with Altair"
    ]
  },
  {
    "objectID": "modules/module1/module1-34-what_did_we_just_learn.html",
    "href": "modules/module1/module1-34-what_did_we_just_learn.html",
    "title": "13. What Did We Just Learn?",
    "section": "",
    "text": "13. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "13. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "href": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "title": "What is a dataframe?",
    "section": "What is a dataframe?",
    "text": "What is a dataframe?\n\n\nOften, the first thing we need to do in data analysis is to load in data.\nIn this case, we will be using the programming language Python.\nWhen we bring spreadsheet-like data, into Python, it is generally shaped like a rectangle (think of Microsoft Excel tables for example) it is represented as what we call a dataframe object. It is very similar to a spreadsheet."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "href": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "title": "What is a dataframe?",
    "section": "What is a CSV file?",
    "text": "What is a CSV file?\n\n\n\nThe first kind of data we will learn how to load into Python as a dataframe is the spreadsheet-like comma-separated values format (.csv for short).\nThese files have names ending in .csv, and can be opened open and saved from common spreadsheetlike programs like Microsoft Excel and Google Sheets.\nFor example, we will be importing the .csv file you saw in the first slide named “candybars.csv”.\nIf we were to open this data in a plain text editor, we would be able to see each row on its own line, and each entry in the table separated by a comma."
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#cereal-data",
    "href": "modules/module1/slides/module1_07.html#cereal-data",
    "title": "Slicing with Pandas Using .loc[]",
    "section": "Cereal Data",
    "text": "Cereal Data\n\nimport pandas as pd\n  \ncereal = pd.read_csv('data/cereal.csv')\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\nAttribution:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported\n\nCongratulations on writing your first code!\nWe have read in our data, and we know the dimensions. Well, now what?\nLet’s go over how we would index, slice, and select certain columns or rows of our data.\nLet’s start by importing pandas and loading in a dataset named cereal.csv, and we will save it as cereal.\nWe can see all the columns and the first 5 rows of the dataframe using .head()\nLet’s say we only want certain rows, however, of the dataframe or certain columns.\nWe talked about how .head() will generate the first few rows of a dataframe (5 as default), but what if we wanted the rows from 5-10?\nThe first column of this dataframe is called the index.\nEach row has a label (the index) as well as a position. In this case, the index label of an observation is the same as it’s position.\nThis doesn’t always have to be the case. We can assign another column as the index; however, we will wait to discuss this in the next module."
  },
  {
    "objectID": "modules/module1/slides/module1_13.html#unordered-indexing",
    "href": "modules/module1/slides/module1_13.html#unordered-indexing",
    "title": "Selecting Using .loc[]",
    "section": "Unordered Indexing",
    "text": "Unordered Indexing\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1\n1.0\n0.67\n49.787445\n\n\n75\nWheaties\nG\nCold\n100\n...\n1\n1.0\n1.00\n51.592193\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1\n1.0\n0.75\n36.187559\n\n\n\n\n77 rows × 16 columns\n\n\n\n\nHere we have our trusty cereal dataframe.\nWhat would we do if we wanted to select columns and rows that don’t fall consecutively or if we wanted to rearrange them?"
  },
  {
    "objectID": "modules/module1/slides/module1_24.html#sorting",
    "href": "modules/module1/slides/module1_24.html#sorting",
    "title": "Sorting Dataframes",
    "section": "Sorting",
    "text": "Sorting\n\ncereal.sort_values(by='rating')\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nshelf\nweight\ncups\nrating\n\n\n\n\n10\nCap'n'Crunch\nQ\n120\n2\n1.0\n0.75\n18.042851\n\n\n12\nCinnamon Toast Crunch\nG\n120\n2\n1.0\n0.75\n19.823573\n\n\n35\nHoney Graham Ohs\nQ\n120\n2\n1.0\n1.00\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65\nShredded Wheat spoon size\nN\n90\n1\n1.0\n0.67\n72.801787\n\n\n64\nShredded Wheat 'n'Bran\nN\n90\n1\n1.0\n0.67\n74.472949\n\n\n3\nAll-Bran with Extra Fiber\nK\n50\n3\n1.0\n0.50\n93.704912\n\n\n\n\n77 rows × 7 columns\n\n\n\n\nWhen we read in our data, it is generally ordered in the same way it is stored.\nWe can easily sort the rows of a dataframe based on the values within a column.\nThe verb that we use for that is .sort_values().\nFor example, if we wanted to order the cereals based on rating, we could do so by using the argument by within the .sort_values() verb.\nThis allows us to see the cereals with lower ratings on the top."
  },
  {
    "objectID": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "href": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "title": "Frequency Tables and Writing CSVs",
    "section": "Saving a dataframe",
    "text": "Saving a dataframe\n\nmfr_freq.to_csv('data/mfr_frequency.csv', index=False)\n\n\nSometimes it is useful to save a new dataframe to a file like a csv file for future use by you or somebody else.\nWe can do this using a method called .to_csv().\nWe put our desired csv file name in quotations within the parentheses and follow it with the argument index=False so we don’t export our index column which is just a column of numbers."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#summary",
    "href": "modules/module1/slides/module1_34.html#summary",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\nLoad the pandas library into Python.\nDemonstrate indexing and slicing with .loc[] and .iloc[].\nDemonstrate Selecting columns of a dataframe using df[] notation.\nObtain values from a dataframe using .loc[].\nSort a dataframe using .sort_values().\nCreate simple summary statistics using .describe().\nConstruct simple visualizations using Altair.\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#assignment-instructions",
    "href": "modules/module1/slides/module1_34.html#assignment-instructions",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Assignment Instructions",
    "text": "Assignment Instructions\nThe assignment will concentrate not only on the learning objectives above but also\n\nNavigating a Jupyter Notebook\nUnderstanding cells\nCreating Markdown cells and coding cells"
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#attribution",
    "href": "modules/module1/slides/module1_34.html#attribution",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module2/module2-01-reading_in_different_file_types.html",
    "href": "modules/module2/module2-01-reading_in_different_file_types.html",
    "title": "1. Reading in Different File Types",
    "section": "",
    "text": "1. Reading in Different File Types\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "1. Reading in Different File Types"
    ]
  },
  {
    "objectID": "modules/module2/module2-06-arguments_for_reading_data.html",
    "href": "modules/module2/module2-06-arguments_for_reading_data.html",
    "title": "2. Arguments for Reading Data",
    "section": "",
    "text": "2. Arguments for Reading Data\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "2. Arguments for Reading Data"
    ]
  },
  {
    "objectID": "modules/module2/module2-09-column_renaming_and_dropping.html",
    "href": "modules/module2/module2-09-column_renaming_and_dropping.html",
    "title": "3. Column Renaming and Dropping",
    "section": "",
    "text": "3. Column Renaming and Dropping\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "3. Column Renaming and Dropping"
    ]
  },
  {
    "objectID": "modules/module2/module2-13-column_arithmetic_and_creation.html",
    "href": "modules/module2/module2-13-column_arithmetic_and_creation.html",
    "title": "4. Column Arithmetic and Creation",
    "section": "",
    "text": "4. Column Arithmetic and Creation\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "4. Column Arithmetic and Creation"
    ]
  },
  {
    "objectID": "modules/module2/module2-16-data_filtering.html",
    "href": "modules/module2/module2-16-data_filtering.html",
    "title": "5. Data Filtering",
    "section": "",
    "text": "5. Data Filtering\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "5. Data Filtering"
    ]
  },
  {
    "objectID": "modules/module2/module2-20-conditional_value_replacement.html",
    "href": "modules/module2/module2-20-conditional_value_replacement.html",
    "title": "6. Conditional Value Replacement",
    "section": "",
    "text": "6. Conditional Value Replacement\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "6. Conditional Value Replacement"
    ]
  },
  {
    "objectID": "modules/module2/module2-22-chaining_notation.html",
    "href": "modules/module2/module2-22-chaining_notation.html",
    "title": "7. Chaining Notation",
    "section": "",
    "text": "7. Chaining Notation\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "7. Chaining Notation"
    ]
  },
  {
    "objectID": "modules/module2/module2-25-grouping_and_aggregating.html",
    "href": "modules/module2/module2-25-grouping_and_aggregating.html",
    "title": "8. Grouping and Aggregating",
    "section": "",
    "text": "8. Grouping and Aggregating\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "8. Grouping and Aggregating"
    ]
  },
  {
    "objectID": "modules/module2/module2-29-plotting_with_altair.html",
    "href": "modules/module2/module2-29-plotting_with_altair.html",
    "title": "9. Plotting with Altair",
    "section": "",
    "text": "9. Plotting with Altair\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "9. Plotting with Altair"
    ]
  },
  {
    "objectID": "modules/module2/module2-31-what_did_we_just_learn.html",
    "href": "modules/module2/module2-31-what_did_we_just_learn.html",
    "title": "10. What Did We Just Learn?",
    "section": "",
    "text": "10. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M2. Not So Scary Wrangling (Table Manipulation and Chaining)**",
      "10. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-different-file-types",
    "href": "modules/module2/slides/module2_01.html#reading-in-different-file-types",
    "title": "Reading in Different File Types",
    "section": "Reading in Different File Types",
    "text": "Reading in Different File Types\npandas facilitates the loading of data from many different file types including:\n\nA URL\nA txt file\nAn xlsx file\n\n\nIn the last module, we learned how to read in a csv file but loading in data is not restricted to this file type.\nThere are several types such as:\n\nA URL: If the data is stored publicly on a webpage, pandas can read it directly in from the page address.\nA txt file: We saw what a plain text file looked like in the last module and it is generally a simple manner of storing data.\n\nAn xlsx file: This is a Microsoft Excel spreadsheet. This is different than a regular csv file as an Excel file can contain many different sheets and can be formatted uniquely and specifically for an individual’s needs.\n\nOf course, there are many other file types but we will focus on these for this course."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-from-a-url",
    "href": "modules/module2/slides/module2_01.html#reading-from-a-url",
    "title": "Reading in Different File Types",
    "section": "Reading from a URL",
    "text": "Reading from a URL\nhttps://raw.githubusercontent.com/UBC-MDS/MCL-DSCI-011-programming-in-python/master/data/candybars.csv.\n\n\n\ncandybars = pd.read_csv('https://raw.githubusercontent.com/UBC-MDS/MCL-DSCI-511-programming-in-python/master/data/candybars.csv')\ncandybars.head()\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n3\nSmarties\n45\n1\n0\n...\n0\n0\n1\nCanada\n\n\n4\nTwix\n58\n1\n0\n...\n0\n0\n1\nBoth\n\n\n\n\n5 rows × 11 columns\n\n\n\n\nIf the data is accessible publicly on a website, you can read in data directly from the webpage it is stored on. For example, this code and all the files that make up this course are all openly available and can be viewed online.\nThe candybar.csv file that we used in the last module, is stored at this URL.\nYou can see that it looks like a plain text file with each line being a row and each column value separated with a comma.\nThe code required to read in this URL looks like this.\nIt uses the same pd.read_csv() function we saw when reading in csv files locally."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-a-text-file",
    "href": "modules/module2/slides/module2_01.html#reading-in-a-text-file",
    "title": "Reading in Different File Types",
    "section": "Reading in a Text File",
    "text": "Reading in a Text File\n\ncandybars = pd.read_csv('data/candybars-text.txt')\ncandybars.head()\n\n\n\n\n\n\n\n\nname\\tweight\\tchocolate\\tpeanuts\\tcaramel\\tnougat\\tcookie_wafer_rice\\tcoconut\\twhite_chocolate\\tmulti\\tavailable_canada_america\n\n\n\n\n0\nCoffee Crisp\\t50\\t1\\t0\\t0\\t0\\t1\\t0\\t0\\t0\\tCanada\n\n\n1\nButterfinger\\t184\\t1\\t1\\t1\\t0\\t0\\t0\\t0\\t0\\tAme...\n\n\n2\nSkor\\t39\\t1\\t0\\t1\\t0\\t0\\t0\\t0\\t0\\tBoth\n\n\n3\nSmarties\\t45\\t1\\t0\\t0\\t0\\t0\\t0\\t0\\t1\\tCanada\n\n\n4\nTwix\\t58\\t1\\t0\\t1\\t0\\t1\\t0\\t0\\t1\\tBoth\n\n\n\n\n\n\n\n\n\ncandybars = pd.read_csv('data/candybars-text.txt', delimiter='\\t')\ncandybars.head()\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n3\nSmarties\n45\n1\n0\n...\n0\n0\n1\nCanada\n\n\n4\nTwix\n58\n1\n0\n...\n0\n0\n1\nBoth\n\n\n\n\n5 rows × 11 columns\n\n\n\n\nReading in txt files can be a little less standard.\nSometimes the character separating column values are not always commas like we saw before.\nThere are many different options and when we read in the data, we need to specify how the data should be recognized.\nLet’s load in the candybars-text.txt file.\nThis is the same as the candybars.csv data but saved as a txt file.\nLook what happens when we load it in using the same syntax we are used to.\nThis is not ideal.\nWhat you should notice is instead of each column value being separated by a comma, it is now separated by \\t.\nThis is called the delimiter.\nIn this specific case, a \\t delimiter is a “tab”.\nWe need to tell pd.read_csv() to separate each value on our delimiter \\t.\nThat’s much better.\nThe delimiter won’t always be \\t for txt files. The most common delimiters are ;, ,, \\t, and sometimes even just spaces."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-an-excel-file-xlsx",
    "href": "modules/module2/slides/module2_01.html#reading-in-an-excel-file-xlsx",
    "title": "Reading in Different File Types",
    "section": "Reading in an Excel File (xlsx)",
    "text": "Reading in an Excel File (xlsx)\n\ncandybars = pd.read_excel('data/foods.xlsx', sheet_name='chocolate')\ncandybars\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n...\ncoconut\nwhite_chocolate\nmulti\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n...\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n...\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n...\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n...\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n...\n0\n0\n0\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n...\n0\n1\n0\nBoth\n\n\n\n\n25 rows × 11 columns\n\n\n\n\nExcel files need special attention because they give the user the capability of additional formatting including saving multiple dataframes on different “sheets” within a single file.\nIf this is the case, we need to specify which sheet we want.\nSince this is a new type of animal, we also need a new verb. Enter read_excel().\nOur candybars dataframe is now saved as an excel spreadsheet named foods.xlsx on a sheet named chocolate.\nHere is how we would read it in."
  },
  {
    "objectID": "modules/module2/slides/module2_01.html#reading-in-data-from-a-different-file",
    "href": "modules/module2/slides/module2_01.html#reading-in-data-from-a-different-file",
    "title": "Reading in Different File Types",
    "section": "Reading in Data from a Different File",
    "text": "Reading in Data from a Different File\n\nThis translates to the syntax data/canucks.csv.\n\nSomething you have seen in Module 1’s exercises is that when reading in the data there is always a data/ before the file name.\nThis is because we are running the current code in a file that is located in a different folder than the data.\nThe data is specifying a folder in our current directory (folder).\nWe need to specify the path to the csv file through the subdirectory.\nThis translates to the syntax data/canucks.csv."
  },
  {
    "objectID": "modules/module2/slides/module2_09.html#column-renaming",
    "href": "modules/module2/slides/module2_09.html#column-renaming",
    "title": "Column renaming and column dropping",
    "section": "Column Renaming",
    "text": "Column Renaming\n\ncandy = candy.rename(columns={'available_canada_america':'availability'})\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\nnougat\ncookie_wafer_rice\ncoconut\nwhite_chocolate\nmulti\navailability\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\n0\n1\n0\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\n0\n0\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\n0\n0\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\n0\n0\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\n0\n0\n0\n0\n0\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\n0\n1\n0\n1\n0\nBoth\n\n\n\n\n25 rows × 11 columns\n\n\n\n\n columns={'old column name':'new column name'}\n\nThere will be times where you are unsatisfied with the column names and you may want to change them.\nThe proper syntax to do that is with .rename().\nThe column name available_canada_america is a bit long.\nPerhaps it would be a good idea to change it to something shorter like availability.\nHere is how we can accomplish that.\nThis code uses something we’ve never seen before - {} curly braces, also called curly brackets.\nThese have a special meaning but for now, you only need to concentrate your attention on the fact that the argument columns needs to have the format shown on the slide."
  },
  {
    "objectID": "modules/module2/slides/module2_09.html#column-dropping",
    "href": "modules/module2/slides/module2_09.html#column-dropping",
    "title": "Column renaming and column dropping",
    "section": "Column Dropping",
    "text": "Column Dropping\n\ncandy.drop(columns='coconut')\n\n\n\n\n\n\n\n\nname\nweight_g\nchocolate\npeanuts\ncaramel\nnougat\ncookie_wafer_rice\nwhite_chocolate\nmulti\navailability\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\n0\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\n0\n0\n0\n0\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\n0\n0\n0\n0\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\n0\n0\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\n0\n0\n0\n0\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\n0\n1\n1\n0\nBoth\n\n\n\n\n25 rows × 10 columns\n\n\n\n\n.drop() is the verb we use to delete columns in a dataframe.\nLet’s delete the column coconut by specifying it in the columns argument of the drop verb."
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#conditions",
    "href": "modules/module2/slides/module2_16.html#conditions",
    "title": "Data Filtering",
    "section": "Conditions",
    "text": "Conditions\n\ncereal['protein'] &gt; 4\n\n0     False\n1     False\n2     False\n      ...  \n74    False\n75    False\n76    False\nName: protein, Length: 77, dtype: bool\n\n\n\nSuppose you are trying to find the information for cereals with a protein content greater than 4g per serving.\nOur first instinct would be to write code that looks somewhat like this.\nThis can be translated as\n“From the protein column in the dataframe cereal, which have values greater than 4?”\nThe output shows all the index labels and a column with True or False values depending on if the row meets the condition. Cereals with True have a protein content greater than 4 and False if they do not.\nBut we want a dataframe with all the information that only contains the rows with protein above 4.\nHow can this be achieved?"
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#multiple-condition-filtering---and",
    "href": "modules/module2/slides/module2_16.html#multiple-condition-filtering---and",
    "title": "Data Filtering",
    "section": "Multiple Condition Filtering - “and”",
    "text": "Multiple Condition Filtering - “and”\n\ncereal[cereal['protein'] &gt;= 4]\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n4\n1\n130\n10.0\n5.0\n6\n280\n25\n3\n1.0\n0.33\n68.402973\n\n\n2\nAll-Bran\nK\nCold\n70\n4\n1\n260\n9.0\n7.0\n5\n320\n25\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n4\n0\n140\n14.0\n8.0\n0\n330\n25\n3\n1.0\n0.50\n93.704912\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n56\nQuaker Oat Squares\nQ\nCold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.0\n0.50\n49.511874\n\n\n57\nQuaker Oatmeal\nQ\nHot\n100\n5\n2\n0\n2.7\n1.0\n1\n110\n0\n1\n1.0\n0.67\n50.828392\n\n\n67\nSpecial K\nK\nCold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.0\n1.00\n53.131324\n\n\n\n\n11 rows × 16 columns\n\n\n\n\nWe now know how to filter on one condition but how do we filter if we have many?\nPerhaps we only want cereals with protein content between 4 to 5 grams?\nTo find the cereals that meet protein contents greater or equal to 4, we use the code shown here."
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#multiple-condition-filtering---or",
    "href": "modules/module2/slides/module2_16.html#multiple-condition-filtering---or",
    "title": "Data Filtering",
    "section": "Multiple Condition Filtering - “or”",
    "text": "Multiple Condition Filtering - “or”\n\ncereal[(cereal['mfr'] == 'Q') | (cereal['protein'] &gt; 4)]\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\nprotein\nfat\nsodium\nfiber\ncarbo\nsugars\npotass\nvitamins\nshelf\nweight\ncups\nrating\n\n\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n3\n5\n15\n2.0\n8.0\n8\n135\n0\n3\n1.0\n1.00\n33.983679\n\n\n10\nCap'n'Crunch\nQ\nCold\n120\n1\n2\n220\n0.0\n12.0\n12\n35\n25\n2\n1.0\n0.75\n18.042851\n\n\n11\nCheerios\nG\nCold\n110\n6\n2\n290\n2.0\n17.0\n1\n105\n25\n1\n1.0\n1.25\n50.764999\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n56\nQuaker Oat Squares\nQ\nCold\n100\n4\n1\n135\n2.0\n14.0\n6\n110\n25\n3\n1.0\n0.50\n49.511874\n\n\n57\nQuaker Oatmeal\nQ\nHot\n100\n5\n2\n0\n2.7\n1.0\n1\n110\n0\n1\n1.0\n0.67\n50.828392\n\n\n67\nSpecial K\nK\nCold\n110\n6\n0\n230\n1.0\n16.0\n3\n55\n25\n1\n1.0\n1.00\n53.131324\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nSuppose that we are interested in cereals that either are made from the Quaker manufacturer OR a protein content above 4.\nFor a row to be included in the output, we only require one or the other condition to hold.\nInstead of using the & symbol, we use | which is called the “pipe operator”. This means “or” in the Python programming language (and many other languages)."
  },
  {
    "objectID": "modules/module2/slides/module2_16.html#tilde",
    "href": "modules/module2/slides/module2_16.html#tilde",
    "title": "Data Filtering",
    "section": "Tilde",
    "text": "Tilde\n\ncereal['protein'] &gt; 4\n\n0     False\n1     False\n2     False\n      ...  \n74    False\n75    False\n76    False\nName: protein, Length: 77, dtype: bool\n\n\n\nWe saw that when we filter the conditions are expressed with an underlying column with True or False values indicating if the condition has been met in each row of the dataframe.\nBut what if I wanted the rows that were the complement (or opposite) of this?\nThe opposite of cereal['protein'] &gt; 4 is cereal['protein'] &lt;= 4, so that one isn’t too tricky. But sometimes taking the opposite is not so straightforward. This is where the ~ (“tilde”) operator can be helpful."
  },
  {
    "objectID": "modules/module2/slides/module2_22.html#what-is-chaining",
    "href": "modules/module2/slides/module2_22.html#what-is-chaining",
    "title": "Chaining Notation",
    "section": "What is Chaining?",
    "text": "What is Chaining?\n\n\nAttribution\n\nUp until now, when we perform multiple actions on an object, we have been saving the results with the = operator after each line.\nChaining allows us to do multiple actions in a single line of code without the need to save each action in an intermediate object.\nYou can imagine that we are linking verbs together with a chain."
  },
  {
    "objectID": "modules/module2/slides/module2_22.html#coding-preferences",
    "href": "modules/module2/slides/module2_22.html#coding-preferences",
    "title": "Chaining Notation",
    "section": "Coding Preferences",
    "text": "Coding Preferences\n\nChaining has advantages and disadvantages.\nIncreases the readability of our code.\nComments are extremely important with of without chaining.\n\n\nAlthough we have seen how chaining has advantages, it’s a coding style that is adopted by the person writing the code.\nSomeone else (or more often, future you) must be able to understand what is being accomplished.\nThis is why comments (#) are so important. If a lot is going on in your code, it’s a good habit to explain it whether it’s with chaining, or without."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#variable-types",
    "href": "modules/module2/slides/module2_29.html#variable-types",
    "title": "More plotting tricks using Altair",
    "section": "Variable types",
    "text": "Variable types\n\nchart4 = alt.Chart(cereal, width=500, height=300).mark_circle().encode(\n                   x=alt.X('sugars:Q'), # use alt.X() to map the x-axis\n                   y=alt.Y('rating:Q')  # use alt.Y() to map the y-axis\n         ).properties(title=\"Scatter plot of cereal rating vs sugar content\")\n\nchart4\n\n\n\nSo far when plotting with Altair, we have been mapping our x and y in the encode(x=..,y=..) verb.\nHowever, doing so gives us very little control over how exactly we would like to map our x and y values.\nIn order to have more control, we can map our x and y values using x=alt.X(...) and y=alt.Y(...) respectively.\nThis gives us a lot more control over the customization of our plot.\nYou’ll see this coming up."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#histograms",
    "href": "modules/module2/slides/module2_29.html#histograms",
    "title": "More plotting tricks using Altair",
    "section": "Histograms",
    "text": "Histograms\n\nchart5 = alt.Chart(cereal, width=500, height=300).mark_bar().encode(\n                   x=alt.X('calories:Q', bin=True), # set x-axis as calories \n                   y=alt.Y('count():Q')             # set the y-axis as the occurrence count for each calorie value\n         ).properties(title=\"Histogram plot of cereal calorie content\")\nchart5\n\n\n\nAnother type of plot we can make using Altair is called a histogram.\nA histogram would be an ideal plot if we were interested in seeing how many cereals in our dataframe have calories within a certain range. A histogram is a bar chart where the height of each bar shows the frequency of something occurring. When applied to quantitative data, it groups the values into ranges, and the height of each bar shows the frequency of each range.\nWe can generate a histogram plot of the calories values in the cereal dataframe, which is quantitative. This will enable us to see the various values of calories and how many times they occur.\nTo make a histogram, we use mark_bar().\nIn the encode() verb, we specify the x-axis as calories and use the argument bin=True. We assign the y-axis as count():Q to get the number of cereals that have values within each of the ranges.\nThis is the same count() argument we use in Module 1 when we made bar charts."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#bins",
    "href": "modules/module2/slides/module2_29.html#bins",
    "title": "More plotting tricks using Altair",
    "section": "Bins",
    "text": "Bins\n\nchart6 = alt.Chart(cereal, width=500, height=300).mark_bar().encode(\n                   x=alt.X('calories:Q', bin=alt.Bin(maxbins=20)), # set max number of bins to 20\n                   y=alt.Y('count():Q')\n         ).properties(title=\"Histogram of cereal calorie content with bins = 20\")\nchart6\n\n\n\nWe have the ability to change the number of bars (bins) in our histogram by using the bin argument and the alt.Bin() verb.\nWithin alt.Bin(), we can specify maxbins which is the maximum allowed number of bins in our plot.\nThis may be useful when viewing a dataset with lots of different values.\nHaving control over the number of bins in a histogram can help to make visualization easier to extract insights from.\nHere, we set the number of max bins in the plot to 20 by setting bin=alt.Bin(maxbins=20) inside alt.X()."
  },
  {
    "objectID": "modules/module2/slides/module2_29.html#sorting",
    "href": "modules/module2/slides/module2_29.html#sorting",
    "title": "More plotting tricks using Altair",
    "section": "Sorting",
    "text": "Sorting\n\nchart9 = alt.Chart(mfr_mean, width=500, height=300).mark_bar().encode(\n                   x=alt.X('mfr:N', sort=\"y\", title=\"Manufacturer\"),  # use sort=\"y\" to sort in ascending order\n                   y=alt.Y('sugars:Q', title=\"Mean sugar content\")\n        ).properties(title=\"Bar plot of manufacturers mean sugar content in ascending order\")\nchart9\n\n\n\nSometimes sorting a dataframe by quantity helps us obtain insights more easily.\nFor example, if we sorted the mean sugar content for the manufacturers before generating the previous plot, it would be easier to identify which manufacturer produces cereals with the highest mean sugar content.\nAltair allows us to sort a column while plotting.\nSorting can be done on either the x or y axis using the sort= in the alt.X or alt.Y verb.\nThe sort argument takes in either x or y to specify which axis to sort by.\nHere we are sorting in ascending order of which manufacturers have the largest mean sugar content.\nThis plot shows us immediately that manufacturer P has the highest mean cereal sugar content."
  },
  {
    "objectID": "modules/module3/module3-00-module_learning_outcomes.html",
    "href": "modules/module3/module3-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-which_is_tidy.html",
    "href": "modules/module3/module3-06-which_is_tidy.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Dataframe A\n\n\n\n\n\nDataframe B",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-06-which_is_tidy.html#which-is-tidy",
    "href": "modules/module3/module3-06-which_is_tidy.html#which-is-tidy",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Dataframe A\n\n\n\n\n\nDataframe B",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-09-pivoting_questions.html",
    "href": "modules/module3/module3-09-pivoting_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at the new dataset named lego.\n\n\n\n\n\n\nLet’s convert the dataframe lego into a wider dataframe using .pivot().\nTasks:\n\nConvert the untidy data into tidy data using .pivot().\nDon’t forget to reset your index.\nName the new dataframe tidied_lego.\nSave the mean number of parts (num_parts) of the Lego sets in an object named set_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you pivoting the correct column named lego_info with values='value'?\n\nAre you resetting your index after you pivot?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-09-pivoting_questions.html#applying-pivot",
    "href": "modules/module3/module3-09-pivoting_questions.html#applying-pivot",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at the new dataset named lego.\n\n\n\n\n\n\nLet’s convert the dataframe lego into a wider dataframe using .pivot().\nTasks:\n\nConvert the untidy data into tidy data using .pivot().\nDon’t forget to reset your index.\nName the new dataframe tidied_lego.\nSave the mean number of parts (num_parts) of the Lego sets in an object named set_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you pivoting the correct column named lego_info with values='value'?\n\nAre you resetting your index after you pivot?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-12-pivot_table_questions.html",
    "href": "modules/module3/module3-12-pivot_table_questions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s convert the dataframe lego into wider data but this time preserve all the columns in the dataframe by using .pivot_table().\nTasks:\n\nConvert the untidy data into tidy data using .pivot_table() making sure to keep all the columns.\nName the new dataframe tidied_lego.\nUse .agg() to find the mean number of parts for each production year and save it in an object name year_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct arguments such as index, columns, and values?\nDoes your index contain multiple columns?\nAre you pivoting the correct column named lego_info with values='value'?\nAre you resetting your index again after you pivot?\nAre you using .agg({\"num_parts\": \"mean\"})?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-12-pivot_table_questions.html#applying-pivot-table",
    "href": "modules/module3/module3-12-pivot_table_questions.html#applying-pivot-table",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s convert the dataframe lego into wider data but this time preserve all the columns in the dataframe by using .pivot_table().\nTasks:\n\nConvert the untidy data into tidy data using .pivot_table() making sure to keep all the columns.\nName the new dataframe tidied_lego.\nUse .agg() to find the mean number of parts for each production year and save it in an object name year_parts_mean. (We’ve added a verb named .round() to round to the nearest whole number)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct arguments such as index, columns, and values?\nDoes your index contain multiple columns?\nAre you pivoting the correct column named lego_info with values='value'?\nAre you resetting your index again after you pivot?\nAre you using .agg({\"num_parts\": \"mean\"})?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-15-melting_questions.html",
    "href": "modules/module3/module3-15-melting_questions.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at some new untidy data that we have named lego.\n\n\n\n\n\n\nLet’s melt this so that the 2 new columns named matte and transparent become a single one. These columns refer to the opacity of the blocks and the values refer to the number of pieces of each included in the set. Since our variable of interest in this scenario is opacity, we need to combine the two measurements into one column.\nTasks:\n\nmelt the dataframe columns matte and transparent into a single column named opacity and name the values column quantity.\nName the new dataframe tidied_lego.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you melting the correct columns named matte and transparent?\nAre you making sure to use all the columns (except matte and transparent) in the argument id_vars?\nHave you set all arguments (id_vars, value_vars, var_name, and value_name)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-15-melting_questions.html#applying-melt",
    "href": "modules/module3/module3-15-melting_questions.html#applying-melt",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nLet’s take a look at some new untidy data that we have named lego.\n\n\n\n\n\n\nLet’s melt this so that the 2 new columns named matte and transparent become a single one. These columns refer to the opacity of the blocks and the values refer to the number of pieces of each included in the set. Since our variable of interest in this scenario is opacity, we need to combine the two measurements into one column.\nTasks:\n\nmelt the dataframe columns matte and transparent into a single column named opacity and name the values column quantity.\nName the new dataframe tidied_lego.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you melting the correct columns named matte and transparent?\nAre you making sure to use all the columns (except matte and transparent) in the argument id_vars?\nHave you set all arguments (id_vars, value_vars, var_name, and value_name)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-18-concat_questions.html",
    "href": "modules/module3/module3-18-concat_questions.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions: Running a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nSometimes we accumulate additional data that we need to combine with our existing data. In the following question, we need to combine our dataframes to have a complete collection of all the Lego sets that exist.\nTasks:\n\nCombine the two dataframes lego_top and lego_bottom vertically to make one large complete dataframe.\nName the new dataframe full_set.\nSave the new dimension of full_set in an object named full_set_shape.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating in the correct order with lego_top first and lego_bottom second?\nAre you putting your dataframes within square brackets?\nAre you using axis=0\nAre you using .shape to find the dimension of the new dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOur goal is to obtain a dataframe with the lego_set names and the total amount of pieces in each set but we only have 2 Lego dataframes (with the same indexes). One dataframe has the set names and the other contains information amount the number of matte and transparent pieces included in each set. Complete this question by using pd.concat() and techniques we learned in the previous model.\nTasks:\n\nCombine the two dataframes horizontally to make 1 large complete dataframe and name the new dataframe lego_full.\nDrop any duplicated columns using .loc[] and .duplicate()and save this new dataframe as washed_lego.\nMake a new column named total_pieces by adding up columns matte and transparent.\nSort the dataframe by total_pieces in descending order.\nSave this in an object named lego_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating the dataframes lego_base with lego_opacity?\nAre you putting your dataframes within square brackets?\nAre you removing any duplicated columns?\nAre you using axis=1?\nAre you using .assign() to make a new column named total_pieces?\nAre you using using .sort_values() with the argument ascending=False\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-18-concat_questions.html#coding-questions",
    "href": "modules/module3/module3-18-concat_questions.html#coding-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions: Running a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nSometimes we accumulate additional data that we need to combine with our existing data. In the following question, we need to combine our dataframes to have a complete collection of all the Lego sets that exist.\nTasks:\n\nCombine the two dataframes lego_top and lego_bottom vertically to make one large complete dataframe.\nName the new dataframe full_set.\nSave the new dimension of full_set in an object named full_set_shape.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating in the correct order with lego_top first and lego_bottom second?\nAre you putting your dataframes within square brackets?\nAre you using axis=0\nAre you using .shape to find the dimension of the new dataframe?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOur goal is to obtain a dataframe with the lego_set names and the total amount of pieces in each set but we only have 2 Lego dataframes (with the same indexes). One dataframe has the set names and the other contains information amount the number of matte and transparent pieces included in each set. Complete this question by using pd.concat() and techniques we learned in the previous model.\nTasks:\n\nCombine the two dataframes horizontally to make 1 large complete dataframe and name the new dataframe lego_full.\nDrop any duplicated columns using .loc[] and .duplicate()and save this new dataframe as washed_lego.\nMake a new column named total_pieces by adding up columns matte and transparent.\nSort the dataframe by total_pieces in descending order.\nSave this in an object named lego_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you concatenating the dataframes lego_base with lego_opacity?\nAre you putting your dataframes within square brackets?\nAre you removing any duplicated columns?\nAre you using axis=1?\nAre you using .assign() to make a new column named total_pieces?\nAre you using using .sort_values() with the argument ascending=False\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-22-merge_questions.html",
    "href": "modules/module3/module3-22-merge_questions.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nIn this exercise, you are going to join two dataframes lego_inventory_parts.csv and lego-colors.csv and answer a few multiple-choice questions. The multiple-choice questions are being asked with the intention of using the code cell to write your own code in any way that helps to answer the question.\nTasks:\n\nCombine the two dataframes to make 1 large complete dataframe by using an outer join.\nMake sure to set the argument indicator to True.\nName the new dataframe lego_tower.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_tower?\nAre you using the arguments left_on='color_id', right_on=id, how='outer' and indicator=True?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis question may be a bit more challenging. We are wondering about the inventory of a store. We want to see which Lego sets are in stock and if so how many? After all, the store needs to make sure there are enough sets in stock to meet demand.\nTasks:\n\nCombine the two dataframes to make one large complete dataframe by using an inner join.\nName the new dataframe lego_stock.\nGroup the new dataframe by set_num and find how many groups there are using .ngroups\n\nThis question is in two parts and we are going to walk you through how to tackle it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_stock?\nAre you using the arguments left_on='set_num', right_on='set_num' and how='inner'?\nAre you grouping my using groupby('set_num')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAh, it appears we have multiple rows for some of the same sets.\nAlthough it shows initially the we have 2846 different sets due to the number of rows in lego_stock, when we group them by set_num we actually only get 2306 different sets. This means that we have some rows with the same set_num but with different inventory quantities.\nHow are we going to get the stock quantity of each set now?\nWe are going to have to sum up the quantity of each set using .groupby() and.agg().\nTasks:\n\nUse .groupby() and .agg() to sum up the quantity of each set and save this as store_inventory.\nInner join store_inventory with lego_sets and use chaining to sort the dataframe in descending order based on in-stock quantity\nSave this new dataframe as store_inventory_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe store_inventory?\nAre you aggregating using .agg({\\'quantity\\':\\'sum\\'})?\nAre you using the arguments left_index=True, right_index=True, how='inner'?\nAre you sorting in descending order of quantity?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we can return to our initial problem of identifying how many Lego sets are in stock.",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/module3-22-merge_questions.html#coding-questions",
    "href": "modules/module3/module3-22-merge_questions.html#coding-questions",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nIn this exercise, you are going to join two dataframes lego_inventory_parts.csv and lego-colors.csv and answer a few multiple-choice questions. The multiple-choice questions are being asked with the intention of using the code cell to write your own code in any way that helps to answer the question.\nTasks:\n\nCombine the two dataframes to make 1 large complete dataframe by using an outer join.\nMake sure to set the argument indicator to True.\nName the new dataframe lego_tower.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_tower?\nAre you using the arguments left_on='color_id', right_on=id, how='outer' and indicator=True?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThis question may be a bit more challenging. We are wondering about the inventory of a store. We want to see which Lego sets are in stock and if so how many? After all, the store needs to make sure there are enough sets in stock to meet demand.\nTasks:\n\nCombine the two dataframes to make one large complete dataframe by using an inner join.\nName the new dataframe lego_stock.\nGroup the new dataframe by set_num and find how many groups there are using .ngroups\n\nThis question is in two parts and we are going to walk you through how to tackle it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe lego_stock?\nAre you using the arguments left_on='set_num', right_on='set_num' and how='inner'?\nAre you grouping my using groupby('set_num')?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAh, it appears we have multiple rows for some of the same sets.\nAlthough it shows initially the we have 2846 different sets due to the number of rows in lego_stock, when we group them by set_num we actually only get 2306 different sets. This means that we have some rows with the same set_num but with different inventory quantities.\nHow are we going to get the stock quantity of each set now?\nWe are going to have to sum up the quantity of each set using .groupby() and.agg().\nTasks:\n\nUse .groupby() and .agg() to sum up the quantity of each set and save this as store_inventory.\nInner join store_inventory with lego_sets and use chaining to sort the dataframe in descending order based on in-stock quantity\nSave this new dataframe as store_inventory_details.\nDisplay the new dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you naming your new dataframe store_inventory?\nAre you aggregating using .agg({\\'quantity\\':\\'sum\\'})?\nAre you using the arguments left_index=True, right_index=True, how='inner'?\nAre you sorting in descending order of quantity?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNow we can return to our initial problem of identifying how many Lego sets are in stock.",
    "crumbs": [
      "**M3. Tidy Data and Joining Dataframes**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "href": "modules/module3/slides/module3_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nExplain what tidy data is.\nUse .melt() and .pivot() to reshape dataframes, specifically to make tidy data.\nLearn how to reset a dataframe’s index.\nCombine dataframes using .merge() and .concat() and know when to use these different methods.\nUnderstand the different joining methods."
  },
  {
    "objectID": "modules/module3/slides/module3_11.html#pivot-table",
    "href": "modules/module3/slides/module3_11.html#pivot-table",
    "title": "Reshaping with Pivot Table",
    "section": "Pivot Table",
    "text": "Pivot Table\n\n\n\nWe discussed that one of the effects of using .pivot() on our cereal_long dataframe was that the new dataframe was missing the column mfr.\nThat’s because .pivot() discards any columns that are not being directly affected by the pivot. Only the column that is specified in the index argument and the columns that need to be transformed are present in the new dataframe.\nThat’s where pivot_table steps in!"
  },
  {
    "objectID": "modules/module3/slides/module3_11.html#why-use-pivot-at-all-then",
    "href": "modules/module3/slides/module3_11.html#why-use-pivot-at-all-then",
    "title": "Reshaping with Pivot Table",
    "section": "Why use pivot at all then?",
    "text": "Why use pivot at all then?\n\n\n\nWhen we use .pivot_table(), we have to proceed with caution.\nWe talked about how .pivot() and .pivot_table() take the arguments index and columns. What happens if we have multiple rows with the same index and column values?\nTake the following example where we see that Special K has 2 rows with differing values for calories.\nWhat happens when we try to pivot this?"
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#concatenation",
    "href": "modules/module3/slides/module3_17.html#concatenation",
    "title": "Concatenation",
    "section": "Concatenation",
    "text": "Concatenation\n\n\nConcatenation works extremely well when you have similar dataframes, which both share identical column or row index labels.\npd.concat() can glue the 2 dataframes together either horizontally or vertically.\nIn this animation, you can see that the pieces are joined in the order that was presented, and the pattern does not necessarily match up."
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#horizontal-concatenation",
    "href": "modules/module3/slides/module3_17.html#horizontal-concatenation",
    "title": "Concatenation",
    "section": "Horizontal Concatenation",
    "text": "Horizontal Concatenation\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\n\ncandy2 = pd.read_csv('data/candy_bars2.csv')\ncandy2\n\n\n\n\n\n\n\n\nname\ncalories\nfat\nsugar\n\n\n\n\n0\nCoffee Crisp\n260\n13\n25\n\n\n1\nButterfinger\n798\n30\n72\n\n\n2\nSkor\n209\n12\n23\n\n\n3\nSmarties\n210\n6\n33\n\n\n4\nTwix\n250\n12\n25\n\n\n\n\n\n\n\n\ncandy_bars2.csv is a new dataframe that has additional nutritional information about each candy bar like the columns calories fat and sugar. You’ll notice that this dataframe has the same number and order of candy bars.\nWe want to combine candy2 with candy horizontally."
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#vertical-concatenation",
    "href": "modules/module3/slides/module3_17.html#vertical-concatenation",
    "title": "Concatenation",
    "section": "Vertical Concatenation",
    "text": "Vertical Concatenation\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\n\ncandy_more = pd.read_csv('data/candybars_more.csv', usecols=range(4))\ncandy_more\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nKinder Bueno\n43\n1\n0\n\n\n1\n5th Avenue\n56\n1\n1\n\n\n2\nCrunch\n44\n1\n0\n\n\n\n\n\n\n\n\nThe new dataset candybars_more.csv has 3 additional candy bars that we wish to add to the original candy dataframe. The columns in this dataframe have the same order as in the candy dataframe."
  },
  {
    "objectID": "modules/module3/slides/module3_17.html#be-careful-of-order",
    "href": "modules/module3/slides/module3_17.html#be-careful-of-order",
    "title": "Concatenation",
    "section": "Be careful of order!",
    "text": "Be careful of order!\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n\n\n1\nButterfinger\n184\n1\n1\n\n\n2\nSkor\n39\n1\n0\n\n\n3\nSmarties\n45\n1\n0\n\n\n4\nTwix\n58\n1\n0\n\n\n\n\n\n\n\n\n\nsnacksize_candybars = pd.read_csv('data/snacksize_candybars.csv')\nsnacksize_candybars\n\n\n\n\n\n\n\n\nname\ncalories\nfat\nsugar\n\n\n\n\n0\nButterfinger\n798\n30\n72\n\n\n1\nSkor\n209\n12\n23\n\n\n2\nTwix\n250\n12\n25\n\n\n3\nCoffee Crisp\n260\n13\n25\n\n\n4\nSmarties\n210\n6\n33\n\n\n\n\n\n\n\n\npd.concat() is great when our dataframes have the same order for each observation. What happens if our dataframes have different orders for the candy bars?\nLet’s use a horizontal concatenation example with the dataframesnacksize_candybars.csv. This data contains the candy bars from candy in a shuffled order."
  },
  {
    "objectID": "modules/module3/slides/module3_25.html#summary",
    "href": "modules/module3/slides/module3_25.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 3",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nExplain what tidy data is.\nUse .melt() and .pivot() to reshape dataframes, specifically to make tidy data.\nLearn how to reset a dataframe’s index.\nCombine dataframes using .merge() and .concat() and know when to use these different methods.\nUnderstand the different joining methods.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module3/slides/module3_25.html#attribution",
    "href": "modules/module3/slides/module3_25.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 3",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module4/module4-01-python_data_types.html",
    "href": "modules/module4/module4-01-python_data_types.html",
    "title": "1. Python Data Types",
    "section": "",
    "text": "1. Python Data Types\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "1. Python Data Types"
    ]
  },
  {
    "objectID": "modules/module4/module4-05-python_data_structures:_lists_tuples_and_sets.html",
    "href": "modules/module4/module4-05-python_data_structures:_lists_tuples_and_sets.html",
    "title": "2. Python Data Structures: Lists, Tuples and Sets",
    "section": "",
    "text": "2. Python Data Structures: Lists, Tuples and Sets\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "2. Python Data Structures: Lists, Tuples and Sets"
    ]
  },
  {
    "objectID": "modules/module4/module4-10-python_data_structures:_dictionaries.html",
    "href": "modules/module4/module4-10-python_data_structures:_dictionaries.html",
    "title": "3. Python Data Structures: Dictionaries",
    "section": "",
    "text": "3. Python Data Structures: Dictionaries\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "3. Python Data Structures: Dictionaries"
    ]
  },
  {
    "objectID": "modules/module4/module4-14-dataframes_series_and_column_dtypes.html",
    "href": "modules/module4/module4-14-dataframes_series_and_column_dtypes.html",
    "title": "4. Dataframes, Series and Column dtypes",
    "section": "",
    "text": "4. Dataframes, Series and Column dtypes\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "4. Dataframes, Series and Column dtypes"
    ]
  },
  {
    "objectID": "modules/module4/module4-18-python_operations.html",
    "href": "modules/module4/module4-18-python_operations.html",
    "title": "5. Python Operations",
    "section": "",
    "text": "5. Python Operations\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "5. Python Operations"
    ]
  },
  {
    "objectID": "modules/module4/module4-21-operations_with_columns.html",
    "href": "modules/module4/module4-21-operations_with_columns.html",
    "title": "6. Operations with Columns",
    "section": "",
    "text": "6. Operations with Columns\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "6. Operations with Columns"
    ]
  },
  {
    "objectID": "modules/module4/module4-23-splitting_a_column.html",
    "href": "modules/module4/module4-23-splitting_a_column.html",
    "title": "7. Splitting a Column",
    "section": "",
    "text": "7. Splitting a Column\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "7. Splitting a Column"
    ]
  },
  {
    "objectID": "modules/module4/module4-25-what_did_we_just_learn.html",
    "href": "modules/module4/module4-25-what_did_we_just_learn.html",
    "title": "8. What Did We Just Learn?",
    "section": "",
    "text": "8. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M4. Python Without the \"Eek\" (Basic Python)**",
      "8. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#values-and-objects",
    "href": "modules/module4/slides/module4_01.html#values-and-objects",
    "title": "Python Data Types",
    "section": "Values and Objects",
    "text": "Values and Objects\n\nWe have been working with values, which are pieces of data that a computer program works with, such as a number or text.\nWe have been assigning a lot of these values (with the assignment operator =) to objects.\n\n\npet = 'Fido' \npet\n\n'Fido'\n\n\n\n\nage = 6\nage\n\n6\n\n\n\nIn the last few sections, you may have had questions like:\n“Why are some values in quotation marks while others are not?”,\n“What are these square brackets we keep using in our verb arguments?” or\n“Why can we take the mean of some columns and not others?” .\nWe’ll be answering these questions in this module.\nPython needs to categorize things to make sense of them.\nLet’s start with some basics.\nIn these cases, pet and age are objects, and Fido and 6 are values.\nThese objects can be named anything that begins with a letter and is not “special python words” like range, for, if, else, etc. (we will talk about some of those in the next module)."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#data-types",
    "href": "modules/module4/slides/module4_01.html#data-types",
    "title": "Python Data Types",
    "section": "Data Types",
    "text": "Data Types\nHere are some data types built-in to the Python language:\n\nIntegers - int\nFloating-point numbers - float\nStrings - str\nBooleans -bool\nLists - list\nTuples - tuple\nSets - set\nDictionaries - dict\n\n\nValues, as we saw in our Fido and 6 examples, can be a variety of different things that get classified by Python as data types."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#numerical-data-types",
    "href": "modules/module4/slides/module4_01.html#numerical-data-types",
    "title": "Python Data Types",
    "section": "Numerical Data Types",
    "text": "Numerical Data Types\nInt\n\nage = 6 \ntype(age)\n\nint\n\n\n\nFloat\n\nage = 6.0\ntype(age)\n\nfloat\n\n\n\nYou’ve likely noticed that we have not needed to put any quotation marks around number values. Python recognizes numbers as one of two possible types.\nEither as an integer called an int type or a floating-point number called a float.\nAn int value is a whole number that is either positive, negative, or zero.\nWe can use the verb type() to find out how Python classifies the value that is stored in an object.\n6 is of type int.\nA float value is a real number in decimal form. That means even if we have a whole number if it contains a decimal point, it is considered a float.\nIn contrast, 6.0 is if type float."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#nan",
    "href": "modules/module4/slides/module4_01.html#nan",
    "title": "Python Data Types",
    "section": "NaN",
    "text": "NaN\n\nweather\n\n\n\n\n\n\n\n\nmonth\nseason\n31st\n\n\n\n\n0\nfebruary\nwinter\nNaN\n\n\n1\nmarch\nspring\n31.0\n\n\n2\nmarch\nspring\nNaN\n\n\n\n\n\n\n\n\n\nnan_value = weather.loc[2,'31st']\nnan_value\n\nnp.float64(nan)\n\n\n\n\ntype(nan_value)\n\nnumpy.float64\n\n\n\nSomething you may have noticed in our Pandas dataframes are NaN values.\nThis stands for Not A Number, and it is a special value used to represent missing data in pandas.\nContrary to its acronym, it is considered a numeric value, specifically of type float!\nIgnore the numpy and 64 for now and concentrate on the float classification for now. We will be discussing NumPy more in Module 8.\nUnlike other values, NaN cannot be converted to any other type other than a float."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#nonetype",
    "href": "modules/module4/slides/module4_01.html#nonetype",
    "title": "Python Data Types",
    "section": "NoneType",
    "text": "NoneType\n\nname_of_bed_monster = None\n\n\n\ntype(name_of_bed_monster)\n\nNoneType\n\n\n\nUnlike NaN which is a special float value, NoneType is its own type, with only one possible value, None.\nLet’s say we need to save the name of the monster living under my bed in an object. Unfortunately, we have yet to introduce ourselves to him, so we are not sure what his name is. We also need to keep track that we are missing this information.\nWe’ve seen this data type in our assignments when we replace the None provided with our solution. Since we still need to have the object created for the structure of our assignments, we simply use None to indicate the object exists but is devoid of information."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#booleans",
    "href": "modules/module4/slides/module4_01.html#booleans",
    "title": "Python Data Types",
    "section": "Booleans",
    "text": "Booleans\nThe Boolean (bool) type has two values: True and False.\n\ntype(False)\n\nbool\n\n\n\n\nweather\n\n\n\n\n\n\n\n\nmonth\nseason\n31st\n\n\n\n\n0\nfebruary\nwinter\nNaN\n\n\n1\nmarch\nspring\n31.0\n\n\n2\nmarch\nspring\nNaN\n\n\n\n\n\n\n\n\n\nweather['season'] == 'winter'\n\n0     True\n1    False\n2    False\nName: season, dtype: bool\n\n\n\nThe Boolean type has two values: True and False. As you can see at the top, the value False is of type bool for Boolean.\nWe have seen this data type when we were filtering our dataframes with conditions.\nIn pandas, a condition is evaluated and produces a column indicating whether the condition was met or not for each row.\nThis column is a Boolean type."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#strings",
    "href": "modules/module4/slides/module4_01.html#strings",
    "title": "Python Data Types",
    "section": "Strings",
    "text": "Strings\n\nSingle quotes, e.g., 'Hello'\nDouble quotes, e.g., \"Goodbye\"\nTriple single quotes, e.g., '''Yesterday'''\nTriple double quotes, e.g., \"\"\"Tomorrow\"\"\"\n\n\nname_of_bed_monster = 'Mike Wazowski'\nname_of_bed_monster\n\n'Mike Wazowski'\n\n\n\n\nname_of_bed_monster = \"Mike Wazowski\"\nname_of_bed_monster\n\n'Mike Wazowski'\n\n\n\n\nname_of_bed_monster = \"\"\"Mike Wazowski\"\"\"\nname_of_bed_monster\n\n'Mike Wazowski'\n\n\n\nText is stored as a data type called a string (str).\nWe think of a string as a sequence of characters enclosed in some form of quotations.\nWe’ve been mostly using single quotations for strings up until this point, but you can enclose them with different types of quotation marks, as shown here."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#string-verbs",
    "href": "modules/module4/slides/module4_01.html#string-verbs",
    "title": "Python Data Types",
    "section": "String Verbs",
    "text": "String Verbs\nThere are A variety of different methods to transform strings or extract information from them.\n\nname_of_bed_monster = 'Mike Wazowski'\n\n\nlen():\n\n\nlen(name_of_bed_monster)\n\n13\n\n\n\n.upper():\n\n\nname_of_bed_monster.upper()\n\n'MIKE WAZOWSKI'\n\n\n\n.lower():\n\n\nname_of_bed_monster.lower()\n\n'mike wazowski'\n\n\n\nThere are A variety of different methods to transform strings or extract information from them. Here are a few of them.\n\nWe can obtain the number of characters in a string with len().\nWe can change the cases to capitals with .upper().\nOr change the cases to lower case with .lower()."
  },
  {
    "objectID": "modules/module4/slides/module4_01.html#casting",
    "href": "modules/module4/slides/module4_01.html#casting",
    "title": "Python Data Types",
    "section": "Casting",
    "text": "Casting\n\nint to float:\n\n\nnumber_of_floating_balloons = float(5)\ntype(number_of_floating_balloons)\n\nfloat\n\n\n\nAn int to a str:\n\n\nnumber_of_balloon_strings = str(5)\ntype(number_of_balloon_strings)\n\nstr\n\n\n\nfloat to an int (it will round down to the nearest full integer).\n\n\nnumber_of_balloons = int(4.99)\nnumber_of_balloons\n\n4\n\n\n\nSometimes we need to explicitly transform an object from one type to another, which is called casting.\nWe can do this for some types, but not all.\nTo cast an object to a new type, we use verbs corresponding to the desired type, such as int(), float(), bool() or str()."
  },
  {
    "objectID": "modules/module4/slides/module4_10.html#dictionaries",
    "href": "modules/module4/slides/module4_10.html#dictionaries",
    "title": "Python Data Structures: Dictionaries",
    "section": "Dictionaries",
    "text": "Dictionaries\nA dictionary is a map between key-value pairs.\n\nFor example:\nA house can have 3 bedrooms.\n‘bedrooms’ is the key, and the number of bedrooms is the value.\n\nHow does this look in terms of a data structure?\n\nhouse = {'bedrooms': 3}\nhouse\n\n{'bedrooms': 3}\n\n\n\nDictionaries are used in different languages to look up definitions of words.\nPython has a data structure by the same name that replicates this “lookup” action.\nFor example:\nA house can have 3 bedrooms. Bedroom is called the key, and the number of bedrooms is called the value.\nHow does this look in terms of a data structure?\nWe use curly brackets and a colon that separates the key and its value."
  },
  {
    "objectID": "modules/module4/slides/module4_10.html#dictionaries-to-dataframes",
    "href": "modules/module4/slides/module4_10.html#dictionaries-to-dataframes",
    "title": "Python Data Structures: Dictionaries",
    "section": "Dictionaries to Dataframes",
    "text": "Dictionaries to Dataframes\n\n\n\n\n\n\nname\nheight\ndiameter\nflowering\n\n\n\n\n0\nCherry\n7\n12\nTrue\n\n\n1\nOak\n20\n89\nFalse\n\n\n2\nWillow\n12\n30\nTrue\n\n\n3\nFir\n16\n18\nFalse\n\n\n\n\n\n\ndata = { 'name': ['Cherry', 'Oak', 'Willow', 'Fir'], \n         'height': [7, 20, 12, 16], \n         'diameter': [12, 89, 30, 18], \n         'flowering': [True, False, True, False]}\n         \nforest = pd.DataFrame.from_dict(data)\nforest\n\n\n\n\n\n\n\n\nname\nheight\ndiameter\nflowering\n\n\n\n\n0\nCherry\n7\n12\nTrue\n\n\n1\nOak\n20\n89\nFalse\n\n\n2\nWillow\n12\n30\nTrue\n\n\n3\nFir\n16\n18\nFalse\n\n\n\n\n\n\n\n\nWhat about making dataframes from dictionaries?\nWe are lucky enough to have two ways of making data from a dictionary using the verb pd.DataFrame.from_dict().\nFirst, let’s try making this table into a dataframe where we insert our data column-wise.\nWe can use the dictionary keys to represent the column names and the dictionary values for the column values stored in a list."
  },
  {
    "objectID": "modules/module4/slides/module4_10.html#lets-add-what-we-learned-to-our-table",
    "href": "modules/module4/slides/module4_10.html#lets-add-what-we-learned-to-our-table",
    "title": "Python Data Structures: Dictionaries",
    "section": "Let’s add what we learned to our table",
    "text": "Let’s add what we learned to our table\n\n\n\n\n\n\n\n\n\n\n\nData Structure\npreserves order\nMutable\nSymbol\nCan contain duplicates\n\n\n\n\nstr\n✓\n☓\n'' or \"\"\n✓\n\n\nlist\n✓\n✓\n[]\n✓\n\n\ntuple\n✓\n☓\n()\n✓\n\n\nset\n☓\n✓\n{}\n☓\n\n\ndict\n✓\n✓\n{:}\nkeys: ☓ , values: ✓\n\n\n\n\nLet’s add the dictionary data structure to our data structure summary table."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#numeric-operations",
    "href": "modules/module4/slides/module4_18.html#numeric-operations",
    "title": "Python Operations",
    "section": "Numeric Operations",
    "text": "Numeric Operations\n\n6 + 5.7\n\n11.7\n\n\n\n\n15 - 7\n\n8\n\n\n\n\n4.5 * 4\n\n18.0\n\n\n\n\n2 ** 3\n\n8\n\n\n\n\n2.2 ** 5\n\n51.53632000000002\n\n\n\nLet’s apply these to the Python types we have learned and observe the results.\nThese operators act as expected on numeric types.\nAn int plus a float results in a float.\nAnd the subtraction of 2 values of type int results with a type int.\nMultiplication with a float and an int will result in a float as well.\nExponents can be calculated with ** and applied with int as well as float data types."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#bool",
    "href": "modules/module4/slides/module4_18.html#bool",
    "title": "Python Operations",
    "section": "Bool",
    "text": "Bool\n\nTrue + True \n\n2\n\n\n\n\nTrue * 4\n\n4\n\n\n\n\nFalse * 2 + True\n\n1\n\n\n\n\nFalse + 4\n\n4\n\n\n\nWe saw that addition, subtraction, multiplication, and exponential operations work as expected with numeric values but let’s check out what happens with the other data types.\nWhat happens when we try to add up bool values?\nWe see that True values are cast as a value of 1, and False values are cast as 0 when they are added together."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#str",
    "href": "modules/module4/slides/module4_18.html#str",
    "title": "Python Operations",
    "section": "Str",
    "text": "Str\n\n'The monster under my bed' + ' is named Mike' \n\n'The monster under my bed is named Mike'\n\n\n\n'The monster under my bed' - ' is named Mike' \nTypeError: unsupported operand type(s) for -: 'str' and 'str'\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\n'The monster under my bed' / ' is named Mike' \nTypeError: unsupported operand type(s) for /: 'str' and 'str'\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\nStrings react rather interestingly with the addition operator.\nFor instance, when we add strings, we add the sequence from one end to the other. This is also called concatenation.\nAnd we cannot multiply, divide or subtract two strings."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#list",
    "href": "modules/module4/slides/module4_18.html#list",
    "title": "Python Operations",
    "section": "List",
    "text": "List\n\nlist1 = [1, 2.0, 3, 4.5] + ['nine', 'ten', 'eleven', 'twelve']\nlist1\n\n[1, 2.0, 3, 4.5, 'nine', 'ten', 'eleven', 'twelve']\n\n\n\n[1, 2.0, 3, 4.5] - [3, 5, 2, 1]\nTypeError: unsupported operand type(s) for -: 'list' and 'list'\n\nDetailed traceback: \n  File \"&lt;string&gt;\", line 1, in &lt;module&gt;\n\n\n[1, 2.0, 3, 4.5] * [5, 6, 7, 8]\n\n\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[15], line 1\n----&gt; 1 [1, 2.0, 3, 4.5] * [5, 6, 7, 8]\n\nTypeError: can't multiply sequence by non-int of type 'list'\n\n\n\n\nHow about with other data types like lists, tuples and dictionaries?\nIf we add lists, similarly to strings, the lists concatenate together to create a single list containing the elements of both lists.\nOther operators, like subtraction and multiplication, are not supported when working with lists."
  },
  {
    "objectID": "modules/module4/slides/module4_18.html#boolean-operators",
    "href": "modules/module4/slides/module4_18.html#boolean-operators",
    "title": "Python Operations",
    "section": "Boolean Operators",
    "text": "Boolean Operators\n\n\n\nOperator\nDescription\n\n\n\n\nx == y\nis x equal to y?\n\n\nx != y\nis x not equal to y?\n\n\nx &gt; y\nis x greater than y?\n\n\nx &gt;= y\nis x greater than or equal to y?\n\n\nx &lt; y\nis x less than y?\n\n\nx &lt;= y\nis x less than or equal to y?\n\n\nx is y\nis x the same object as y?\n\n\nx and y\nare x and y both true?\n\n\nx or y\nis at least one of x and y true?\n\n\nnot x\nis x false?\n\n\n\n\nWhen we’ve filtered our data, we’ve seen different Boolean operators, but we have some new ones here for you.\nLet’s explore them."
  },
  {
    "objectID": "modules/module4/slides/module4_23.html#string-split",
    "href": "modules/module4/slides/module4_23.html#string-split",
    "title": "Splitting a Column",
    "section": "String Split",
    "text": "String Split\n\ncereal_amended\n\n\n\n\n\n\n\n\nname\nmfr_type\ncalories\nprotein\n...\nfat\ncarbo\nrating\nhot\n\n\n\n\n0\n100% Bran\nN-Cold\n70\n4\n...\n1\n5.0\n68.402973\nFalse\n\n\n1\n100% Natural Bran\nQ-Cold\n120\n3\n...\n5\n8.0\n33.983679\nFalse\n\n\n2\nAll-Bran\nK-Cold\n70\n4\n...\n1\n7.0\n59.425505\nFalse\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR-Cold\n100\n3\n...\n1\n17.0\n49.787445\nFalse\n\n\n75\nWheaties\nG-Cold\n100\n3\n...\n1\n17.0\n51.592193\nFalse\n\n\n76\nWheaties Honey Gold\nG-Cold\n110\n2\n...\n1\n16.0\n36.187559\nFalse\n\n\n\n\n77 rows × 9 columns\n\n\n\n\nHere is a new cereal dataframe.\nYou’ll notice that our column mfr_type contains two variables.\nIt is displaying both the manufacturer (N, Q, etc.) of the cereal and the cereal type (Cold, Hot).\nTo convert this into tidier data, we will need to split up this column into two separate columns, but how?"
  },
  {
    "objectID": "modules/module5/module5-00-module_learning_outcomes.html",
    "href": "modules/module5/module5-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "time = 150\n\nif time  &lt; 120:\n    speed = 'Fast'\nelif time &lt; 180:\n    speed = 'Average'\nelse:\n    speed = 'Slow'\nspeed\n\n\n\n\nprice = 150\n\nif price &gt; 50:\n    expensive = 'moderately'\nelif price &gt; 100:\n    expensive = 'valuable'\nelse:\n    expensive = 'affordable'\nexpensive\n\n\n\n\n\n\n\n\n\n\nif price &gt; 100\n    expensive = 'valuable'\nelse\n    expensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\nexpensive = 'moderately'\nelif price &gt; 100:\nexpensive = 'valuable'\nelse:\nexpensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\n    expensive = 'moderately'\nexpensive\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice making decisions with conditional statements. We are going to the gym and our exercise plan takes different amounts of reps. let’s make conditional statements that depend on the name of the exercises.\nTasks:\n\nMake if, elif, and else statements for the following conditions:\n\nif the exercise value is lunges, set an object value named reps to 20.\nif the exercise value is squats, set reps to 25\nif the exercise value is burpees, set reps to 15\nIf the exercise value is anything else, set reps to 10.\n\nDisplay the value of reps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using double equal signs (==) to make a conditional statement?\nAre you using a single if statement and 2 elif statements?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try to make inline conditional statements using if and else. the variable cups_of_tea is the number of cups of tea Ben drank last week.\nTasks:\n\nMake an inline if/else statement that satisfies the following conditions:\n\nif the data type of cups_of_tea is of type list, then set and object named tea_amount to the sum of the elements.\nif the data type is anything else, set tea_amount to the string 'cannot sum'.\n\nDisplay the result of tea_amount.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nTo check the data type of cups_of_tea, you can use type(cups_of_tea) == list.\nAre you using sum() to sum up the elements in a list?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html#quick-questions-with-conditionals",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html#quick-questions-with-conditionals",
    "title": "1.1. Exercises",
    "section": "",
    "text": "time = 150\n\nif time  &lt; 120:\n    speed = 'Fast'\nelif time &lt; 180:\n    speed = 'Average'\nelse:\n    speed = 'Slow'\nspeed\n\n\n\n\nprice = 150\n\nif price &gt; 50:\n    expensive = 'moderately'\nelif price &gt; 100:\n    expensive = 'valuable'\nelse:\n    expensive = 'affordable'\nexpensive",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html#will-it-run-with-conditionals",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html#will-it-run-with-conditionals",
    "title": "1.1. Exercises",
    "section": "",
    "text": "if price &gt; 100\n    expensive = 'valuable'\nelse\n    expensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\nexpensive = 'moderately'\nelif price &gt; 100:\nexpensive = 'valuable'\nelse:\nexpensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\n    expensive = 'moderately'\nexpensive",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html#coding-questions",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html#coding-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice making decisions with conditional statements. We are going to the gym and our exercise plan takes different amounts of reps. let’s make conditional statements that depend on the name of the exercises.\nTasks:\n\nMake if, elif, and else statements for the following conditions:\n\nif the exercise value is lunges, set an object value named reps to 20.\nif the exercise value is squats, set reps to 25\nif the exercise value is burpees, set reps to 15\nIf the exercise value is anything else, set reps to 10.\n\nDisplay the value of reps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using double equal signs (==) to make a conditional statement?\nAre you using a single if statement and 2 elif statements?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try to make inline conditional statements using if and else. the variable cups_of_tea is the number of cups of tea Ben drank last week.\nTasks:\n\nMake an inline if/else statement that satisfies the following conditions:\n\nif the data type of cups_of_tea is of type list, then set and object named tea_amount to the sum of the elements.\nif the data type is anything else, set tea_amount to the string 'cannot sum'.\n\nDisplay the result of tea_amount.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nTo check the data type of cups_of_tea, you can use type(cups_of_tea) == list.\nAre you using sum() to sum up the elements in a list?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-repeated_iterations_questions.html",
    "href": "modules/module5/module5-07-repeated_iterations_questions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "sentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \nword_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nname in sentence: \n  word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \n    word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence\n    word_length.append(len(name))\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nWe’ve learned about iterating , now it’s time to apply this! We have a list that contains all elements of type float. We want to create a new list that casts each element to type int.\nTasks:\n\nCreate a new empty list named integer_list.\nIterate over all the items in float_list. Cast the element to data type int and append it to integer_list.\nDisplay the value of integer_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\nAre you appending the int value to the new list with integer_list.append(int('variable-name-chose'))\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-repeated_iterations_questions.html#repeated-iterations-questions",
    "href": "modules/module5/module5-07-repeated_iterations_questions.html#repeated-iterations-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "sentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \nword_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nname in sentence: \n  word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \n    word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence\n    word_length.append(len(name))",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-repeated_iterations_questions.html#practice-iterating-over-a-collection",
    "href": "modules/module5/module5-07-repeated_iterations_questions.html#practice-iterating-over-a-collection",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nWe’ve learned about iterating , now it’s time to apply this! We have a list that contains all elements of type float. We want to create a new list that casts each element to type int.\nTasks:\n\nCreate a new empty list named integer_list.\nIterate over all the items in float_list. Cast the element to data type int and append it to integer_list.\nDisplay the value of integer_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\nAre you appending the int value to the new list with integer_list.append(int('variable-name-chose'))\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-range_questions.html",
    "href": "modules/module5/module5-10-range_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "numericals = []\nfor j in range(30,60,5):\n    numericals.append(j)\nnumericals\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s make a loop again but this time let’s practice using the range() verb.\nTasks:\n\nIterate over a range from 50 to 10, stepping down 4 integers at a time.\nAppend the square of each number for each iteration to square_list.\nDisplay the value of square_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using range(50,10,-4)?\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s read in multiple dataframes together and concatenate them vertically to one large dataframe using a loop and the range() function.\nTasks:\n\nThere are 4 dataframes named pkm1.csv to pkm4.csv. that we wish to load in and vertically concatenate together.\nFill in the blanks so the code reads in each dataframe according to their differing file name and concatenates them together.\nDisplay the final dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you adding .csv to the string object?\nAre you using pd.read_csv()?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-range_questions.html#range-questions",
    "href": "modules/module5/module5-10-range_questions.html#range-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "numericals = []\nfor j in range(30,60,5):\n    numericals.append(j)\nnumericals",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-range_questions.html#coding-questions",
    "href": "modules/module5/module5-10-range_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s make a loop again but this time let’s practice using the range() verb.\nTasks:\n\nIterate over a range from 50 to 10, stepping down 4 integers at a time.\nAppend the square of each number for each iteration to square_list.\nDisplay the value of square_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using range(50,10,-4)?\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s read in multiple dataframes together and concatenate them vertically to one large dataframe using a loop and the range() function.\nTasks:\n\nThere are 4 dataframes named pkm1.csv to pkm4.csv. that we wish to load in and vertically concatenate together.\nFill in the blanks so the code reads in each dataframe according to their differing file name and concatenates them together.\nDisplay the final dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you adding .csv to the string object?\nAre you using pd.read_csv()?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-14-nested_loop_questions.html",
    "href": "modules/module5/module5-14-nested_loop_questions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "for i in range(0, 49, 10):\n    print('Hurray')\n    for j in range(0,8,2):\n        print(\"This is fun!\")\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s count how many letters are contained in the dishes of a menu! We have a list named menu that contains multiples lists. We want to calculate how many character are contain in the entire menu.\nTasks:\n\nMake an object named charater_count and give it a value of 0.\nMake an outer loop that iterates over each list of the menu list.\nMake an inner loop that iterates over each element in the nested list and add the length of it to charater_count.\nDisplay the value of charater_count outside both loops.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using 4 indentations for each loop?\nAre you putting character_count = character_count + len(dish) in the inner loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-14-nested_loop_questions.html#nested-loop-questions",
    "href": "modules/module5/module5-14-nested_loop_questions.html#nested-loop-questions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "for i in range(0, 49, 10):\n    print('Hurray')\n    for j in range(0,8,2):\n        print(\"This is fun!\")",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-14-nested_loop_questions.html#making-a-nested-loop",
    "href": "modules/module5/module5-14-nested_loop_questions.html#making-a-nested-loop",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s count how many letters are contained in the dishes of a menu! We have a list named menu that contains multiples lists. We want to calculate how many character are contain in the entire menu.\nTasks:\n\nMake an object named charater_count and give it a value of 0.\nMake an outer loop that iterates over each list of the menu list.\nMake an inner loop that iterates over each element in the nested list and add the length of it to charater_count.\nDisplay the value of charater_count outside both loops.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using 4 indentations for each loop?\nAre you putting character_count = character_count + len(dish) in the inner loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-17-conditional_loop_questions.html",
    "href": "modules/module5/module5-17-conditional_loop_questions.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "parking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = list()\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        parking_tickets.append(True)\n    else:\n        parking_tickets.append(False)\n\nsum(parking_tickets)\n\n\n\n\nparking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = []\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        break\n    else:\n        parking_tickets.append(False)\nsum(parking_tickets)\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nFor the last few Modules, we have been playing with different dataframes. In this question, we have stored them in a list named dataframes.\nLet’s count how many of these dataframes have more than 1000 rows.\nTasks:\n\nMake an object named count and assign it a value of 0.\nLoop through the dataframes and count how many of them have more than 1000 rows.\nHint: you can use .shape[0] to access the number of rows in a dataframe.\ncount should increase by 1 if the dataframe has more than 1000 rows and 0 otherwise.\nDisplay the value of count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nDid you use if data.shape[0] &gt; 1000: as you if statement?\nYou don’t necessarily need an else statement here.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-17-conditional_loop_questions.html#conditional-loop-questions",
    "href": "modules/module5/module5-17-conditional_loop_questions.html#conditional-loop-questions",
    "title": "5.1. Exercises",
    "section": "",
    "text": "parking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = list()\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        parking_tickets.append(True)\n    else:\n        parking_tickets.append(False)\n\nsum(parking_tickets)\n\n\n\n\nparking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = []\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        break\n    else:\n        parking_tickets.append(False)\nsum(parking_tickets)",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-17-conditional_loop_questions.html#practice-iterating-over-a-collection",
    "href": "modules/module5/module5-17-conditional_loop_questions.html#practice-iterating-over-a-collection",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nFor the last few Modules, we have been playing with different dataframes. In this question, we have stored them in a list named dataframes.\nLet’s count how many of these dataframes have more than 1000 rows.\nTasks:\n\nMake an object named count and assign it a value of 0.\nLoop through the dataframes and count how many of them have more than 1000 rows.\nHint: you can use .shape[0] to access the number of rows in a dataframe.\ncount should increase by 1 if the dataframe has more than 1000 rows and 0 otherwise.\nDisplay the value of count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nDid you use if data.shape[0] &gt; 1000: as you if statement?\nYou don’t necessarily need an else statement here.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-20-function_questions.html",
    "href": "modules/module5/module5-20-function_questions.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def add_stars(name):\n    name = \"**\" + name + \"**\"\n    return\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice converting existing code into a function so that it complies with the DRY principle.\nTasks:\n\nUsing the code provided, transform it into a function named uppercase_count\nThe function should take in one argument and return the number of uppercases in the string\nTest it on the string I hope you've Been Learning ALOT!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def uppercase_count(string):?\nAre you returning the object uppercase_num2?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice making a function that returns the BMI (Body Mass Index) given a person’s weight and height.\nTasks:\n\nDefine a function and give it the name BMI_calculator.\nIt should take 2 arguments which can be called height, and weight.\nBMI can be calculated as:\n\n\n\n\n\n\n\n\nMake sure the function returns the calculated BMI.\nOnce you have created your function, use it to calculate the BMI of a person with a height of 62 inches and a weight of 105 lbs.\n\nSave this in an object name bmi_calc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def bmi_calculator(height, weight):\nAre you returning (weight/(height**2)) * 703?\nTo use it, are you running bmi_calculator(62, 105)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-20-function_questions.html#function-questions",
    "href": "modules/module5/module5-20-function_questions.html#function-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def add_stars(name):\n    name = \"**\" + name + \"**\"\n    return",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-20-function_questions.html#coding-questions",
    "href": "modules/module5/module5-20-function_questions.html#coding-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice converting existing code into a function so that it complies with the DRY principle.\nTasks:\n\nUsing the code provided, transform it into a function named uppercase_count\nThe function should take in one argument and return the number of uppercases in the string\nTest it on the string I hope you've Been Learning ALOT!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def uppercase_count(string):?\nAre you returning the object uppercase_num2?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice making a function that returns the BMI (Body Mass Index) given a person’s weight and height.\nTasks:\n\nDefine a function and give it the name BMI_calculator.\nIt should take 2 arguments which can be called height, and weight.\nBMI can be calculated as:\n\n\n\n\n\n\n\n\nMake sure the function returns the calculated BMI.\nOnce you have created your function, use it to calculate the BMI of a person with a height of 62 inches and a weight of 105 lbs.\n\nSave this in an object name bmi_calc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def bmi_calculator(height, weight):\nAre you returning (weight/(height**2)) * 703?\nTo use it, are you running bmi_calculator(62, 105)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "href": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nExplain the DRY principle and how it can be useful.\nWrite conditional statements with if, elif and else to run different code, depending on the input.\nWrite for loops to repeatedly run code.\nDescribe the expected outcome of code with nested loops.\nDefine and use a function that accepts parameters and returns values."
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#repeating-code",
    "href": "modules/module5/slides/module5_06.html#repeating-code",
    "title": "Repeated Iterations (Loops)",
    "section": "Repeating Code",
    "text": "Repeating Code\n\nnumbers = [2, 3, 5]\n\n\n\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nThere are times while coding where we may want to repeat the same action multiple times.\nLet’s say we want to add the square of every number in a list to a new list.\nWe could write code that looked something like this, but it’s problematic for numerous reasons."
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#dont-repeat-yourself-dry-principle",
    "href": "modules/module5/slides/module5_06.html#dont-repeat-yourself-dry-principle",
    "title": "Repeated Iterations (Loops)",
    "section": "Don’t Repeat Yourself (DRY Principle)",
    "text": "Don’t Repeat Yourself (DRY Principle)\nThe DRY in the DRY principle stands for “Don’t Repeat Yourself”. It is the principle of avoiding redundancy within code.\n\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nJust like how we try to reduce, reuse, and recycle waste, coding likes to borrow a similar principle aimed at reducing repetitive code.\nThis motion is called the DRY principle, otherwise known as the “Don’t Repeat Yourself” principle.\nThe premise of this principle to avoid redundancy within code.\nThe code we discussed here is a violation of this principle (known as a WET Solution (“write every time”)).\nThere is a much more efficient method to obtain the same output that avoids typing out multiple iterations of similar code."
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#loops",
    "href": "modules/module5/slides/module5_06.html#loops",
    "title": "Repeated Iterations (Loops)",
    "section": "Loops",
    "text": "Loops\n\nnumbers = [2, 3, 5]\n\n\n\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\n\nsquared = list()\nfor number in numbers: \n    squared.append(number ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nOur example from before takes 3 lines of code to add all the squared values to squared and violates the DRY principle in the process.\nInstead, we can add to the list named squared by using something called a loop to repeat the .append() action over the multiple elements.\nThis only took 2 lines of code, but if the number of elements in the list numbers increased, the code would remain the same. Think how much code writing we would avoid if the list numbers had a length of 1000?!"
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#for-each-loop",
    "href": "modules/module5/slides/module5_06.html#for-each-loop",
    "title": "Repeated Iterations (Loops)",
    "section": "For (Each) Loop",
    "text": "For (Each) Loop\n\nsquared = list()\nfor number in numbers: \n    squared.append(number ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nThis specific type of loop is called a For loop and can be iterated over any type of collection/sequence (these are lists, tuples, and strings).\nIn this example, it’s over the values in a list.\nEvery line of code that is indented is executed for each value in the list (hence the name “for” loops, sometimes also called “for each” loops).\nHere we only have one line that is indented and repetitively executed for each element.\nThe loop ends after the variable has iterated over all the values in the collection/sequence."
  },
  {
    "objectID": "modules/module5/slides/module5_19.html#functions-and-the-dry-principle",
    "href": "modules/module5/slides/module5_19.html#functions-and-the-dry-principle",
    "title": "Introduction to Functions",
    "section": "Functions and the DRY principle",
    "text": "Functions and the DRY principle\n\nnumbers = [ 2, 3, 5]\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\n\nsquared = list()\nfor number in numbers: \n    squared.append(number ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nIn the last section, we discussed how loops helped avoid redundant code.\nWe wrote code, which created a new list containing the square of the elements.\nUsing a loop for this helped our coding style somewhat, but now we have a new problem.\nWhat happens if we want to do the same process to multiple lists all named differently?"
  },
  {
    "objectID": "modules/module5/slides/module5_19.html#syntax",
    "href": "modules/module5/slides/module5_19.html#syntax",
    "title": "Introduction to Functions",
    "section": "Syntax",
    "text": "Syntax\n\ndef squares_a_list(numerical_list):\n    new_squared_list = list()\n    \n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    \n    return new_squared_list\n\n\nLet’s take a look at the how we define a function:\n\n\nLet’s take a look at how we define a function:\n\ndef is a python keyword that tells Python that anything indented after this belongs to a function.\nNext, we give it a Function name. Like any object, we need to name it.\n\nIn this case, we have named our function squares_a_list.\n\nWe cannot name it any existing function names.\n\nFollowing our function name, we specify any Parameters/Arguments that the function requires.\n\nPython calls these “parameters”; however, we have been calling these “arguments”.\n\nThis is what the function needs as an input in order for us to perform some actions on an existing object.\n\nWe can have multiple parameters or no parameters at all.\nIn our function, we have a single parameter named numerical_list.\n\nLastly, we end the line with a Colon\n\nJust like loops and conditionals, a function required its first defining line to end with a colon."
  },
  {
    "objectID": "modules/module5/slides/module5_19.html#designing-good-functions",
    "href": "modules/module5/slides/module5_19.html#designing-good-functions",
    "title": "Introduction to Functions",
    "section": "Designing Good Functions",
    "text": "Designing Good Functions\nThere is some ambiguity for how and when to design a function.\n\nShould squares_a_list() be a function if I’m only ever using it once?\nShould the loop be inside the function, or outside?\n\n\ndef squares_a_list(numerical_list):\n    new_squared_list = list()\n    \n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    \n    return new_squared_list\n\n\nThere is some ambiguity for how and when to design a function.\nFor instance:\n\nShould squares_a_list() be a function if I’m only ever using it once? What about Twice?\nShould the loop be inside the function, or outside?\n\nThis comes down to personal opinion.\nSome may say that the function squares_a_list() does a bit too much to keep things understandable.\nDesigning effective functions will be discussed in Module 6."
  }
]