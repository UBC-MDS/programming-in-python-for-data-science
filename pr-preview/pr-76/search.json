[
  {
    "objectID": "modules/module5/slides/module5_23.html#summary",
    "href": "modules/module5/slides/module5_23.html#summary",
    "title": "What Did we Learn and What to Expect in Assignment 5",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nExplain the DRY principle and how it can be useful.\nWrite conditional statements with if, elif and else to run different code, depending on the input.\nWrite for loops to repeatedly run code.\nDescribe the expected outcome of code with nested loops.\nDefine and use a function that accepts parameters and returns values.\n\n\nThe assignment will concentrate on the learning objectives as well as building knowledge on existing concepts."
  },
  {
    "objectID": "modules/module5/slides/module5_23.html#attribution",
    "href": "modules/module5/slides/module5_23.html#attribution",
    "title": "What Did we Learn and What to Expect in Assignment 5",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module5/slides/module5_16.html#break",
    "href": "modules/module5/slides/module5_16.html#break",
    "title": "Repeated Iterations with Conditions",
    "section": "Break",
    "text": "Break\n\nitem_list = [25, 13, 21, 8, 17, 11, 4]\n\nfor item in item_list:\n    if item &gt; 20:\n        magnitude = 'greater than 20'\n    elif item &gt; 10:\n        magnitude = 'between 10 and 20'\n    else:\n        magnitude = '10 or less'\n    print(magnitude)\n\ngreater than 20\nbetween 10 and 20\ngreater than 20\n10 or less\nbetween 10 and 20\nbetween 10 and 20\n10 or less\n\n\n\nThere are occasions where we may want to stop iterating over an entire sequence once a condition is met.\nPerhaps we only need to find one number that is 10 or less in a list.\nWe can see that even after we located a number that is 10 or less, the loop continues until it reaches the last element. If we have a very large list, it’s inefficient to continue searching for something we have already found."
  },
  {
    "objectID": "modules/module5/slides/module5_16.html#a-stylizing-side-point",
    "href": "modules/module5/slides/module5_16.html#a-stylizing-side-point",
    "title": "Repeated Iterations with Conditions",
    "section": "A stylizing side point",
    "text": "A stylizing side point\n\nitem_list = [25, 13, 21, 8, 17, 11, 4]\n\n\n\nnumber_over_20 = 0\n\nfor item in item_list:\n    if item &gt; 20:\n        number_over_20 = number_over_20 + item\n        \nnumber_over_20\n\n46\n\n\n\nInstead of writing this line:\nnumber_over_20 = number_over_20 + item\n\nWe can write:\nnumber_over_20 +=  item\n\nYou’ve seen that we often add to an existing object when we use loops.\nFor instance, when we count the number of items that are over 20 in the list item_list.\nWe keep the object name number_over_20 and just add to it while iterating through the loop.\nInstead of writing the line:\nnumber_over_20 = number_over_20 + item\nWe can avoid writing the object name twice and write a more stylized approach:\nnumber_over_20 +=  item\nThis simply means that we are adding item to the number_over_20 object."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#range",
    "href": "modules/module5/slides/module5_09.html#range",
    "title": "Range, Dictionaries and Comprehensions",
    "section": "Range",
    "text": "Range\n\nfor i in range(5):\n    print(i)\n\n0\n1\n2\n3\n4\n\n\n\n\nfor i in range(50, 101, 10):\n    print(i)\n\n50\n60\n70\n80\n90\n100\n\n\n\nOften, we just want to do something 5 times without looping over a collection.\nThe most common way to do that is to use range(), which automatically generates a collection of the integers in some sort of sequence, generally 0, to N-1.\nWe can also specify a start value, an end value and a skip-by value with range."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#looping-in-a-dictionary",
    "href": "modules/module5/slides/module5_09.html#looping-in-a-dictionary",
    "title": "Range, Dictionaries and Comprehensions",
    "section": "Looping in a dictionary",
    "text": "Looping in a dictionary\n\ncereals = {'Special K': 4, 'Lucky Charms': 7, 'Cheerios': 2, 'Wheaties': 3}\ncereals.items()\n\ndict_items([('Special K', 4), ('Lucky Charms', 7), ('Cheerios', 2), ('Wheaties', 3)])\n\n\n\n\ncereals = {'Special K': 4, 'Lucky Charms': 7, 'Cheerios': 2, 'Wheaties': 3}\n\nfor cereal, stock in cereals.items():\n    print( cereal  + \" has \" + str(stock) + \" available\")\n\nSpecial K has 4 available\nLucky Charms has 7 available\nCheerios has 2 available\nWheaties has 3 available\n\n\n\nWe can also loop over the key-value pairs of a dictionary using .items().\nWe saw this verb back in module 4 when we learned about dictionaries.\nSince each key-value pair has 2 elements in it, we need to specify a variable for each item in the tuple:\n\nOne for the dictionary key\nOne for the dictionary values\n\nHere we assign an object named cereal for the items in the first position of the tuple, which are the dictionary keys, and an object named stock for the second index in a tuple, which are the dictionary values."
  },
  {
    "objectID": "modules/module5/slides/module5_09.html#comprehensions",
    "href": "modules/module5/slides/module5_09.html#comprehensions",
    "title": "Range, Dictionaries and Comprehensions",
    "section": "Comprehensions",
    "text": "Comprehensions\n\nnumbers = [2, 3, 5]\n\n\n\nsquared = list()\n\nfor number in numbers: \n    squared.append(number ** 2)\n    \nsquared\n\n[4, 9, 25]\n\n\n\n\nsquared = [number ** 2 for number in numbers]\nsquared\n\n[4, 9, 25]\n\n\n\nWe learned in the last Module that we can create if and else conditions in a single line of code, and we can do something similar with basic loops.\nComprehensions allow us to build lists/sets/dictionaries in one convenient, compact line of code.\nIn the last set of slides, we made a loop that calculates the square of each element from a list and adds them to a new list name squared.\nThis can be done using comprehension, so now it executes using the single line of code."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#syntax",
    "href": "modules/module5/slides/module5_01.html#syntax",
    "title": "Making Choices with Conditional Statements",
    "section": "Syntax",
    "text": "Syntax\nmy_name = 'Hayley' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\nelif my_name.lower() == 'totoro':\n    print('Interesting, I loved that movie!')\nelse:\n    print(\"That's a great name.\")\n  \nprint('Nice to meet you!')\nMy name is Hayley too!\nNice to meet you!\n\nPython conditional statements contains 2 important things:\n\nA strict structure.\nThe keyword if and optional keywords else and elif."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#structure",
    "href": "modules/module5/slides/module5_01.html#structure",
    "title": "Making Choices with Conditional Statements",
    "section": "Structure",
    "text": "Structure\n\nmy_name = 'Hayley' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\n\nMy name is Hayley too!\n\n\n\nThe structure of a choice is as follows:\nif SOME_BOOLEAN:\n    statement body \n\nThe structure of a choice is as follows:\nif SOME_BOOLEAN:\n    statement body \nEach conditional expression must end with a colon : and code to be executed if the condition is met must all must be indented with 4 spaces (or consistent indentation) in the statement body.\nIn the example above:\nif my_name.lower() == 'hayley' is the Boolean statement and\nprint(\"My name is Hayley too!\") is the statement body."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#keywords---if-else",
    "href": "modules/module5/slides/module5_01.html#keywords---if-else",
    "title": "Making Choices with Conditional Statements",
    "section": "Keywords - if, else",
    "text": "Keywords - if, else\nmy_name = 'Mia' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\nelif my_name.lower() == 'totoro':\n    print('Interesting, I loved that movie!')\nelse:\n    print(\"That's a great name.\")\n  \nprint('Nice to meet you!')\nThat's a great name.\nNice to meet you!\n\nAn if keyword is needed for any conditional.\nIf the Boolean value is True, the body of the statement (which is anything indented under it) will be executed.\nIf the expression is False, the body of the statement is not executed, and it continues to the next line of non-indented code outside the body.\nThe else expression will execute if the conditional expressions above it are False.\nThe keyword else can only occur once following an if condition and are optional to the code."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#keywords---elif",
    "href": "modules/module5/slides/module5_01.html#keywords---elif",
    "title": "Making Choices with Conditional Statements",
    "section": "Keywords - elif",
    "text": "Keywords - elif\nmy_name = 'Totoro' \n\nif my_name.lower() == 'hayley':\n    print('My name is Hayley too!')\nelif my_name.lower() == 'totoro':\n    print('Interesting, I loved that movie!')\nelse:\n    print(\"That's a great name.\")\n  \nprint('Nice to meet you!')\nInteresting, I loved that movie!\nNice to meet you!\n\nelif stands for else if. It allows us to check if different conditions evaluate to True.\nWhen the elif expression evaluates to True, then the body of the statement is executed, just like an if statement.\nIn the case we saw before when my_name = 'Totoro', the elif condition my_name.lower() == 'totoro' evaluates to True."
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#order-matters",
    "href": "modules/module5/slides/module5_01.html#order-matters",
    "title": "Making Choices with Conditional Statements",
    "section": "Order matters",
    "text": "Order matters\n\nitem = 13 \n\nif item &gt; 10:\n    magnitude = 'Between 10 and 20'\nelif item &gt; 20:\n    magnitude = 'Greater than 20'\nelse:\n    magnitude = '10 or less'\n \nmagnitude\n\n'Between 10 and 20'\n\n\n\nThe order we chose for the statement for the if and elif statements is important and can result in different outputs.\nLet’s explore this in the next example using inequalities with numbers.\nIn this case, our item object, which equals 13 here, is greater than 10, so our first condition holds true, and so magnitude is assigned a value of 'Between 10 and 20'"
  },
  {
    "objectID": "modules/module5/slides/module5_01.html#inline",
    "href": "modules/module5/slides/module5_01.html#inline",
    "title": "Making Choices with Conditional Statements",
    "section": "Inline",
    "text": "Inline\n\nitem = 13\n\n\n\nif  item &gt; 10:\n    magnitude = 'Greater than 10'\nelse:\n    magnitude = '10 or less'\n    \nmagnitude\n\n'Greater than 10'\n\n\n\n\nmagnitude = \"Greater than 10\" if item &gt; 10 else \"10 or less\"\nmagnitude\n\n'Greater than 10'\n\n\n\nIn situations where we have only if and else statements, we have the ability to put it all in a single line of code.\nLet’s test this on our object item.\nThe original conditional statements below checks if the item is greater than 10 and assigns a value of greater than 10 if it’s True and a value of 10 or less otherwise.\nThe 4 lines used for the conditional statements can be compressed into a single one.\nBoth syntaxes are acceptable, depending on your preference.\nThis type of syntax is only possible for decisions that involve only if and else conditions."
  },
  {
    "objectID": "modules/module5/module5-23-what_did_we_just_learn.html",
    "href": "modules/module5/module5-23-what_did_we_just_learn.html",
    "title": "7. What Did We Just Learn?",
    "section": "",
    "text": "7. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "7. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module5/module5-19-functions.html",
    "href": "modules/module5/module5-19-functions.html",
    "title": "6. Functions",
    "section": "",
    "text": "6. Functions\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "6. Functions"
    ]
  },
  {
    "objectID": "modules/module5/module5-16-repeated_iterations_with_conditions.html",
    "href": "modules/module5/module5-16-repeated_iterations_with_conditions.html",
    "title": "5. Repeated Iterations with Conditions",
    "section": "",
    "text": "5. Repeated Iterations with Conditions\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "5. Repeated Iterations with Conditions"
    ]
  },
  {
    "objectID": "modules/module5/module5-13-nested_loops.html",
    "href": "modules/module5/module5-13-nested_loops.html",
    "title": "4. Nested Loops",
    "section": "",
    "text": "4. Nested Loops\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "4. Nested Loops"
    ]
  },
  {
    "objectID": "modules/module5/module5-09-range_dictionaries_and_comprehensions.html",
    "href": "modules/module5/module5-09-range_dictionaries_and_comprehensions.html",
    "title": "3. Range, Dictionaries and Comprehensions",
    "section": "",
    "text": "3. Range, Dictionaries and Comprehensions\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "3. Range, Dictionaries and Comprehensions"
    ]
  },
  {
    "objectID": "modules/module5/module5-06-repeated_iterations_(loops).html",
    "href": "modules/module5/module5-06-repeated_iterations_(loops).html",
    "title": "2. Repeated Iterations (Loops)",
    "section": "",
    "text": "2. Repeated Iterations (Loops)\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "2. Repeated Iterations (Loops)"
    ]
  },
  {
    "objectID": "modules/module5/module5-01-making_choices_with_conditional_statements.html",
    "href": "modules/module5/module5-01-making_choices_with_conditional_statements.html",
    "title": "1. Making Choices with Conditional Statements",
    "section": "",
    "text": "1. Making Choices with Conditional Statements\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "1. Making Choices with Conditional Statements"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#summary",
    "href": "modules/module1/slides/module1_34.html#summary",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Summary",
    "text": "Summary\nStudents are now expected to be able to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\nLoad the pandas library into Python.\nDemonstrate indexing and slicing with .loc[] and .iloc[].\nDemonstrate Selecting columns of a dataframe using df[] notation.\nObtain values from a dataframe using .loc[].\nSort a dataframe using .sort_values().\nCreate simple summary statistics using .describe().\nConstruct simple visualizations using Altair.\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#assignment-instructions",
    "href": "modules/module1/slides/module1_34.html#assignment-instructions",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Assignment Instructions",
    "text": "Assignment Instructions\nThe assignment will concentrate not only on the learning objectives above but also\n\nNavigating a Jupyter Notebook\nUnderstanding cells\nCreating Markdown cells and coding cells"
  },
  {
    "objectID": "modules/module1/slides/module1_34.html#attribution",
    "href": "modules/module1/slides/module1_34.html#attribution",
    "title": "What did we learn and what to expect in assignment 1",
    "section": "Attribution",
    "text": "Attribution\nThe cereal dataset:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported"
  },
  {
    "objectID": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "href": "modules/module1/slides/module1_29.html#saving-a-dataframe",
    "title": "Frequency Tables and Writing CSVs",
    "section": "Saving a dataframe",
    "text": "Saving a dataframe\n\nmfr_freq.to_csv('data/mfr_frequency.csv', index=False)\n\n\nSometimes it is useful to save a new dataframe to a file like a csv file for future use by you or somebody else.\nWe can do this using a method called .to_csv().\nWe put our desired csv file name in quotations within the parentheses and follow it with the argument index=False so we don’t export our index column which is just a column of numbers."
  },
  {
    "objectID": "modules/module1/slides/module1_24.html#sorting",
    "href": "modules/module1/slides/module1_24.html#sorting",
    "title": "Sorting Dataframes",
    "section": "Sorting",
    "text": "Sorting\n\ncereal.sort_values(by='rating')\n\n\n\n\n\n\n\n\nname\nmfr\ncalories\nshelf\nweight\ncups\nrating\n\n\n\n\n10\nCap'n'Crunch\nQ\n120\n2\n1.0\n0.75\n18.042851\n\n\n12\nCinnamon Toast Crunch\nG\n120\n2\n1.0\n0.75\n19.823573\n\n\n35\nHoney Graham Ohs\nQ\n120\n2\n1.0\n1.00\n21.871292\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n65\nShredded Wheat spoon size\nN\n90\n1\n1.0\n0.67\n72.801787\n\n\n64\nShredded Wheat 'n'Bran\nN\n90\n1\n1.0\n0.67\n74.472949\n\n\n3\nAll-Bran with Extra Fiber\nK\n50\n3\n1.0\n0.50\n93.704912\n\n\n\n\n77 rows × 7 columns\n\n\n\n\nWhen we read in our data, it is generally ordered in the same way it is stored.\nWe can easily sort the rows of a dataframe based on the values within a column.\nThe verb that we use for that is .sort_values().\nFor example, if we wanted to order the cereals based on rating, we could do so by using the argument by within the .sort_values() verb.\nThis allows us to see the cereals with lower ratings on the top."
  },
  {
    "objectID": "modules/module1/slides/module1_13.html#unordered-indexing",
    "href": "modules/module1/slides/module1_13.html#unordered-indexing",
    "title": "Selecting Using .loc[]",
    "section": "Unordered Indexing",
    "text": "Unordered Indexing\n\ncereal\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n74\nWheat Chex\nR\nCold\n100\n...\n1\n1.0\n0.67\n49.787445\n\n\n75\nWheaties\nG\nCold\n100\n...\n1\n1.0\n1.00\n51.592193\n\n\n76\nWheaties Honey Gold\nG\nCold\n110\n...\n1\n1.0\n0.75\n36.187559\n\n\n\n\n77 rows × 16 columns\n\n\n\n\nHere we have our trusty cereal dataframe.\nWhat would we do if we wanted to select columns and rows that don’t fall consecutively or if we wanted to rearrange them?"
  },
  {
    "objectID": "modules/module1/slides/module1_07.html#cereal-data",
    "href": "modules/module1/slides/module1_07.html#cereal-data",
    "title": "Slicing with Pandas Using .loc[]",
    "section": "Cereal Data",
    "text": "Cereal Data\n\nimport pandas as pd\n  \ncereal = pd.read_csv('data/cereal.csv')\ncereal.head()\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.0\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.0\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.0\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.0\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.0\n0.75\n34.384843\n\n\n\n\n5 rows × 16 columns\n\n\n\n\nAttribution:\n“80 Cereals” (c) by Chris Crawford is licensed under Creative Commons Attribution-ShareAlike 3.0 Unported\n\nCongratulations on writing your first code!\nWe have read in our data, and we know the dimensions. Well, now what?\nLet’s go over how we would index, slice, and select certain columns or rows of our data.\nLet’s start by importing pandas and loading in a dataset named cereal.csv, and we will save it as cereal.\nWe can see all the columns and the first 5 rows of the dataframe using .head()\nLet’s say we only want certain rows, however, of the dataframe or certain columns.\nWe talked about how .head() will generate the first few rows of a dataframe (5 as default), but what if we wanted the rows from 5-10?\nThe first column of this dataframe is called the index.\nEach row has a label (the index) as well as a position. In this case, the index label of an observation is the same as it’s position.\nThis doesn’t always have to be the case. We can assign another column as the index; however, we will wait to discuss this in the next module."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "href": "modules/module1/slides/module1_01.html#what-is-a-dataframe",
    "title": "What is a dataframe?",
    "section": "What is a dataframe?",
    "text": "What is a dataframe?\n\n\nOften, the first thing we need to do in data analysis is to load in data.\nIn this case, we will be using the programming language Python.\nWhen we bring spreadsheet-like data, into Python, it is generally shaped like a rectangle (think of Microsoft Excel tables for example) it is represented as what we call a dataframe object. It is very similar to a spreadsheet."
  },
  {
    "objectID": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "href": "modules/module1/slides/module1_01.html#what-is-a-csv-file",
    "title": "What is a dataframe?",
    "section": "What is a CSV file?",
    "text": "What is a CSV file?\n\n\n\nThe first kind of data we will learn how to load into Python as a dataframe is the spreadsheet-like comma-separated values format (.csv for short).\nThese files have names ending in .csv, and can be opened open and saved from common spreadsheetlike programs like Microsoft Excel and Google Sheets.\nFor example, we will be importing the .csv file you saw in the first slide named “candybars.csv”.\nIf we were to open this data in a plain text editor, we would be able to see each row on its own line, and each entry in the table separated by a comma."
  },
  {
    "objectID": "modules/module1/module1-34-what_did_we_just_learn.html",
    "href": "modules/module1/module1-34-what_did_we_just_learn.html",
    "title": "13. What Did We Just Learn?",
    "section": "",
    "text": "13. What Did We Just Learn?\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "13. What Did We Just Learn?"
    ]
  },
  {
    "objectID": "modules/module1/module1-31-quick_viz_with_altair.html",
    "href": "modules/module1/module1-31-quick_viz_with_altair.html",
    "title": "12. Quick Viz with Altair",
    "section": "",
    "text": "12. Quick Viz with Altair\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "12. Quick Viz with Altair"
    ]
  },
  {
    "objectID": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "href": "modules/module1/module1-29-frequency_tables_and_writing_csvs.html",
    "title": "11. Frequency Tables and Writing CSVs",
    "section": "",
    "text": "11. Frequency Tables and Writing CSVs\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "11. Frequency Tables and Writing CSVs"
    ]
  },
  {
    "objectID": "modules/module1/module1-26-summary_statistics.html",
    "href": "modules/module1/module1-26-summary_statistics.html",
    "title": "10. Summary Statistics",
    "section": "",
    "text": "10. Summary Statistics\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "10. Summary Statistics"
    ]
  },
  {
    "objectID": "modules/module1/module1-24-sorting_dataframes.html",
    "href": "modules/module1/module1-24-sorting_dataframes.html",
    "title": "9. Sorting Dataframes",
    "section": "",
    "text": "9. Sorting Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "9. Sorting Dataframes"
    ]
  },
  {
    "objectID": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "href": "modules/module1/module1-20-slicing_and_selecting_using_df.iloc[].html",
    "title": "8. Slicing and Selecting Using df.iloc[]",
    "section": "",
    "text": "8. Slicing and Selecting Using df.iloc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "8. Slicing and Selecting Using df.iloc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-18-selecting_a_single_column.html",
    "href": "modules/module1/module1-18-selecting_a_single_column.html",
    "title": "7. Selecting a Single Column",
    "section": "",
    "text": "7. Selecting a Single Column\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "7. Selecting a Single Column"
    ]
  },
  {
    "objectID": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "href": "modules/module1/module1-16-obtaining_dataframe_values.html",
    "title": "6. Obtaining Dataframe Values",
    "section": "",
    "text": "6. Obtaining Dataframe Values\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "6. Obtaining Dataframe Values"
    ]
  },
  {
    "objectID": "modules/module1/module1-13-selecting_using_.loc[].html",
    "href": "modules/module1/module1-13-selecting_using_.loc[].html",
    "title": "5. Selecting Using .loc[]",
    "section": "",
    "text": "5. Selecting Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "5. Selecting Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "href": "modules/module1/module1-11-slicing_columns_using_.loc[].html",
    "title": "4. Slicing Columns Using .loc[]",
    "section": "",
    "text": "4. Slicing Columns Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "4. Slicing Columns Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "href": "modules/module1/module1-07-slicing_with_pandas_using_.loc[].html",
    "title": "3. Slicing with Pandas Using .loc[]",
    "section": "",
    "text": "3. Slicing with Pandas Using .loc[]\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "3. Slicing with Pandas Using .loc[]"
    ]
  },
  {
    "objectID": "modules/module1/module1-03-introduction_to_pandas.html",
    "href": "modules/module1/module1-03-introduction_to_pandas.html",
    "title": "2. Introduction to Pandas",
    "section": "",
    "text": "2. Introduction to Pandas\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "2. Introduction to Pandas"
    ]
  },
  {
    "objectID": "modules/module1/module1-01-introduction_to_dataframes.html",
    "href": "modules/module1/module1-01-introduction_to_dataframes.html",
    "title": "1. Introduction to Dataframes",
    "section": "",
    "text": "1. Introduction to Dataframes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "1. Introduction to Dataframes"
    ]
  },
  {
    "objectID": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "href": "modules/module0/slides/module0_01.html#course-learning-outcomes",
    "title": "Welcome!",
    "section": "Course Learning Outcomes",
    "text": "Course Learning Outcomes\n\nDefine tidy data and explain why it is an optimal format for data analysis.\nTransform data into the tidy data format using pandas.\nDemonstrate fundamental programming concepts such as loops and conditionals.\nUnderstand the key data structures in Python.\nRead data into Python data from vanilla (e.g., .csv) and non-standard plain text files, as well as common spreadsheet file types (e.g., .xls).\nConstruct simple plots using Altair\nManipulate a single data table by:\n7.1 Filtering rows based on a criterion or combination of criteria.\n7.2 Selecting variables.\n7.3 Creating new variables and modifying pre-existing ones.\n7.4 Rearranging the observations or variables by sorting.\n\nManage and manipulate data with dates and times, missing values and categorical variables as well as renaming dataframe columns.\nProduce human-readable code that incorporates best practices of programming and coding style."
  },
  {
    "objectID": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "href": "modules/module0/module0-01-programming_in_python_for_data_science.html",
    "title": "1. Programming in Python for Data Science",
    "section": "",
    "text": "1. Programming in Python for Data Science\n\nVideoSlides",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "1. Programming in Python for Data Science"
    ]
  },
  {
    "objectID": "modules/index.html",
    "href": "modules/index.html",
    "title": "Welcome to Programming in Python for Data Science!",
    "section": "",
    "text": "Welcome to Programming in Python for Data Science!\nThis course is part of the Key Capabilities for Data Science program and will teach you how to conduct data analysis in Python. During the course, you will work with powerful Python packages made for data-science, including Pandas for processing tabular data, Altair for data visualization and NumPy for working with numerical data types.\nYou will also learn about iteration, flow control, and the data types relevant to data exploration and analysis. You will leave this course capable of processing raw data into a format suitable for analysis, writing your own analysis functions, and deriving data-driven insights via the creation of interactive visualizations and summary tables.\nCourse prerequisites: None",
    "crumbs": [
      "**M0. Welcome to Programming in Python for Data Science**",
      "0. Welcome!"
    ]
  },
  {
    "objectID": "modules/module1/module1-00-module_learning_outcomes.html",
    "href": "modules/module1/module1-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html",
    "href": "modules/module1/module1-04-definitions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-04-definitions.html#coding-questions",
    "href": "modules/module1/module1-04-definitions.html#coding-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\nLet’s try importing pandas and loading in our data.\nTasks:\n\nImport pandas as pd.\nLoad in data named canucks.csv.\nSave the dataframe as hockey_players.\nDisplay the first 5 rows of the dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your dataframe as hockey_players?\nAre you using pd.read_csv()?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat are the column names of the hockey_players dataframe?\nTasks:\n\nFind the column names of hockey_players and save it as columns_hockey.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as columns_hockey?\nAre you using .columns?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWhat is the shape of the hockey dataframe?\nTasks:\n\nFind the shape of hockey_players and save the result as hockey_shape.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects as hockey_shape?\nAre you using .shape?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#slicing-and-dicing-practice",
    "title": "3.1. Exercises",
    "section": "",
    "text": "My dataframe object name is fruit_salad.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "href": "modules/module1/module1-08-slicing_and_dicing_practice.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nThis following code chunk will be used to give you an output of the data hockey_players. This will help answer and code in the exercises following it.\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Guillaume Brisebois to Quinn Hughes.\nSave the new sliced dataframe as object benched_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nUsing our hockey_players data from the last few questions, let’s try slicing it.\nTasks:\n\nSelect the players Adam Gaudette to Brandon Sutter and the columns Player, No., Age, Height, Weight and Country.\nSave the new sliced dataframe as object star_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Check your spelling and punctuation in row and column labels.\nDid you slice both columns and rows?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html",
    "href": "modules/module1/module1-12-slicing_columns_only.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "href": "modules/module1/module1-12-slicing_columns_only.html#slicing-columns-only",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Using my dataframe object named fruit_salad, let’s answer some slicing questions.\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#rearranging-columns-and-rows",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Using my fruit_salad dataframe from earlier…\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "href": "modules/module1/module1-14-rearraging_columns_and_rows.html#practicing-selecting-using-index-labels",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help answer the next question.\n\n\n\n\n\n\nLet’s select specific players and columns.\nTasks:\n\nSelect the players Zack MacEwan, Jake Virtanen and Jordie Benn in that order and the columns Height, Weight, Salary and Country in that order.\nSave the new sliced dataframe as object penalty_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[]?\nAre you using the correct dataframe labels? Are you using names as your row labels?\nDid you slice both columns and rows?\nAre you using 2 sets of [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html",
    "href": "modules/module1/module1-17-practicing_selecting_values.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "href": "modules/module1/module1-17-practicing_selecting_values.html#practicing-selecting-values",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nUsing our hockey_players data, try finding the following values and save them in their repective object names.\nTasks:\n\nSaveThatcher Demko’s salary in an object nameddemko_paid.\nHow old is Zack MacEwen? Save it as object macewen_age.\nWhat position does Jacob Markstrom play? Save this as object markstrom_position.\nWhen was Justin Bailey born? Save it as an object named bailey_birth.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .loc[] to select the specific values?\nAre you using single [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html",
    "href": "modules/module1/module1-19-practicing_selecting.html",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "href": "modules/module1/module1-19-practicing_selecting.html#practicing-selecting",
    "title": "7.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s try selecting a specific column.\nTasks:\n\nSelect all the rows from column Salary only and save it as player_cost. (Hint: you don’t need .loc[] here)\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using the correct dataframe labels?\nAre you using double [] brackets?\nAre you using “quotations”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 7.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-and-selecting-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Here is our fruit_salad data again:\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "href": "modules/module1/module1-21-practicing_slicing_and_selecting_using_index_position.html#practicing-slicing-using-index-position",
    "title": "8.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nUse the output of the following code chunk to help complete the next tasks.\n\n\n\n\n\n\nIn previous questions, we tried slicing using index labels on our Canack dataset. Let’s try something similar but using the index positions.\nTasks:\n\nSlice the players Jacob Markstrom to Tim Schaller and the columns Player to Height.\nSave the new sliced dataframe as object skilled_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you going 1 index past the bound you want?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThese unfortunate Canuck players have various forms of injuries, so let’s make a dataframe of players who have injuries by selecting them using their index position.\nTasks:\n\nSelect Antoine Roussel, Thatcher Demko, Jake Virtanen and Jay Beagle with only columns Player, Birth Date, Experience and Salary in the specified order.\nSave this dataframe as object injured_players.\nDon’t forget to display it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .iloc[]?\nAre you using the correct dataframe positions? Are you counting starting from 0?\nAre you using two sets of [] square brackets within your iloc brackets?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 8.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html",
    "href": "modules/module1/module1-25-practice_sorting.html",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "href": "modules/module1/module1-25-practice_sorting.html#practice-sorting",
    "title": "9.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s sort our hockey dataframe.\nTasks:\n\nSort your hockey_players dataframe by Salary from most to least and name your new dataframe as rich_players.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using sort_values?\nAre you using the argument ascending=False to order Salary in descending order?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 9.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#fruit-bowl-statistics",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Bringing back our fruit_salad dataframe\n           name    colour    location    seed   shape  sweetness   water-content  weight\n0         apple       red     canada    True   round     True          84         100\n1        banana    yellow     mexico   False    long     True          75         120\n2    cantaloupe    orange      spain    True   round     True          90        1360\n3  dragon-fruit   magenta      china    True   round    False          96         600\n4    elderberry    purple    austria   False   round     True          80           5\n5           fig    purple     turkey   False    oval    False          78          40\n6         guava     green     mexico    True    oval     True          83         450\n7   huckleberry      blue     canada    True   round     True          73           5\n8          kiwi     brown      china    True   round     True          80          76\n9         lemon    yellow     mexico   False    oval    False          83          65",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "href": "modules/module1/module1-27-fruit_bowl_statistics.html#using-df.describe",
    "title": "10.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nTry to obtain some statistics from the hockey data.\nTasks:\n\nFind the statistics of both categorical and quantitative columns. Save the dataframe in an object called hockey_stats.\nDisplay it.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are saving your objects correctly?\nAre you using using .describe(include=\"all\") ?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTasks:\n\nFind the total salary of the team and save it in an object called player_cost.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using df[[\"column-name\"]].sum() to find the total of a column?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 10.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "href": "modules/module1/module1-30-practicing_frequency_tables.html#practicing-frequency-tables",
    "title": "11.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\n\n\n\n\n\n\nLet’s get the frequencies of some of our values! We spoke in the slides about the steps we needed to follow to get a frequency table.\nTasks:\n\nLet’s make an object named position_column that consists of just the Position column. Note we will be using this for value_counts so we must do this with only using single [] brackets.\nFind the frequencies of the position for the hockey team using .value_counts() and save it as position_freq.\nExport position_freq to a csv named position_frequencies.csv using .to_csv().\nDon’t forget to display it.\n\nIf you get a warning along with your output, that’s fine. We will explain why this happens further in the course.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using single [] brackets for position_column?\nAre you using .to_csv() to save your csv?\nAre you naming your csv correctly as “position_frequencies.csv”?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 11.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html",
    "href": "modules/module1/module1-32-practicing_bar_charts.html",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time, could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nYou are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOk, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-bar-charts",
    "title": "12.1. Exercises",
    "section": "",
    "text": "You are going to load the canucks.csv from the questions that we exported as a csv in the last section and create a bar plot of the Positions column.\nTasks:\n\nLoad in the csv named canucks.csv and save it as hockey_players.\nUse alt.Chart() to create a chart object.\nUse .mark_bar() to create a bar plot.\nUse .encode() to specify the Position column for plotting.\nAssign a color as Teal and set opacity to 0.5.\nDon’t forget to add a title as “Canuck Player Positions”..\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you sure you are using opacity to set the opacity?\nAre you using the correct Dataframe?\nDid you assign the correct values to color and opacity?\nAre you using the .properties(title=...) to assign the title?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "href": "modules/module1/module1-32-practicing_bar_charts.html#practicing-scatterplots",
    "title": "12.1. Exercises",
    "section": "",
    "text": "Ok, let’s try our luck with a scatterplot. We want to explore the relationship between Age and Salary.\nTasks:\n\nPlots x as Age and y as Salary using a scatterplot and save the plot in an object named age_salary_scatter.\nUse the mark_circle(...) to specify a scatter plot.\nSet color to Darkblue and opacity to 0.4.\nDon’t forget to assign a title as “Canuck players Age vs. Salary”.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using .mark_circle()\nAre you sure you using opacity to set the opacity?\nAre you using the correct Dataframe?\nAre you assigning variables x and y to the correct columns\nDid you assign the correct values to color, title and opacity?\nAre you spelling color in the American manner?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**M1. Python & Pandas - An Unexpected Friendship**",
      "&nbsp;&nbsp; 12.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "href": "modules/module1/slides/module1_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nDescribe the components of a Dataframe.\nRead a standard .csv file using Pandas pd.read_csv().\n\nLoad the pandas library into Python.\n\nDemonstrate indexing and slicing with .loc[] and .iloc[].\n\nDemonstrate Selecting columns of a dataframe using df[] notation.\n\nObtain values from a dataframe using .loc[].\n\nSort a dataframe using .sort_values().\n\nCreate simple summary statistics using .describe().\n\nConstruct simple visualizations using Altair.\n\nCreate a .csv file from a dataframe using .to_csv()."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#importing-pandas",
    "href": "modules/module1/slides/module1_03.html#importing-pandas",
    "title": "What is Pandas?",
    "section": "Importing pandas",
    "text": "Importing pandas\n\nimport pandas as pd\n\n\nTo analyze dataframes and load these csv files, we need to make sure that we bring in the pandas library into Python.\nBefore we start writing any valuable code for loading data and doing data analysis we need to import it with the following code."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#reading-in-data",
    "href": "modules/module1/slides/module1_03.html#reading-in-data",
    "title": "What is Pandas?",
    "section": "Reading in Data",
    "text": "Reading in Data\n\ncandy = pd.read_csv('data/candybars.csv')\n\n\n\ncandy\n\n\n\n\n\n\n\n\nname\nweight\nchocolate\npeanuts\ncaramel\navailable_canada_america\n\n\n\n\n0\nCoffee Crisp\n50\n1\n0\n0\nCanada\n\n\n1\nButterfinger\n184\n1\n1\n1\nAmerica\n\n\n2\nSkor\n39\n1\n0\n1\nBoth\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n22\nAlmond Joy\n46\n1\n0\n0\nAmerica\n\n\n23\nOh Henry\n51\n1\n1\n1\nBoth\n\n\n24\nCookies and Cream\n43\n0\n0\n0\nBoth\n\n\n\n\n25 rows × 6 columns\n\n\n\n\nNext we can bring in our data named candybars which is stored as a .csv file.\nLet’s break this up:\n\npd is the short form for pandas, which we are using to manipulate our dataframe.\n\nread_csv() is the tool that does the job and, in this case, it is reading in the csv file named candybars.csv.\n\ncandy is The dataframe is now saved as an object called candy.\n\nThe dataframe is stored in an object named candy and we can inspect in by “calling” the object name.\nIn these slides we can differentiate between the code that we typed in with a light grey background and it’s output which has a dark grey background.\nFrom this dataframe, we can see that there are 25 different candy bars and 6 columns."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "href": "modules/module1/slides/module1_03.html#functionsmethods-and-attributes",
    "title": "What is Pandas?",
    "section": "Functions/Methods and Attributes",
    "text": "Functions/Methods and Attributes\n\nAttributes\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\n\nFunctions\nIn the example of pd.read_csv(), this function does the action of reading in our data.\n\nSomething you may have noticed is that when we use pd.read_csv() we put our instructions within the parentheses, whereas, when we use .shape or .head() the object that we are operating on comes before our desired command.\nIn Python, we use functions, methods and attributes. These are special words in Python that take instructions (we call these arguments) and do something.\nAttributes can be distinguished from methods and functions as they do not have parentheses.\nThey can be thought of as nouns or adjectives that describe an object.\nTake candy.shape as an example.\nIn this case, our dataframe candy is our object and .shape is the attribute describing it.\nFunctions and methods have parentheses.\nThey can be thought of as verbs that complete an action.\nIn the example of pd.read_csv(), this function does the action of reading in our data.\nThis is going to be discussed in more detail later in the course but now, simply be aware of the way we write the different instructions."
  },
  {
    "objectID": "modules/module1/slides/module1_03.html#comments",
    "href": "modules/module1/slides/module1_03.html#comments",
    "title": "What is Pandas?",
    "section": "Comments",
    "text": "Comments\n\n# This line does not execute anything. \n\n\n\ncandy.shape  # This will output the shape of the dataframe\n\n\nWhile we write code, it’s often useful to annotate it or include information for humans that we do not want to executed.\nThe easiest way to do this is with a hash (#) symbol. This creates a single line comment and prevents anything written after it from being executed by Python.\nWe use comments frequently in the exercises to help you understand what to do and what our intentions are.\nIt’s good practice to use them to explain our code so if we or someone else wants to read it at a later date, it’s easier to understand."
  },
  {
    "objectID": "modules/module1/slides/module1_11.html#so-far",
    "href": "modules/module1/slides/module1_11.html#so-far",
    "title": "Slicing Only Columns Using .loc[]",
    "section": "So Far",
    "text": "So Far\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\n\ncereal.loc['row name start':'row name end', 'column name start':'column name end']\n\nIf we aren’t slicing any columns, but we are slicing rows we can shorten that to\n\ndf.loc['row name start':'row name end']\n\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify we want all the row first with just a colon : followed by interval of the columns:\n\ndf.loc[:, 'column name start':'column name end']\n\nWe can read : as “to”.\nIf the indices are labeled with numbers, we do not need “quotations” when calling them. This is only when the labels are using letters.\n\n\nLet’s talk about what we have covered so far.\n\n.loc[] is used to slice columns and rows by label and within an interval.\nWe always specify row indexing first, then columns.\nIf we are not slicing any columns, but we are slicing rows we only need to specify the row labels.\nHowever, the reverse is not true. If we want all the rows with only specific columns, we specify rows first and therefore we would need to make it clear with a colon first that we are slicing all the rows followed by the column labels.\nWe can read : as “to”.\nAnd finally, if the row index is labeled with numbers, we do not need “quotations” when slicing."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "href": "modules/module1/slides/module1_20.html#slicing-dataframe",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Slicing Dataframe",
    "text": "Slicing Dataframe\n\ncereal = pd.read_csv('data/cereal.csv')\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\nUp until point, we have been manipulating our dataframe with column and row labels using .loc[].\nSlicing can also be done by the location position of each row with .iloc[].\n.iloc[] is very similar to .loc[], however, the “i” in iloc refers to the index integer position.\nWe are going to return to our cereal dataset and take a look at the first 10 rows.\nLet’s say we want the rows from All-Bran to Apple Cinnamon Cheerios, but we want to slice based on their position instead of their label.\nUsing Python’s counting method of starting at zero, we conclude that All-Bran to be at position to 2.\nWe get Apple Cinnamon Cheerios position to be 5 in the same way.\nWe are lucky with this dataframe because our index labels match the position of the rows, and this makes things a little bit simpler."
  },
  {
    "objectID": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "href": "modules/module1/slides/module1_20.html#selecting-with-.iloc",
    "title": "Slicing and Selecting Using .iloc[]",
    "section": "Selecting with .iloc[]",
    "text": "Selecting with .iloc[]\n\ncereal.head(10)\n\n\n\n\n\n\n\n\nname\nmfr\ntype\ncalories\n...\nshelf\nweight\ncups\nrating\n\n\n\n\n0\n100% Bran\nN\nCold\n70\n...\n3\n1.00\n0.33\n68.402973\n\n\n1\n100% Natural Bran\nQ\nCold\n120\n...\n3\n1.00\n1.00\n33.983679\n\n\n2\nAll-Bran\nK\nCold\n70\n...\n3\n1.00\n0.33\n59.425505\n\n\n3\nAll-Bran with Extra Fiber\nK\nCold\n50\n...\n3\n1.00\n0.50\n93.704912\n\n\n4\nAlmond Delight\nR\nCold\n110\n...\n3\n1.00\n0.75\n34.384843\n\n\n5\nApple Cinnamon Cheerios\nG\nCold\n110\n...\n1\n1.00\n0.75\n29.509541\n\n\n6\nApple Jacks\nK\nCold\n110\n...\n2\n1.00\n1.00\n33.174094\n\n\n7\nBasic 4\nG\nCold\n130\n...\n3\n1.33\n0.75\n37.038562\n\n\n8\nBran Chex\nR\nCold\n90\n...\n1\n1.00\n0.67\n49.120253\n\n\n9\nBran Flakes\nP\nCold\n90\n...\n3\n1.00\n0.67\n53.313813\n\n\n\n\n10 rows × 16 columns\n\n\n\n\n\n\n\n\n\n\nRow\nRow Position\n\n\n\n\nAlmond Delight\nPosition 4\n\n\nBasic 4\nPosition 7\n\n\nApple Jacks\nPosition 6\n\n\n\n\n\n\n\n\n\n\n\n\nColumns\nColumn Position\n\n\n\n\nname\nPosition 0\n\n\ncalories\nPosition 3\n\n\nfat\nPosition 5\n\n\ntype\nPosition 2\n\n\n\n\n\n\n\n\nSelecting using .iloc[] is done identically to .loc[], however, the items within each set of square brackets MUST be integers, and not in quotation marks.\nLet’s say we want the rows Almond Delight, Basic 4 and Apple Jacks with the columns name, calories, fat and type and in that specific order."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "href": "modules/module1/slides/module1_26.html#numerical-and-categorical-columns",
    "title": "Summary Statistics",
    "section": "Numerical and Categorical Columns",
    "text": "Numerical and Categorical Columns\nCategorical data\nConsists of qualitative observations such as characteristics - things generally containing words.\nExamples\n\nColours\nNames\n\n\nNumerical data\nThese data are usually expressed with numbers.\nExamples\n\nMeasurements\nQuantities\n\n\nBefore we go further, let’s quickly discuss the 2 different types of data.\nCategorical data consists of qualitative observations such as characteristics - things generally containing names or words. Examples would be colours or names of things.\nNumerical data are usually expressed with numbers such as measurements or quantities.\nOur columns in our dataframe are considered one of the two of these."
  },
  {
    "objectID": "modules/module1/slides/module1_26.html#pandas-describe",
    "href": "modules/module1/slides/module1_26.html#pandas-describe",
    "title": "Summary Statistics",
    "section": "Pandas describe()",
    "text": "Pandas describe()\n\ncereal.describe()\n\n\n\n\n\n\n\n\ncalories\nprotein\nfat\nsodium\n...\nshelf\nweight\ncups\nrating\n\n\n\n\ncount\n77.000000\n77.000000\n77.000000\n77.000000\n...\n77.000000\n77.000000\n77.000000\n77.000000\n\n\nmean\n106.883117\n2.545455\n1.012987\n159.675325\n...\n2.207792\n1.029610\n0.821039\n42.665705\n\n\nstd\n19.484119\n1.094790\n1.006473\n83.832295\n...\n0.832524\n0.150477\n0.232716\n14.047289\n\n\nmin\n50.000000\n1.000000\n0.000000\n0.000000\n...\n1.000000\n0.500000\n0.250000\n18.042851\n\n\n25%\n100.000000\n2.000000\n0.000000\n130.000000\n...\n1.000000\n1.000000\n0.670000\n33.174094\n\n\n50%\n110.000000\n3.000000\n1.000000\n180.000000\n...\n2.000000\n1.000000\n0.750000\n40.400208\n\n\n75%\n110.000000\n3.000000\n2.000000\n210.000000\n...\n3.000000\n1.000000\n1.000000\n50.828392\n\n\nmax\n160.000000\n6.000000\n5.000000\n320.000000\n...\n3.000000\n1.500000\n1.500000\n93.704912\n\n\n\n\n8 rows × 13 columns\n\n\n\n\nPandas has a lot up its sleeve but one of the most useful methods is called .describe() and it does exactly that. it describes our data.\nLet’s try it out on our cereal dataset.\nBy default df.describe() only shows numerical columns."
  },
  {
    "objectID": "modules/module5/module5-00-module_learning_outcomes.html",
    "href": "modules/module5/module5-00-module_learning_outcomes.html",
    "title": "0. Module Learning Outcomes",
    "section": "",
    "text": "0. Module Learning Outcomes\n\nVideoSlides",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "0. Module Learning Outcomes"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html",
    "title": "1.1. Exercises",
    "section": "",
    "text": "time = 150\n\nif time  &lt; 120:\n    speed = 'Fast'\nelif time &lt; 180:\n    speed = 'Average'\nelse:\n    speed = 'Slow'\nspeed\n\n\n\n\nprice = 150\n\nif price &gt; 50:\n    expensive = 'moderately'\nelif price &gt; 100:\n    expensive = 'valuable'\nelse:\n    expensive = 'affordable'\nexpensive\n\n\n\n\n\n\n\n\n\n\nif price &gt; 100\n    expensive = 'valuable'\nelse\n    expensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\nexpensive = 'moderately'\nelif price &gt; 100:\nexpensive = 'valuable'\nelse:\nexpensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\n    expensive = 'moderately'\nexpensive\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice making decisions with conditional statements. We are going to the gym and our exercise plan takes different amounts of reps. let’s make conditional statements that depend on the name of the exercises.\nTasks:\n\nMake if, elif, and else statements for the following conditions:\n\nif the exercise value is lunges, set an object value named reps to 20.\nif the exercise value is squats, set reps to 25\nif the exercise value is burpees, set reps to 15\nIf the exercise value is anything else, set reps to 10.\n\nDisplay the value of reps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using double equal signs (==) to make a conditional statement?\nAre you using a single if statement and 2 elif statements?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try to make inline conditional statements using if and else. the variable cups_of_tea is the number of cups of tea Ben drank last week.\nTasks:\n\nMake an inline if/else statement that satisfies the following conditions:\n\nif the data type of cups_of_tea is of type list, then set and object named tea_amount to the sum of the elements.\nif the data type is anything else, set tea_amount to the string 'cannot sum'.\n\nDisplay the result of tea_amount.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nTo check the data type of cups_of_tea, you can use type(cups_of_tea) == list.\nAre you using sum() to sum up the elements in a list?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html#quick-questions-with-conditionals",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html#quick-questions-with-conditionals",
    "title": "1.1. Exercises",
    "section": "",
    "text": "time = 150\n\nif time  &lt; 120:\n    speed = 'Fast'\nelif time &lt; 180:\n    speed = 'Average'\nelse:\n    speed = 'Slow'\nspeed\n\n\n\n\nprice = 150\n\nif price &gt; 50:\n    expensive = 'moderately'\nelif price &gt; 100:\n    expensive = 'valuable'\nelse:\n    expensive = 'affordable'\nexpensive",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html#will-it-run-with-conditionals",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html#will-it-run-with-conditionals",
    "title": "1.1. Exercises",
    "section": "",
    "text": "if price &gt; 100\n    expensive = 'valuable'\nelse\n    expensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\nexpensive = 'moderately'\nelif price &gt; 100:\nexpensive = 'valuable'\nelse:\nexpensive = 'affordable'\nexpensive\n\n\n\nif price &gt; 50:\n    expensive = 'moderately'\nexpensive",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-02-quick_questions_with_conditionals.html#coding-questions",
    "href": "modules/module5/module5-02-quick_questions_with_conditionals.html#coding-questions",
    "title": "1.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice making decisions with conditional statements. We are going to the gym and our exercise plan takes different amounts of reps. let’s make conditional statements that depend on the name of the exercises.\nTasks:\n\nMake if, elif, and else statements for the following conditions:\n\nif the exercise value is lunges, set an object value named reps to 20.\nif the exercise value is squats, set reps to 25\nif the exercise value is burpees, set reps to 15\nIf the exercise value is anything else, set reps to 10.\n\nDisplay the value of reps.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using double equal signs (==) to make a conditional statement?\nAre you using a single if statement and 2 elif statements?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s try to make inline conditional statements using if and else. the variable cups_of_tea is the number of cups of tea Ben drank last week.\nTasks:\n\nMake an inline if/else statement that satisfies the following conditions:\n\nif the data type of cups_of_tea is of type list, then set and object named tea_amount to the sum of the elements.\nif the data type is anything else, set tea_amount to the string 'cannot sum'.\n\nDisplay the result of tea_amount.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nTo check the data type of cups_of_tea, you can use type(cups_of_tea) == list.\nAre you using sum() to sum up the elements in a list?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 1.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-repeated_iterations_questions.html",
    "href": "modules/module5/module5-07-repeated_iterations_questions.html",
    "title": "2.1. Exercises",
    "section": "",
    "text": "sentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \nword_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nname in sentence: \n  word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \n    word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence\n    word_length.append(len(name))\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nWe’ve learned about iterating , now it’s time to apply this! We have a list that contains all elements of type float. We want to create a new list that casts each element to type int.\nTasks:\n\nCreate a new empty list named integer_list.\nIterate over all the items in float_list. Cast the element to data type int and append it to integer_list.\nDisplay the value of integer_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\nAre you appending the int value to the new list with integer_list.append(int('variable-name-chose'))\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-repeated_iterations_questions.html#repeated-iterations-questions",
    "href": "modules/module5/module5-07-repeated_iterations_questions.html#repeated-iterations-questions",
    "title": "2.1. Exercises",
    "section": "",
    "text": "sentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \nword_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nname in sentence: \n  word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence: \n    word_length.append(len(name))\n\n\n\nsentence = ['Once', 'upon', 'a', 'time']\nword_length = list()\nfor name in sentence\n    word_length.append(len(name))",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-07-repeated_iterations_questions.html#practice-iterating-over-a-collection",
    "href": "modules/module5/module5-07-repeated_iterations_questions.html#practice-iterating-over-a-collection",
    "title": "2.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nWe’ve learned about iterating , now it’s time to apply this! We have a list that contains all elements of type float. We want to create a new list that casts each element to type int.\nTasks:\n\nCreate a new empty list named integer_list.\nIterate over all the items in float_list. Cast the element to data type int and append it to integer_list.\nDisplay the value of integer_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\nAre you appending the int value to the new list with integer_list.append(int('variable-name-chose'))\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 2.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-range_questions.html",
    "href": "modules/module5/module5-10-range_questions.html",
    "title": "3.1. Exercises",
    "section": "",
    "text": "numericals = []\nfor j in range(30,60,5):\n    numericals.append(j)\nnumericals\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s make a loop again but this time let’s practice using the range() verb.\nTasks:\n\nIterate over a range from 50 to 10, stepping down 4 integers at a time.\nAppend the square of each number for each iteration to square_list.\nDisplay the value of square_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using range(50,10,-4)?\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s read in multiple dataframes together and concatenate them vertically to one large dataframe using a loop and the range() function.\nTasks:\n\nThere are 4 dataframes named pkm1.csv to pkm4.csv. that we wish to load in and vertically concatenate together.\nFill in the blanks so the code reads in each dataframe according to their differing file name and concatenates them together.\nDisplay the final dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you adding .csv to the string object?\nAre you using pd.read_csv()?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-range_questions.html#range-questions",
    "href": "modules/module5/module5-10-range_questions.html#range-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "numericals = []\nfor j in range(30,60,5):\n    numericals.append(j)\nnumericals",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-10-range_questions.html#coding-questions",
    "href": "modules/module5/module5-10-range_questions.html#coding-questions",
    "title": "3.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s make a loop again but this time let’s practice using the range() verb.\nTasks:\n\nIterate over a range from 50 to 10, stepping down 4 integers at a time.\nAppend the square of each number for each iteration to square_list.\nDisplay the value of square_list.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using range(50,10,-4)?\nAre you starting your loop with for and using a colon for the first line?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s read in multiple dataframes together and concatenate them vertically to one large dataframe using a loop and the range() function.\nTasks:\n\nThere are 4 dataframes named pkm1.csv to pkm4.csv. that we wish to load in and vertically concatenate together.\nFill in the blanks so the code reads in each dataframe according to their differing file name and concatenates them together.\nDisplay the final dataframe.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using pd.concat()?\nAre you adding .csv to the string object?\nAre you using pd.read_csv()?\nAre you indenting each line of code in the loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 3.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-14-nested_loop_questions.html",
    "href": "modules/module5/module5-14-nested_loop_questions.html",
    "title": "4.1. Exercises",
    "section": "",
    "text": "for i in range(0, 49, 10):\n    print('Hurray')\n    for j in range(0,8,2):\n        print(\"This is fun!\")\n\n\n\n\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s count how many letters are contained in the dishes of a menu! We have a list named menu that contains multiples lists. We want to calculate how many character are contain in the entire menu.\nTasks:\n\nMake an object named charater_count and give it a value of 0.\nMake an outer loop that iterates over each list of the menu list.\nMake an inner loop that iterates over each element in the nested list and add the length of it to charater_count.\nDisplay the value of charater_count outside both loops.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using 4 indentations for each loop?\nAre you putting character_count = character_count + len(dish) in the inner loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-14-nested_loop_questions.html#nested-loop-questions",
    "href": "modules/module5/module5-14-nested_loop_questions.html#nested-loop-questions",
    "title": "4.1. Exercises",
    "section": "",
    "text": "for i in range(0, 49, 10):\n    print('Hurray')\n    for j in range(0,8,2):\n        print(\"This is fun!\")",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-14-nested_loop_questions.html#making-a-nested-loop",
    "href": "modules/module5/module5-14-nested_loop_questions.html#making-a-nested-loop",
    "title": "4.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nLet’s count how many letters are contained in the dishes of a menu! We have a list named menu that contains multiples lists. We want to calculate how many character are contain in the entire menu.\nTasks:\n\nMake an object named charater_count and give it a value of 0.\nMake an outer loop that iterates over each list of the menu list.\nMake an inner loop that iterates over each element in the nested list and add the length of it to charater_count.\nDisplay the value of charater_count outside both loops.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you using 4 indentations for each loop?\nAre you putting character_count = character_count + len(dish) in the inner loop?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 4.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-17-conditional_loop_questions.html",
    "href": "modules/module5/module5-17-conditional_loop_questions.html",
    "title": "5.1. Exercises",
    "section": "",
    "text": "parking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = list()\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        parking_tickets.append(True)\n    else:\n        parking_tickets.append(False)\n\nsum(parking_tickets)\n\n\n\n\nparking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = []\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        break\n    else:\n        parking_tickets.append(False)\nsum(parking_tickets)\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nFor the last few Modules, we have been playing with different dataframes. In this question, we have stored them in a list named dataframes.\nLet’s count how many of these dataframes have more than 1000 rows.\nTasks:\n\nMake an object named count and assign it a value of 0.\nLoop through the dataframes and count how many of them have more than 1000 rows.\nHint: you can use .shape[0] to access the number of rows in a dataframe.\ncount should increase by 1 if the dataframe has more than 1000 rows and 0 otherwise.\nDisplay the value of count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nDid you use if data.shape[0] &gt; 1000: as you if statement?\nYou don’t necessarily need an else statement here.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-17-conditional_loop_questions.html#conditional-loop-questions",
    "href": "modules/module5/module5-17-conditional_loop_questions.html#conditional-loop-questions",
    "title": "5.1. Exercises",
    "section": "",
    "text": "parking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = list()\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        parking_tickets.append(True)\n    else:\n        parking_tickets.append(False)\n\nsum(parking_tickets)\n\n\n\n\nparking_lot = [ 20, 60, -12, 110, -20, 80, 12, -40, 37, 92]\nparking_tickets = []\n\nfor stall in parking_lot: \n    if stall &lt;0:\n        break\n    else:\n        parking_tickets.append(False)\nsum(parking_tickets)",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-17-conditional_loop_questions.html#practice-iterating-over-a-collection",
    "href": "modules/module5/module5-17-conditional_loop_questions.html#practice-iterating-over-a-collection",
    "title": "5.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\nFor the last few Modules, we have been playing with different dataframes. In this question, we have stored them in a list named dataframes.\nLet’s count how many of these dataframes have more than 1000 rows.\nTasks:\n\nMake an object named count and assign it a value of 0.\nLoop through the dataframes and count how many of them have more than 1000 rows.\nHint: you can use .shape[0] to access the number of rows in a dataframe.\ncount should increase by 1 if the dataframe has more than 1000 rows and 0 otherwise.\nDisplay the value of count.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nDid you use if data.shape[0] &gt; 1000: as you if statement?\nYou don’t necessarily need an else statement here.\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 5.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-20-function_questions.html",
    "href": "modules/module5/module5-20-function_questions.html",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def add_stars(name):\n    name = \"**\" + name + \"**\"\n    return\n\n\n\n\n\n\n\nInstructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice converting existing code into a function so that it complies with the DRY principle.\nTasks:\n\nUsing the code provided, transform it into a function named uppercase_count\nThe function should take in one argument and return the number of uppercases in the string\nTest it on the string I hope you've Been Learning ALOT!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def uppercase_count(string):?\nAre you returning the object uppercase_num2?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice making a function that returns the BMI (Body Mass Index) given a person’s weight and height.\nTasks:\n\nDefine a function and give it the name BMI_calculator.\nIt should take 2 arguments which can be called height, and weight.\nBMI can be calculated as:\n\n\n\n\n\n\n\n\nMake sure the function returns the calculated BMI.\nOnce you have created your function, use it to calculate the BMI of a person with a height of 62 inches and a weight of 105 lbs.\n\nSave this in an object name bmi_calc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def bmi_calculator(height, weight):\nAre you returning (weight/(height**2)) * 703?\nTo use it, are you running bmi_calculator(62, 105)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-20-function_questions.html#function-questions",
    "href": "modules/module5/module5-20-function_questions.html#function-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "def add_stars(name):\n    name = \"**\" + name + \"**\"\n    return",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/module5-20-function_questions.html#coding-questions",
    "href": "modules/module5/module5-20-function_questions.html#coding-questions",
    "title": "6.1. Exercises",
    "section": "",
    "text": "Instructions:\nRunning a coding exercise for the first time could take a bit of time for everything to load. Be patient, it could take a few minutes.\nWhen you see ____ in a coding exercise, replace it with what you assume to be the correct code. Run it and see if you obtain the desired output. Submit your code to validate if you were correct.\nMake sure you remove the hash (#) symbol in the coding portions of this question. We have commented them so that the line won’t execute and you can test your code after each step.\n\n\nLet’s practice converting existing code into a function so that it complies with the DRY principle.\nTasks:\n\nUsing the code provided, transform it into a function named uppercase_count\nThe function should take in one argument and return the number of uppercases in the string\nTest it on the string I hope you've Been Learning ALOT!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def uppercase_count(string):?\nAre you returning the object uppercase_num2?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLet’s practice making a function that returns the BMI (Body Mass Index) given a person’s weight and height.\nTasks:\n\nDefine a function and give it the name BMI_calculator.\nIt should take 2 arguments which can be called height, and weight.\nBMI can be calculated as:\n\n\n\n\n\n\n\n\nMake sure the function returns the calculated BMI.\nOnce you have created your function, use it to calculate the BMI of a person with a height of 62 inches and a weight of 105 lbs.\n\nSave this in an object name bmi_calc.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nHint 1\n\n\n\n\n\n\nAre you defining your function with def bmi_calculator(height, weight):\nAre you returning (weight/(height**2)) * 703?\nTo use it, are you running bmi_calculator(62, 105)?\n\n\n\n\n\n\n\n\n\n\n\n\nFully worked solution:",
    "crumbs": [
      "**Module 5: Making Choices and Repeating Iterations**",
      "&nbsp;&nbsp; 6.1. Exercises"
    ]
  },
  {
    "objectID": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "href": "modules/module5/slides/module5_00.html#module-learning-outcomes",
    "title": "Module Learning Outcomes",
    "section": "Module Learning Outcomes",
    "text": "Module Learning Outcomes\nBy the end of the module, students are expected to:\n\nExplain the DRY principle and how it can be useful.\nWrite conditional statements with if, elif and else to run different code, depending on the input.\nWrite for loops to repeatedly run code.\nDescribe the expected outcome of code with nested loops.\nDefine and use a function that accepts parameters and returns values."
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#repeating-code",
    "href": "modules/module5/slides/module5_06.html#repeating-code",
    "title": "Repeated Iterations (Loops)",
    "section": "Repeating Code",
    "text": "Repeating Code\n\nnumbers = [2, 3, 5]\n\n\n\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nThere are times while coding where we may want to repeat the same action multiple times.\nLet’s say we want to add the square of every number in a list to a new list.\nWe could write code that looked something like this, but it’s problematic for numerous reasons."
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#dont-repeat-yourself-dry-principle",
    "href": "modules/module5/slides/module5_06.html#dont-repeat-yourself-dry-principle",
    "title": "Repeated Iterations (Loops)",
    "section": "Don’t Repeat Yourself (DRY Principle)",
    "text": "Don’t Repeat Yourself (DRY Principle)\nThe DRY in the DRY principle stands for “Don’t Repeat Yourself”. It is the principle of avoiding redundancy within code.\n\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nJust like how we try to reduce, reuse, and recycle waste, coding likes to borrow a similar principle aimed at reducing repetitive code.\nThis motion is called the DRY principle, otherwise known as the “Don’t Repeat Yourself” principle.\nThe premise of this principle to avoid redundancy within code.\nThe code we discussed here is a violation of this principle (known as a WET Solution (“write every time”)).\nThere is a much more efficient method to obtain the same output that avoids typing out multiple iterations of similar code."
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#loops",
    "href": "modules/module5/slides/module5_06.html#loops",
    "title": "Repeated Iterations (Loops)",
    "section": "Loops",
    "text": "Loops\n\nnumbers = [2, 3, 5]\n\n\n\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\n\nsquared = list()\nfor number in numbers: \n    squared.append(number ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nOur example from before takes 3 lines of code to add all the squared values to squared and violates the DRY principle in the process.\nInstead, we can add to the list named squared by using something called a loop to repeat the .append() action over the multiple elements.\nThis only took 2 lines of code, but if the number of elements in the list numbers increased, the code would remain the same. Think how much code writing we would avoid if the list numbers had a length of 1000?!"
  },
  {
    "objectID": "modules/module5/slides/module5_06.html#for-each-loop",
    "href": "modules/module5/slides/module5_06.html#for-each-loop",
    "title": "Repeated Iterations (Loops)",
    "section": "For (Each) Loop",
    "text": "For (Each) Loop\n\nsquared = list()\nfor number in numbers: \n    squared.append(number ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nThis specific type of loop is called a For loop and can be iterated over any type of collection/sequence (these are lists, tuples, and strings).\nIn this example, it’s over the values in a list.\nEvery line of code that is indented is executed for each value in the list (hence the name “for” loops, sometimes also called “for each” loops).\nHere we only have one line that is indented and repetitively executed for each element.\nThe loop ends after the variable has iterated over all the values in the collection/sequence."
  },
  {
    "objectID": "modules/module5/slides/module5_19.html#functions-and-the-dry-principle",
    "href": "modules/module5/slides/module5_19.html#functions-and-the-dry-principle",
    "title": "Introduction to Functions",
    "section": "Functions and the DRY principle",
    "text": "Functions and the DRY principle\n\nnumbers = [ 2, 3, 5]\nsquared = list()\n\nsquared.append(numbers[0] ** 2)\nsquared.append(numbers[1] ** 2)\nsquared.append(numbers[2] ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\n\nsquared = list()\nfor number in numbers: \n    squared.append(number ** 2)\nsquared\n\n[4, 9, 25]\n\n\n\nIn the last section, we discussed how loops helped avoid redundant code.\nWe wrote code, which created a new list containing the square of the elements.\nUsing a loop for this helped our coding style somewhat, but now we have a new problem.\nWhat happens if we want to do the same process to multiple lists all named differently?"
  },
  {
    "objectID": "modules/module5/slides/module5_19.html#syntax",
    "href": "modules/module5/slides/module5_19.html#syntax",
    "title": "Introduction to Functions",
    "section": "Syntax",
    "text": "Syntax\n\ndef squares_a_list(numerical_list):\n    new_squared_list = list()\n    \n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    \n    return new_squared_list\n\n\nLet’s take a look at the how we define a function:\n\n\nLet’s take a look at how we define a function:\n\ndef is a python keyword that tells Python that anything indented after this belongs to a function.\nNext, we give it a Function name. Like any object, we need to name it.\n\nIn this case, we have named our function squares_a_list.\n\nWe cannot name it any existing function names.\n\nFollowing our function name, we specify any Parameters/Arguments that the function requires.\n\nPython calls these “parameters”; however, we have been calling these “arguments”.\n\nThis is what the function needs as an input in order for us to perform some actions on an existing object.\n\nWe can have multiple parameters or no parameters at all.\nIn our function, we have a single parameter named numerical_list.\n\nLastly, we end the line with a Colon\n\nJust like loops and conditionals, a function required its first defining line to end with a colon."
  },
  {
    "objectID": "modules/module5/slides/module5_19.html#designing-good-functions",
    "href": "modules/module5/slides/module5_19.html#designing-good-functions",
    "title": "Introduction to Functions",
    "section": "Designing Good Functions",
    "text": "Designing Good Functions\nThere is some ambiguity for how and when to design a function.\n\nShould squares_a_list() be a function if I’m only ever using it once?\nShould the loop be inside the function, or outside?\n\n\ndef squares_a_list(numerical_list):\n    new_squared_list = list()\n    \n    for number in numerical_list:\n        new_squared_list.append(number ** 2)\n    \n    return new_squared_list\n\n\nThere is some ambiguity for how and when to design a function.\nFor instance:\n\nShould squares_a_list() be a function if I’m only ever using it once? What about Twice?\nShould the loop be inside the function, or outside?\n\nThis comes down to personal opinion.\nSome may say that the function squares_a_list() does a bit too much to keep things understandable.\nDesigning effective functions will be discussed in Module 6."
  }
]